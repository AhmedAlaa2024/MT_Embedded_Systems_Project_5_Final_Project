
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000013b2  00001446  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800082  00800082  00001468  2**0
                  ALLOC
  3 .stab         00002160  00000000  00000000  00001468  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013ff  00000000  00000000  000035c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 39       	cpi	r26, 0x93	; 147
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 51 05 	call	0xaa2	; 0xaa2 <main>
      8a:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BUZZER_init>:
/*
 * Description :
 * Initialize the direction of the connected pin
 */
void BUZZER_init(void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
      9a:	80 e0       	ldi	r24, 0x00	; 0
      9c:	60 e0       	ldi	r22, 0x00	; 0
      9e:	41 e0       	ldi	r20, 0x01	; 1
      a0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
      a4:	80 e0       	ldi	r24, 0x00	; 0
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	40 e0       	ldi	r20, 0x00	; 0
      aa:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <GPIO_writePin>
}
      ae:	cf 91       	pop	r28
      b0:	df 91       	pop	r29
      b2:	08 95       	ret

000000b4 <BUZZER_on>:
/*
 * Description :
 * Force HIGH Logic in Buzzer connected pin
 */
void BUZZER_on(void)
{
      b4:	df 93       	push	r29
      b6:	cf 93       	push	r28
      b8:	cd b7       	in	r28, 0x3d	; 61
      ba:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	60 e0       	ldi	r22, 0x00	; 0
      c0:	41 e0       	ldi	r20, 0x01	; 1
      c2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <GPIO_writePin>
}
      c6:	cf 91       	pop	r28
      c8:	df 91       	pop	r29
      ca:	08 95       	ret

000000cc <BUZZER_off>:
/*
 * Description :
 * Force LOW Logic in Buzzer connected pin
 */
void BUZZER_off(void)
{
      cc:	df 93       	push	r29
      ce:	cf 93       	push	r28
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
      d4:	80 e0       	ldi	r24, 0x00	; 0
      d6:	60 e0       	ldi	r22, 0x00	; 0
      d8:	40 e0       	ldi	r20, 0x00	; 0
      da:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <GPIO_writePin>
}
      de:	cf 91       	pop	r28
      e0:	df 91       	pop	r29
      e2:	08 95       	ret

000000e4 <DcMotor_Init>:
 * Description :
 * The Function responsible for setup the direction for the two motor pins through the GPIO driver.
 * Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_Init(void)
{
      e4:	df 93       	push	r29
      e6:	cf 93       	push	r28
      e8:	cd b7       	in	r28, 0x3d	; 61
      ea:	de b7       	in	r29, 0x3e	; 62
	/* Setup the pin controlling the direction of dc motor */
	GPIO_setupPinDirection(LEFT_NODE_PORT_ID, LEFT_NODE_PIN_ID, PIN_OUTPUT);
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	60 e0       	ldi	r22, 0x00	; 0
      f0:	41 e0       	ldi	r20, 0x01	; 1
      f2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(RIGHT_NODE_PORT_ID, RIGHT_MODE_PIN_ID, PIN_OUTPUT);
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	61 e0       	ldi	r22, 0x01	; 1
      fa:	41 e0       	ldi	r20, 0x01	; 1
      fc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <GPIO_setupPinDirection>

	/* Stop the dc motor */
	GPIO_writePin(LEFT_NODE_PORT_ID, LEFT_NODE_PIN_ID, LOGIC_LOW);
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	60 e0       	ldi	r22, 0x00	; 0
     104:	40 e0       	ldi	r20, 0x00	; 0
     106:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <GPIO_writePin>
	GPIO_writePin(RIGHT_NODE_PORT_ID, RIGHT_MODE_PIN_ID, LOGIC_LOW);
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	61 e0       	ldi	r22, 0x01	; 1
     10e:	40 e0       	ldi	r20, 0x00	; 0
     110:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <GPIO_writePin>
}
     114:	cf 91       	pop	r28
     116:	df 91       	pop	r29
     118:	08 95       	ret

0000011a <DcMotor_Rotate>:
 * The function responsible for rotate the DC Motor CW/ or A-CW or stop the motor based on the state input state value.
 * Input:
 * 			state: The required DC Motor state, it should be CW or A-CW or stop. DcMotor_State data type should be declared as enum or uint8.
 */
void DcMotor_Rotate(DcMotor_State state)
{
     11a:	df 93       	push	r29
     11c:	cf 93       	push	r28
     11e:	0f 92       	push	r0
     120:	cd b7       	in	r28, 0x3d	; 61
     122:	de b7       	in	r29, 0x3e	; 62
     124:	89 83       	std	Y+1, r24	; 0x01
	if (state == CW)
     126:	89 81       	ldd	r24, Y+1	; 0x01
     128:	88 23       	and	r24, r24
     12a:	59 f4       	brne	.+22     	; 0x142 <DcMotor_Rotate+0x28>
	{
		GPIO_writePin(LEFT_NODE_PORT_ID, LEFT_NODE_PIN_ID, LOGIC_HIGH);
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	60 e0       	ldi	r22, 0x00	; 0
     130:	41 e0       	ldi	r20, 0x01	; 1
     132:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <GPIO_writePin>
		GPIO_writePin(RIGHT_NODE_PORT_ID, RIGHT_MODE_PIN_ID, LOGIC_LOW);
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	61 e0       	ldi	r22, 0x01	; 1
     13a:	40 e0       	ldi	r20, 0x00	; 0
     13c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <GPIO_writePin>
     140:	1b c0       	rjmp	.+54     	; 0x178 <DcMotor_Rotate+0x5e>
	}
	else if (state == ACW)
     142:	89 81       	ldd	r24, Y+1	; 0x01
     144:	81 30       	cpi	r24, 0x01	; 1
     146:	59 f4       	brne	.+22     	; 0x15e <DcMotor_Rotate+0x44>
	{
		GPIO_writePin(LEFT_NODE_PORT_ID, LEFT_NODE_PIN_ID, LOGIC_LOW);
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	60 e0       	ldi	r22, 0x00	; 0
     14c:	40 e0       	ldi	r20, 0x00	; 0
     14e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <GPIO_writePin>
		GPIO_writePin(RIGHT_NODE_PORT_ID, RIGHT_MODE_PIN_ID, LOGIC_HIGH);
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	61 e0       	ldi	r22, 0x01	; 1
     156:	41 e0       	ldi	r20, 0x01	; 1
     158:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <GPIO_writePin>
     15c:	0d c0       	rjmp	.+26     	; 0x178 <DcMotor_Rotate+0x5e>
	}
	else if (state == OFF)
     15e:	89 81       	ldd	r24, Y+1	; 0x01
     160:	82 30       	cpi	r24, 0x02	; 2
     162:	51 f4       	brne	.+20     	; 0x178 <DcMotor_Rotate+0x5e>
	{
		GPIO_writePin(LEFT_NODE_PORT_ID, LEFT_NODE_PIN_ID, LOGIC_LOW);
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	60 e0       	ldi	r22, 0x00	; 0
     168:	40 e0       	ldi	r20, 0x00	; 0
     16a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <GPIO_writePin>
		GPIO_writePin(RIGHT_NODE_PORT_ID, RIGHT_MODE_PIN_ID, LOGIC_LOW);
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	61 e0       	ldi	r22, 0x01	; 1
     172:	40 e0       	ldi	r20, 0x00	; 0
     174:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <GPIO_writePin>
	}
}
     178:	0f 90       	pop	r0
     17a:	cf 91       	pop	r28
     17c:	df 91       	pop	r29
     17e:	08 95       	ret

00000180 <EEPROM_init>:
 *
 *******************************************************************************/
#include "eeprom.h"

void EEPROM_init(const TWI_ConfigType * ConfigPtr)
{
     180:	df 93       	push	r29
     182:	cf 93       	push	r28
     184:	00 d0       	rcall	.+0      	; 0x186 <EEPROM_init+0x6>
     186:	cd b7       	in	r28, 0x3d	; 61
     188:	de b7       	in	r29, 0x3e	; 62
     18a:	9a 83       	std	Y+2, r25	; 0x02
     18c:	89 83       	std	Y+1, r24	; 0x01
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init(ConfigPtr);
     18e:	89 81       	ldd	r24, Y+1	; 0x01
     190:	9a 81       	ldd	r25, Y+2	; 0x02
     192:	0e 94 af 04 	call	0x95e	; 0x95e <TWI_init>
}
     196:	0f 90       	pop	r0
     198:	0f 90       	pop	r0
     19a:	cf 91       	pop	r28
     19c:	df 91       	pop	r29
     19e:	08 95       	ret

000001a0 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     1a0:	df 93       	push	r29
     1a2:	cf 93       	push	r28
     1a4:	00 d0       	rcall	.+0      	; 0x1a6 <EEPROM_writeByte+0x6>
     1a6:	00 d0       	rcall	.+0      	; 0x1a8 <EEPROM_writeByte+0x8>
     1a8:	cd b7       	in	r28, 0x3d	; 61
     1aa:	de b7       	in	r29, 0x3e	; 62
     1ac:	9a 83       	std	Y+2, r25	; 0x02
     1ae:	89 83       	std	Y+1, r24	; 0x01
     1b0:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     1b2:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TWI_start>
    if (TWI_getStatus() != TW_START)
     1b6:	0e 94 42 05 	call	0xa84	; 0xa84 <TWI_getStatus>
     1ba:	88 30       	cpi	r24, 0x08	; 8
     1bc:	11 f0       	breq	.+4      	; 0x1c2 <EEPROM_writeByte+0x22>
        return ERROR;
     1be:	1c 82       	std	Y+4, r1	; 0x04
     1c0:	28 c0       	rjmp	.+80     	; 0x212 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	9a 81       	ldd	r25, Y+2	; 0x02
     1c6:	80 70       	andi	r24, 0x00	; 0
     1c8:	97 70       	andi	r25, 0x07	; 7
     1ca:	88 0f       	add	r24, r24
     1cc:	89 2f       	mov	r24, r25
     1ce:	88 1f       	adc	r24, r24
     1d0:	99 0b       	sbc	r25, r25
     1d2:	91 95       	neg	r25
     1d4:	80 6a       	ori	r24, 0xA0	; 160
     1d6:	0e 94 05 05 	call	0xa0a	; 0xa0a <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     1da:	0e 94 42 05 	call	0xa84	; 0xa84 <TWI_getStatus>
     1de:	88 31       	cpi	r24, 0x18	; 24
     1e0:	11 f0       	breq	.+4      	; 0x1e6 <EEPROM_writeByte+0x46>
        return ERROR;
     1e2:	1c 82       	std	Y+4, r1	; 0x04
     1e4:	16 c0       	rjmp	.+44     	; 0x212 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     1e6:	89 81       	ldd	r24, Y+1	; 0x01
     1e8:	0e 94 05 05 	call	0xa0a	; 0xa0a <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     1ec:	0e 94 42 05 	call	0xa84	; 0xa84 <TWI_getStatus>
     1f0:	88 32       	cpi	r24, 0x28	; 40
     1f2:	11 f0       	breq	.+4      	; 0x1f8 <EEPROM_writeByte+0x58>
        return ERROR;
     1f4:	1c 82       	std	Y+4, r1	; 0x04
     1f6:	0d c0       	rjmp	.+26     	; 0x212 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_write(u8data);
     1f8:	8b 81       	ldd	r24, Y+3	; 0x03
     1fa:	0e 94 05 05 	call	0xa0a	; 0xa0a <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     1fe:	0e 94 42 05 	call	0xa84	; 0xa84 <TWI_getStatus>
     202:	88 32       	cpi	r24, 0x28	; 40
     204:	11 f0       	breq	.+4      	; 0x20a <EEPROM_writeByte+0x6a>
        return ERROR;
     206:	1c 82       	std	Y+4, r1	; 0x04
     208:	04 c0       	rjmp	.+8      	; 0x212 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     20a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <TWI_stop>

    return SUCCESS;
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	8c 83       	std	Y+4, r24	; 0x04
     212:	8c 81       	ldd	r24, Y+4	; 0x04
}
     214:	0f 90       	pop	r0
     216:	0f 90       	pop	r0
     218:	0f 90       	pop	r0
     21a:	0f 90       	pop	r0
     21c:	cf 91       	pop	r28
     21e:	df 91       	pop	r29
     220:	08 95       	ret

00000222 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     222:	df 93       	push	r29
     224:	cf 93       	push	r28
     226:	00 d0       	rcall	.+0      	; 0x228 <EEPROM_readByte+0x6>
     228:	00 d0       	rcall	.+0      	; 0x22a <EEPROM_readByte+0x8>
     22a:	0f 92       	push	r0
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
     230:	9a 83       	std	Y+2, r25	; 0x02
     232:	89 83       	std	Y+1, r24	; 0x01
     234:	7c 83       	std	Y+4, r23	; 0x04
     236:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     238:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TWI_start>
    if (TWI_getStatus() != TW_START)
     23c:	0e 94 42 05 	call	0xa84	; 0xa84 <TWI_getStatus>
     240:	88 30       	cpi	r24, 0x08	; 8
     242:	11 f0       	breq	.+4      	; 0x248 <EEPROM_readByte+0x26>
        return ERROR;
     244:	1d 82       	std	Y+5, r1	; 0x05
     246:	44 c0       	rjmp	.+136    	; 0x2d0 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     248:	89 81       	ldd	r24, Y+1	; 0x01
     24a:	9a 81       	ldd	r25, Y+2	; 0x02
     24c:	80 70       	andi	r24, 0x00	; 0
     24e:	97 70       	andi	r25, 0x07	; 7
     250:	88 0f       	add	r24, r24
     252:	89 2f       	mov	r24, r25
     254:	88 1f       	adc	r24, r24
     256:	99 0b       	sbc	r25, r25
     258:	91 95       	neg	r25
     25a:	80 6a       	ori	r24, 0xA0	; 160
     25c:	0e 94 05 05 	call	0xa0a	; 0xa0a <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     260:	0e 94 42 05 	call	0xa84	; 0xa84 <TWI_getStatus>
     264:	88 31       	cpi	r24, 0x18	; 24
     266:	11 f0       	breq	.+4      	; 0x26c <EEPROM_readByte+0x4a>
        return ERROR;
     268:	1d 82       	std	Y+5, r1	; 0x05
     26a:	32 c0       	rjmp	.+100    	; 0x2d0 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     26c:	89 81       	ldd	r24, Y+1	; 0x01
     26e:	0e 94 05 05 	call	0xa0a	; 0xa0a <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     272:	0e 94 42 05 	call	0xa84	; 0xa84 <TWI_getStatus>
     276:	88 32       	cpi	r24, 0x28	; 40
     278:	11 f0       	breq	.+4      	; 0x27e <EEPROM_readByte+0x5c>
        return ERROR;
     27a:	1d 82       	std	Y+5, r1	; 0x05
     27c:	29 c0       	rjmp	.+82     	; 0x2d0 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
     27e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
     282:	0e 94 42 05 	call	0xa84	; 0xa84 <TWI_getStatus>
     286:	80 31       	cpi	r24, 0x10	; 16
     288:	11 f0       	breq	.+4      	; 0x28e <EEPROM_readByte+0x6c>
        return ERROR;
     28a:	1d 82       	std	Y+5, r1	; 0x05
     28c:	21 c0       	rjmp	.+66     	; 0x2d0 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     28e:	89 81       	ldd	r24, Y+1	; 0x01
     290:	9a 81       	ldd	r25, Y+2	; 0x02
     292:	80 70       	andi	r24, 0x00	; 0
     294:	97 70       	andi	r25, 0x07	; 7
     296:	88 0f       	add	r24, r24
     298:	89 2f       	mov	r24, r25
     29a:	88 1f       	adc	r24, r24
     29c:	99 0b       	sbc	r25, r25
     29e:	91 95       	neg	r25
     2a0:	81 6a       	ori	r24, 0xA1	; 161
     2a2:	0e 94 05 05 	call	0xa0a	; 0xa0a <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     2a6:	0e 94 42 05 	call	0xa84	; 0xa84 <TWI_getStatus>
     2aa:	80 34       	cpi	r24, 0x40	; 64
     2ac:	11 f0       	breq	.+4      	; 0x2b2 <EEPROM_readByte+0x90>
        return ERROR;
     2ae:	1d 82       	std	Y+5, r1	; 0x05
     2b0:	0f c0       	rjmp	.+30     	; 0x2d0 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
     2b2:	0e 94 2f 05 	call	0xa5e	; 0xa5e <TWI_readWithNACK>
     2b6:	eb 81       	ldd	r30, Y+3	; 0x03
     2b8:	fc 81       	ldd	r31, Y+4	; 0x04
     2ba:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
     2bc:	0e 94 42 05 	call	0xa84	; 0xa84 <TWI_getStatus>
     2c0:	88 35       	cpi	r24, 0x58	; 88
     2c2:	11 f0       	breq	.+4      	; 0x2c8 <EEPROM_readByte+0xa6>
        return ERROR;
     2c4:	1d 82       	std	Y+5, r1	; 0x05
     2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     2c8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <TWI_stop>
    return SUCCESS;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	8d 83       	std	Y+5, r24	; 0x05
     2d0:	8d 81       	ldd	r24, Y+5	; 0x05
}
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	cf 91       	pop	r28
     2de:	df 91       	pop	r29
     2e0:	08 95       	ret

000002e2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     2e2:	df 93       	push	r29
     2e4:	cf 93       	push	r28
     2e6:	00 d0       	rcall	.+0      	; 0x2e8 <GPIO_setupPinDirection+0x6>
     2e8:	00 d0       	rcall	.+0      	; 0x2ea <GPIO_setupPinDirection+0x8>
     2ea:	0f 92       	push	r0
     2ec:	cd b7       	in	r28, 0x3d	; 61
     2ee:	de b7       	in	r29, 0x3e	; 62
     2f0:	89 83       	std	Y+1, r24	; 0x01
     2f2:	6a 83       	std	Y+2, r22	; 0x02
     2f4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     2f6:	8a 81       	ldd	r24, Y+2	; 0x02
     2f8:	88 30       	cpi	r24, 0x08	; 8
     2fa:	08 f0       	brcs	.+2      	; 0x2fe <GPIO_setupPinDirection+0x1c>
     2fc:	d5 c0       	rjmp	.+426    	; 0x4a8 <__stack+0x49>
     2fe:	89 81       	ldd	r24, Y+1	; 0x01
     300:	84 30       	cpi	r24, 0x04	; 4
     302:	08 f0       	brcs	.+2      	; 0x306 <GPIO_setupPinDirection+0x24>
     304:	d1 c0       	rjmp	.+418    	; 0x4a8 <__stack+0x49>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	28 2f       	mov	r18, r24
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	3d 83       	std	Y+5, r19	; 0x05
     30e:	2c 83       	std	Y+4, r18	; 0x04
     310:	8c 81       	ldd	r24, Y+4	; 0x04
     312:	9d 81       	ldd	r25, Y+5	; 0x05
     314:	81 30       	cpi	r24, 0x01	; 1
     316:	91 05       	cpc	r25, r1
     318:	09 f4       	brne	.+2      	; 0x31c <GPIO_setupPinDirection+0x3a>
     31a:	43 c0       	rjmp	.+134    	; 0x3a2 <GPIO_setupPinDirection+0xc0>
     31c:	2c 81       	ldd	r18, Y+4	; 0x04
     31e:	3d 81       	ldd	r19, Y+5	; 0x05
     320:	22 30       	cpi	r18, 0x02	; 2
     322:	31 05       	cpc	r19, r1
     324:	2c f4       	brge	.+10     	; 0x330 <GPIO_setupPinDirection+0x4e>
     326:	8c 81       	ldd	r24, Y+4	; 0x04
     328:	9d 81       	ldd	r25, Y+5	; 0x05
     32a:	00 97       	sbiw	r24, 0x00	; 0
     32c:	71 f0       	breq	.+28     	; 0x34a <GPIO_setupPinDirection+0x68>
     32e:	bc c0       	rjmp	.+376    	; 0x4a8 <__stack+0x49>
     330:	2c 81       	ldd	r18, Y+4	; 0x04
     332:	3d 81       	ldd	r19, Y+5	; 0x05
     334:	22 30       	cpi	r18, 0x02	; 2
     336:	31 05       	cpc	r19, r1
     338:	09 f4       	brne	.+2      	; 0x33c <GPIO_setupPinDirection+0x5a>
     33a:	5f c0       	rjmp	.+190    	; 0x3fa <GPIO_setupPinDirection+0x118>
     33c:	8c 81       	ldd	r24, Y+4	; 0x04
     33e:	9d 81       	ldd	r25, Y+5	; 0x05
     340:	83 30       	cpi	r24, 0x03	; 3
     342:	91 05       	cpc	r25, r1
     344:	09 f4       	brne	.+2      	; 0x348 <GPIO_setupPinDirection+0x66>
     346:	85 c0       	rjmp	.+266    	; 0x452 <GPIO_setupPinDirection+0x170>
     348:	af c0       	rjmp	.+350    	; 0x4a8 <__stack+0x49>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     34a:	8b 81       	ldd	r24, Y+3	; 0x03
     34c:	81 30       	cpi	r24, 0x01	; 1
     34e:	a1 f4       	brne	.+40     	; 0x378 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     350:	aa e3       	ldi	r26, 0x3A	; 58
     352:	b0 e0       	ldi	r27, 0x00	; 0
     354:	ea e3       	ldi	r30, 0x3A	; 58
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	80 81       	ld	r24, Z
     35a:	48 2f       	mov	r20, r24
     35c:	8a 81       	ldd	r24, Y+2	; 0x02
     35e:	28 2f       	mov	r18, r24
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	02 2e       	mov	r0, r18
     368:	02 c0       	rjmp	.+4      	; 0x36e <GPIO_setupPinDirection+0x8c>
     36a:	88 0f       	add	r24, r24
     36c:	99 1f       	adc	r25, r25
     36e:	0a 94       	dec	r0
     370:	e2 f7       	brpl	.-8      	; 0x36a <GPIO_setupPinDirection+0x88>
     372:	84 2b       	or	r24, r20
     374:	8c 93       	st	X, r24
     376:	98 c0       	rjmp	.+304    	; 0x4a8 <__stack+0x49>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     378:	aa e3       	ldi	r26, 0x3A	; 58
     37a:	b0 e0       	ldi	r27, 0x00	; 0
     37c:	ea e3       	ldi	r30, 0x3A	; 58
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	80 81       	ld	r24, Z
     382:	48 2f       	mov	r20, r24
     384:	8a 81       	ldd	r24, Y+2	; 0x02
     386:	28 2f       	mov	r18, r24
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	02 2e       	mov	r0, r18
     390:	02 c0       	rjmp	.+4      	; 0x396 <GPIO_setupPinDirection+0xb4>
     392:	88 0f       	add	r24, r24
     394:	99 1f       	adc	r25, r25
     396:	0a 94       	dec	r0
     398:	e2 f7       	brpl	.-8      	; 0x392 <GPIO_setupPinDirection+0xb0>
     39a:	80 95       	com	r24
     39c:	84 23       	and	r24, r20
     39e:	8c 93       	st	X, r24
     3a0:	83 c0       	rjmp	.+262    	; 0x4a8 <__stack+0x49>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     3a2:	8b 81       	ldd	r24, Y+3	; 0x03
     3a4:	81 30       	cpi	r24, 0x01	; 1
     3a6:	a1 f4       	brne	.+40     	; 0x3d0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     3a8:	a7 e3       	ldi	r26, 0x37	; 55
     3aa:	b0 e0       	ldi	r27, 0x00	; 0
     3ac:	e7 e3       	ldi	r30, 0x37	; 55
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	80 81       	ld	r24, Z
     3b2:	48 2f       	mov	r20, r24
     3b4:	8a 81       	ldd	r24, Y+2	; 0x02
     3b6:	28 2f       	mov	r18, r24
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	02 2e       	mov	r0, r18
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <GPIO_setupPinDirection+0xe4>
     3c2:	88 0f       	add	r24, r24
     3c4:	99 1f       	adc	r25, r25
     3c6:	0a 94       	dec	r0
     3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <GPIO_setupPinDirection+0xe0>
     3ca:	84 2b       	or	r24, r20
     3cc:	8c 93       	st	X, r24
     3ce:	6c c0       	rjmp	.+216    	; 0x4a8 <__stack+0x49>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     3d0:	a7 e3       	ldi	r26, 0x37	; 55
     3d2:	b0 e0       	ldi	r27, 0x00	; 0
     3d4:	e7 e3       	ldi	r30, 0x37	; 55
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	48 2f       	mov	r20, r24
     3dc:	8a 81       	ldd	r24, Y+2	; 0x02
     3de:	28 2f       	mov	r18, r24
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	02 2e       	mov	r0, r18
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <GPIO_setupPinDirection+0x10c>
     3ea:	88 0f       	add	r24, r24
     3ec:	99 1f       	adc	r25, r25
     3ee:	0a 94       	dec	r0
     3f0:	e2 f7       	brpl	.-8      	; 0x3ea <GPIO_setupPinDirection+0x108>
     3f2:	80 95       	com	r24
     3f4:	84 23       	and	r24, r20
     3f6:	8c 93       	st	X, r24
     3f8:	57 c0       	rjmp	.+174    	; 0x4a8 <__stack+0x49>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     3fa:	8b 81       	ldd	r24, Y+3	; 0x03
     3fc:	81 30       	cpi	r24, 0x01	; 1
     3fe:	a1 f4       	brne	.+40     	; 0x428 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     400:	a4 e3       	ldi	r26, 0x34	; 52
     402:	b0 e0       	ldi	r27, 0x00	; 0
     404:	e4 e3       	ldi	r30, 0x34	; 52
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	80 81       	ld	r24, Z
     40a:	48 2f       	mov	r20, r24
     40c:	8a 81       	ldd	r24, Y+2	; 0x02
     40e:	28 2f       	mov	r18, r24
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	02 2e       	mov	r0, r18
     418:	02 c0       	rjmp	.+4      	; 0x41e <GPIO_setupPinDirection+0x13c>
     41a:	88 0f       	add	r24, r24
     41c:	99 1f       	adc	r25, r25
     41e:	0a 94       	dec	r0
     420:	e2 f7       	brpl	.-8      	; 0x41a <GPIO_setupPinDirection+0x138>
     422:	84 2b       	or	r24, r20
     424:	8c 93       	st	X, r24
     426:	40 c0       	rjmp	.+128    	; 0x4a8 <__stack+0x49>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     428:	a4 e3       	ldi	r26, 0x34	; 52
     42a:	b0 e0       	ldi	r27, 0x00	; 0
     42c:	e4 e3       	ldi	r30, 0x34	; 52
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	80 81       	ld	r24, Z
     432:	48 2f       	mov	r20, r24
     434:	8a 81       	ldd	r24, Y+2	; 0x02
     436:	28 2f       	mov	r18, r24
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	02 2e       	mov	r0, r18
     440:	02 c0       	rjmp	.+4      	; 0x446 <GPIO_setupPinDirection+0x164>
     442:	88 0f       	add	r24, r24
     444:	99 1f       	adc	r25, r25
     446:	0a 94       	dec	r0
     448:	e2 f7       	brpl	.-8      	; 0x442 <GPIO_setupPinDirection+0x160>
     44a:	80 95       	com	r24
     44c:	84 23       	and	r24, r20
     44e:	8c 93       	st	X, r24
     450:	2b c0       	rjmp	.+86     	; 0x4a8 <__stack+0x49>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     452:	8b 81       	ldd	r24, Y+3	; 0x03
     454:	81 30       	cpi	r24, 0x01	; 1
     456:	a1 f4       	brne	.+40     	; 0x480 <__stack+0x21>
			{
				SET_BIT(DDRD,pin_num);
     458:	a1 e3       	ldi	r26, 0x31	; 49
     45a:	b0 e0       	ldi	r27, 0x00	; 0
     45c:	e1 e3       	ldi	r30, 0x31	; 49
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 81       	ld	r24, Z
     462:	48 2f       	mov	r20, r24
     464:	8a 81       	ldd	r24, Y+2	; 0x02
     466:	28 2f       	mov	r18, r24
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	02 2e       	mov	r0, r18
     470:	02 c0       	rjmp	.+4      	; 0x476 <__stack+0x17>
     472:	88 0f       	add	r24, r24
     474:	99 1f       	adc	r25, r25
     476:	0a 94       	dec	r0
     478:	e2 f7       	brpl	.-8      	; 0x472 <__stack+0x13>
     47a:	84 2b       	or	r24, r20
     47c:	8c 93       	st	X, r24
     47e:	14 c0       	rjmp	.+40     	; 0x4a8 <__stack+0x49>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     480:	a1 e3       	ldi	r26, 0x31	; 49
     482:	b0 e0       	ldi	r27, 0x00	; 0
     484:	e1 e3       	ldi	r30, 0x31	; 49
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	80 81       	ld	r24, Z
     48a:	48 2f       	mov	r20, r24
     48c:	8a 81       	ldd	r24, Y+2	; 0x02
     48e:	28 2f       	mov	r18, r24
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	02 2e       	mov	r0, r18
     498:	02 c0       	rjmp	.+4      	; 0x49e <__stack+0x3f>
     49a:	88 0f       	add	r24, r24
     49c:	99 1f       	adc	r25, r25
     49e:	0a 94       	dec	r0
     4a0:	e2 f7       	brpl	.-8      	; 0x49a <__stack+0x3b>
     4a2:	80 95       	com	r24
     4a4:	84 23       	and	r24, r20
     4a6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	cf 91       	pop	r28
     4b4:	df 91       	pop	r29
     4b6:	08 95       	ret

000004b8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     4b8:	df 93       	push	r29
     4ba:	cf 93       	push	r28
     4bc:	00 d0       	rcall	.+0      	; 0x4be <GPIO_writePin+0x6>
     4be:	00 d0       	rcall	.+0      	; 0x4c0 <GPIO_writePin+0x8>
     4c0:	0f 92       	push	r0
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
     4c6:	89 83       	std	Y+1, r24	; 0x01
     4c8:	6a 83       	std	Y+2, r22	; 0x02
     4ca:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     4cc:	8a 81       	ldd	r24, Y+2	; 0x02
     4ce:	88 30       	cpi	r24, 0x08	; 8
     4d0:	08 f0       	brcs	.+2      	; 0x4d4 <GPIO_writePin+0x1c>
     4d2:	d5 c0       	rjmp	.+426    	; 0x67e <GPIO_writePin+0x1c6>
     4d4:	89 81       	ldd	r24, Y+1	; 0x01
     4d6:	84 30       	cpi	r24, 0x04	; 4
     4d8:	08 f0       	brcs	.+2      	; 0x4dc <GPIO_writePin+0x24>
     4da:	d1 c0       	rjmp	.+418    	; 0x67e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
     4de:	28 2f       	mov	r18, r24
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	3d 83       	std	Y+5, r19	; 0x05
     4e4:	2c 83       	std	Y+4, r18	; 0x04
     4e6:	8c 81       	ldd	r24, Y+4	; 0x04
     4e8:	9d 81       	ldd	r25, Y+5	; 0x05
     4ea:	81 30       	cpi	r24, 0x01	; 1
     4ec:	91 05       	cpc	r25, r1
     4ee:	09 f4       	brne	.+2      	; 0x4f2 <GPIO_writePin+0x3a>
     4f0:	43 c0       	rjmp	.+134    	; 0x578 <GPIO_writePin+0xc0>
     4f2:	2c 81       	ldd	r18, Y+4	; 0x04
     4f4:	3d 81       	ldd	r19, Y+5	; 0x05
     4f6:	22 30       	cpi	r18, 0x02	; 2
     4f8:	31 05       	cpc	r19, r1
     4fa:	2c f4       	brge	.+10     	; 0x506 <GPIO_writePin+0x4e>
     4fc:	8c 81       	ldd	r24, Y+4	; 0x04
     4fe:	9d 81       	ldd	r25, Y+5	; 0x05
     500:	00 97       	sbiw	r24, 0x00	; 0
     502:	71 f0       	breq	.+28     	; 0x520 <GPIO_writePin+0x68>
     504:	bc c0       	rjmp	.+376    	; 0x67e <GPIO_writePin+0x1c6>
     506:	2c 81       	ldd	r18, Y+4	; 0x04
     508:	3d 81       	ldd	r19, Y+5	; 0x05
     50a:	22 30       	cpi	r18, 0x02	; 2
     50c:	31 05       	cpc	r19, r1
     50e:	09 f4       	brne	.+2      	; 0x512 <GPIO_writePin+0x5a>
     510:	5f c0       	rjmp	.+190    	; 0x5d0 <GPIO_writePin+0x118>
     512:	8c 81       	ldd	r24, Y+4	; 0x04
     514:	9d 81       	ldd	r25, Y+5	; 0x05
     516:	83 30       	cpi	r24, 0x03	; 3
     518:	91 05       	cpc	r25, r1
     51a:	09 f4       	brne	.+2      	; 0x51e <GPIO_writePin+0x66>
     51c:	85 c0       	rjmp	.+266    	; 0x628 <GPIO_writePin+0x170>
     51e:	af c0       	rjmp	.+350    	; 0x67e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     520:	8b 81       	ldd	r24, Y+3	; 0x03
     522:	81 30       	cpi	r24, 0x01	; 1
     524:	a1 f4       	brne	.+40     	; 0x54e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     526:	ab e3       	ldi	r26, 0x3B	; 59
     528:	b0 e0       	ldi	r27, 0x00	; 0
     52a:	eb e3       	ldi	r30, 0x3B	; 59
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	80 81       	ld	r24, Z
     530:	48 2f       	mov	r20, r24
     532:	8a 81       	ldd	r24, Y+2	; 0x02
     534:	28 2f       	mov	r18, r24
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	02 2e       	mov	r0, r18
     53e:	02 c0       	rjmp	.+4      	; 0x544 <GPIO_writePin+0x8c>
     540:	88 0f       	add	r24, r24
     542:	99 1f       	adc	r25, r25
     544:	0a 94       	dec	r0
     546:	e2 f7       	brpl	.-8      	; 0x540 <GPIO_writePin+0x88>
     548:	84 2b       	or	r24, r20
     54a:	8c 93       	st	X, r24
     54c:	98 c0       	rjmp	.+304    	; 0x67e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     54e:	ab e3       	ldi	r26, 0x3B	; 59
     550:	b0 e0       	ldi	r27, 0x00	; 0
     552:	eb e3       	ldi	r30, 0x3B	; 59
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	80 81       	ld	r24, Z
     558:	48 2f       	mov	r20, r24
     55a:	8a 81       	ldd	r24, Y+2	; 0x02
     55c:	28 2f       	mov	r18, r24
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	02 2e       	mov	r0, r18
     566:	02 c0       	rjmp	.+4      	; 0x56c <GPIO_writePin+0xb4>
     568:	88 0f       	add	r24, r24
     56a:	99 1f       	adc	r25, r25
     56c:	0a 94       	dec	r0
     56e:	e2 f7       	brpl	.-8      	; 0x568 <GPIO_writePin+0xb0>
     570:	80 95       	com	r24
     572:	84 23       	and	r24, r20
     574:	8c 93       	st	X, r24
     576:	83 c0       	rjmp	.+262    	; 0x67e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     578:	8b 81       	ldd	r24, Y+3	; 0x03
     57a:	81 30       	cpi	r24, 0x01	; 1
     57c:	a1 f4       	brne	.+40     	; 0x5a6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     57e:	a8 e3       	ldi	r26, 0x38	; 56
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	e8 e3       	ldi	r30, 0x38	; 56
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	80 81       	ld	r24, Z
     588:	48 2f       	mov	r20, r24
     58a:	8a 81       	ldd	r24, Y+2	; 0x02
     58c:	28 2f       	mov	r18, r24
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	02 2e       	mov	r0, r18
     596:	02 c0       	rjmp	.+4      	; 0x59c <GPIO_writePin+0xe4>
     598:	88 0f       	add	r24, r24
     59a:	99 1f       	adc	r25, r25
     59c:	0a 94       	dec	r0
     59e:	e2 f7       	brpl	.-8      	; 0x598 <GPIO_writePin+0xe0>
     5a0:	84 2b       	or	r24, r20
     5a2:	8c 93       	st	X, r24
     5a4:	6c c0       	rjmp	.+216    	; 0x67e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     5a6:	a8 e3       	ldi	r26, 0x38	; 56
     5a8:	b0 e0       	ldi	r27, 0x00	; 0
     5aa:	e8 e3       	ldi	r30, 0x38	; 56
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	80 81       	ld	r24, Z
     5b0:	48 2f       	mov	r20, r24
     5b2:	8a 81       	ldd	r24, Y+2	; 0x02
     5b4:	28 2f       	mov	r18, r24
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	02 2e       	mov	r0, r18
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <GPIO_writePin+0x10c>
     5c0:	88 0f       	add	r24, r24
     5c2:	99 1f       	adc	r25, r25
     5c4:	0a 94       	dec	r0
     5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <GPIO_writePin+0x108>
     5c8:	80 95       	com	r24
     5ca:	84 23       	and	r24, r20
     5cc:	8c 93       	st	X, r24
     5ce:	57 c0       	rjmp	.+174    	; 0x67e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     5d0:	8b 81       	ldd	r24, Y+3	; 0x03
     5d2:	81 30       	cpi	r24, 0x01	; 1
     5d4:	a1 f4       	brne	.+40     	; 0x5fe <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     5d6:	a5 e3       	ldi	r26, 0x35	; 53
     5d8:	b0 e0       	ldi	r27, 0x00	; 0
     5da:	e5 e3       	ldi	r30, 0x35	; 53
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	80 81       	ld	r24, Z
     5e0:	48 2f       	mov	r20, r24
     5e2:	8a 81       	ldd	r24, Y+2	; 0x02
     5e4:	28 2f       	mov	r18, r24
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	02 2e       	mov	r0, r18
     5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <GPIO_writePin+0x13c>
     5f0:	88 0f       	add	r24, r24
     5f2:	99 1f       	adc	r25, r25
     5f4:	0a 94       	dec	r0
     5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <GPIO_writePin+0x138>
     5f8:	84 2b       	or	r24, r20
     5fa:	8c 93       	st	X, r24
     5fc:	40 c0       	rjmp	.+128    	; 0x67e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     5fe:	a5 e3       	ldi	r26, 0x35	; 53
     600:	b0 e0       	ldi	r27, 0x00	; 0
     602:	e5 e3       	ldi	r30, 0x35	; 53
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	48 2f       	mov	r20, r24
     60a:	8a 81       	ldd	r24, Y+2	; 0x02
     60c:	28 2f       	mov	r18, r24
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	02 2e       	mov	r0, r18
     616:	02 c0       	rjmp	.+4      	; 0x61c <GPIO_writePin+0x164>
     618:	88 0f       	add	r24, r24
     61a:	99 1f       	adc	r25, r25
     61c:	0a 94       	dec	r0
     61e:	e2 f7       	brpl	.-8      	; 0x618 <GPIO_writePin+0x160>
     620:	80 95       	com	r24
     622:	84 23       	and	r24, r20
     624:	8c 93       	st	X, r24
     626:	2b c0       	rjmp	.+86     	; 0x67e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     628:	8b 81       	ldd	r24, Y+3	; 0x03
     62a:	81 30       	cpi	r24, 0x01	; 1
     62c:	a1 f4       	brne	.+40     	; 0x656 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     62e:	a2 e3       	ldi	r26, 0x32	; 50
     630:	b0 e0       	ldi	r27, 0x00	; 0
     632:	e2 e3       	ldi	r30, 0x32	; 50
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	80 81       	ld	r24, Z
     638:	48 2f       	mov	r20, r24
     63a:	8a 81       	ldd	r24, Y+2	; 0x02
     63c:	28 2f       	mov	r18, r24
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	02 2e       	mov	r0, r18
     646:	02 c0       	rjmp	.+4      	; 0x64c <GPIO_writePin+0x194>
     648:	88 0f       	add	r24, r24
     64a:	99 1f       	adc	r25, r25
     64c:	0a 94       	dec	r0
     64e:	e2 f7       	brpl	.-8      	; 0x648 <GPIO_writePin+0x190>
     650:	84 2b       	or	r24, r20
     652:	8c 93       	st	X, r24
     654:	14 c0       	rjmp	.+40     	; 0x67e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     656:	a2 e3       	ldi	r26, 0x32	; 50
     658:	b0 e0       	ldi	r27, 0x00	; 0
     65a:	e2 e3       	ldi	r30, 0x32	; 50
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	80 81       	ld	r24, Z
     660:	48 2f       	mov	r20, r24
     662:	8a 81       	ldd	r24, Y+2	; 0x02
     664:	28 2f       	mov	r18, r24
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	02 2e       	mov	r0, r18
     66e:	02 c0       	rjmp	.+4      	; 0x674 <GPIO_writePin+0x1bc>
     670:	88 0f       	add	r24, r24
     672:	99 1f       	adc	r25, r25
     674:	0a 94       	dec	r0
     676:	e2 f7       	brpl	.-8      	; 0x670 <GPIO_writePin+0x1b8>
     678:	80 95       	com	r24
     67a:	84 23       	and	r24, r20
     67c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	cf 91       	pop	r28
     68a:	df 91       	pop	r29
     68c:	08 95       	ret

0000068e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     68e:	df 93       	push	r29
     690:	cf 93       	push	r28
     692:	00 d0       	rcall	.+0      	; 0x694 <GPIO_readPin+0x6>
     694:	00 d0       	rcall	.+0      	; 0x696 <GPIO_readPin+0x8>
     696:	0f 92       	push	r0
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	8a 83       	std	Y+2, r24	; 0x02
     69e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     6a0:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     6a2:	8b 81       	ldd	r24, Y+3	; 0x03
     6a4:	88 30       	cpi	r24, 0x08	; 8
     6a6:	08 f0       	brcs	.+2      	; 0x6aa <GPIO_readPin+0x1c>
     6a8:	84 c0       	rjmp	.+264    	; 0x7b2 <GPIO_readPin+0x124>
     6aa:	8a 81       	ldd	r24, Y+2	; 0x02
     6ac:	84 30       	cpi	r24, 0x04	; 4
     6ae:	08 f0       	brcs	.+2      	; 0x6b2 <GPIO_readPin+0x24>
     6b0:	80 c0       	rjmp	.+256    	; 0x7b2 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     6b2:	8a 81       	ldd	r24, Y+2	; 0x02
     6b4:	28 2f       	mov	r18, r24
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	3d 83       	std	Y+5, r19	; 0x05
     6ba:	2c 83       	std	Y+4, r18	; 0x04
     6bc:	4c 81       	ldd	r20, Y+4	; 0x04
     6be:	5d 81       	ldd	r21, Y+5	; 0x05
     6c0:	41 30       	cpi	r20, 0x01	; 1
     6c2:	51 05       	cpc	r21, r1
     6c4:	79 f1       	breq	.+94     	; 0x724 <GPIO_readPin+0x96>
     6c6:	8c 81       	ldd	r24, Y+4	; 0x04
     6c8:	9d 81       	ldd	r25, Y+5	; 0x05
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	91 05       	cpc	r25, r1
     6ce:	34 f4       	brge	.+12     	; 0x6dc <GPIO_readPin+0x4e>
     6d0:	2c 81       	ldd	r18, Y+4	; 0x04
     6d2:	3d 81       	ldd	r19, Y+5	; 0x05
     6d4:	21 15       	cp	r18, r1
     6d6:	31 05       	cpc	r19, r1
     6d8:	69 f0       	breq	.+26     	; 0x6f4 <GPIO_readPin+0x66>
     6da:	6b c0       	rjmp	.+214    	; 0x7b2 <GPIO_readPin+0x124>
     6dc:	4c 81       	ldd	r20, Y+4	; 0x04
     6de:	5d 81       	ldd	r21, Y+5	; 0x05
     6e0:	42 30       	cpi	r20, 0x02	; 2
     6e2:	51 05       	cpc	r21, r1
     6e4:	b9 f1       	breq	.+110    	; 0x754 <GPIO_readPin+0xc6>
     6e6:	8c 81       	ldd	r24, Y+4	; 0x04
     6e8:	9d 81       	ldd	r25, Y+5	; 0x05
     6ea:	83 30       	cpi	r24, 0x03	; 3
     6ec:	91 05       	cpc	r25, r1
     6ee:	09 f4       	brne	.+2      	; 0x6f2 <GPIO_readPin+0x64>
     6f0:	49 c0       	rjmp	.+146    	; 0x784 <GPIO_readPin+0xf6>
     6f2:	5f c0       	rjmp	.+190    	; 0x7b2 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     6f4:	e9 e3       	ldi	r30, 0x39	; 57
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	80 81       	ld	r24, Z
     6fa:	28 2f       	mov	r18, r24
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	8b 81       	ldd	r24, Y+3	; 0x03
     700:	88 2f       	mov	r24, r24
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a9 01       	movw	r20, r18
     706:	02 c0       	rjmp	.+4      	; 0x70c <GPIO_readPin+0x7e>
     708:	55 95       	asr	r21
     70a:	47 95       	ror	r20
     70c:	8a 95       	dec	r24
     70e:	e2 f7       	brpl	.-8      	; 0x708 <GPIO_readPin+0x7a>
     710:	ca 01       	movw	r24, r20
     712:	81 70       	andi	r24, 0x01	; 1
     714:	90 70       	andi	r25, 0x00	; 0
     716:	88 23       	and	r24, r24
     718:	19 f0       	breq	.+6      	; 0x720 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	89 83       	std	Y+1, r24	; 0x01
     71e:	49 c0       	rjmp	.+146    	; 0x7b2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     720:	19 82       	std	Y+1, r1	; 0x01
     722:	47 c0       	rjmp	.+142    	; 0x7b2 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     724:	e6 e3       	ldi	r30, 0x36	; 54
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	80 81       	ld	r24, Z
     72a:	28 2f       	mov	r18, r24
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	8b 81       	ldd	r24, Y+3	; 0x03
     730:	88 2f       	mov	r24, r24
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	a9 01       	movw	r20, r18
     736:	02 c0       	rjmp	.+4      	; 0x73c <GPIO_readPin+0xae>
     738:	55 95       	asr	r21
     73a:	47 95       	ror	r20
     73c:	8a 95       	dec	r24
     73e:	e2 f7       	brpl	.-8      	; 0x738 <GPIO_readPin+0xaa>
     740:	ca 01       	movw	r24, r20
     742:	81 70       	andi	r24, 0x01	; 1
     744:	90 70       	andi	r25, 0x00	; 0
     746:	88 23       	and	r24, r24
     748:	19 f0       	breq	.+6      	; 0x750 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	89 83       	std	Y+1, r24	; 0x01
     74e:	31 c0       	rjmp	.+98     	; 0x7b2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     750:	19 82       	std	Y+1, r1	; 0x01
     752:	2f c0       	rjmp	.+94     	; 0x7b2 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     754:	e3 e3       	ldi	r30, 0x33	; 51
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	80 81       	ld	r24, Z
     75a:	28 2f       	mov	r18, r24
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	8b 81       	ldd	r24, Y+3	; 0x03
     760:	88 2f       	mov	r24, r24
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	a9 01       	movw	r20, r18
     766:	02 c0       	rjmp	.+4      	; 0x76c <GPIO_readPin+0xde>
     768:	55 95       	asr	r21
     76a:	47 95       	ror	r20
     76c:	8a 95       	dec	r24
     76e:	e2 f7       	brpl	.-8      	; 0x768 <GPIO_readPin+0xda>
     770:	ca 01       	movw	r24, r20
     772:	81 70       	andi	r24, 0x01	; 1
     774:	90 70       	andi	r25, 0x00	; 0
     776:	88 23       	and	r24, r24
     778:	19 f0       	breq	.+6      	; 0x780 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	89 83       	std	Y+1, r24	; 0x01
     77e:	19 c0       	rjmp	.+50     	; 0x7b2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     780:	19 82       	std	Y+1, r1	; 0x01
     782:	17 c0       	rjmp	.+46     	; 0x7b2 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     784:	e0 e3       	ldi	r30, 0x30	; 48
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	80 81       	ld	r24, Z
     78a:	28 2f       	mov	r18, r24
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	8b 81       	ldd	r24, Y+3	; 0x03
     790:	88 2f       	mov	r24, r24
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	a9 01       	movw	r20, r18
     796:	02 c0       	rjmp	.+4      	; 0x79c <GPIO_readPin+0x10e>
     798:	55 95       	asr	r21
     79a:	47 95       	ror	r20
     79c:	8a 95       	dec	r24
     79e:	e2 f7       	brpl	.-8      	; 0x798 <GPIO_readPin+0x10a>
     7a0:	ca 01       	movw	r24, r20
     7a2:	81 70       	andi	r24, 0x01	; 1
     7a4:	90 70       	andi	r25, 0x00	; 0
     7a6:	88 23       	and	r24, r24
     7a8:	19 f0       	breq	.+6      	; 0x7b0 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	89 83       	std	Y+1, r24	; 0x01
     7ae:	01 c0       	rjmp	.+2      	; 0x7b2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     7b0:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
     7b2:	89 81       	ldd	r24, Y+1	; 0x01
}
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	cf 91       	pop	r28
     7c0:	df 91       	pop	r29
     7c2:	08 95       	ret

000007c4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
     7c4:	df 93       	push	r29
     7c6:	cf 93       	push	r28
     7c8:	00 d0       	rcall	.+0      	; 0x7ca <GPIO_setupPortDirection+0x6>
     7ca:	00 d0       	rcall	.+0      	; 0x7cc <GPIO_setupPortDirection+0x8>
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
     7d0:	89 83       	std	Y+1, r24	; 0x01
     7d2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
     7d6:	84 30       	cpi	r24, 0x04	; 4
     7d8:	90 f5       	brcc	.+100    	; 0x83e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     7da:	89 81       	ldd	r24, Y+1	; 0x01
     7dc:	28 2f       	mov	r18, r24
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	3c 83       	std	Y+4, r19	; 0x04
     7e2:	2b 83       	std	Y+3, r18	; 0x03
     7e4:	8b 81       	ldd	r24, Y+3	; 0x03
     7e6:	9c 81       	ldd	r25, Y+4	; 0x04
     7e8:	81 30       	cpi	r24, 0x01	; 1
     7ea:	91 05       	cpc	r25, r1
     7ec:	d1 f0       	breq	.+52     	; 0x822 <GPIO_setupPortDirection+0x5e>
     7ee:	2b 81       	ldd	r18, Y+3	; 0x03
     7f0:	3c 81       	ldd	r19, Y+4	; 0x04
     7f2:	22 30       	cpi	r18, 0x02	; 2
     7f4:	31 05       	cpc	r19, r1
     7f6:	2c f4       	brge	.+10     	; 0x802 <GPIO_setupPortDirection+0x3e>
     7f8:	8b 81       	ldd	r24, Y+3	; 0x03
     7fa:	9c 81       	ldd	r25, Y+4	; 0x04
     7fc:	00 97       	sbiw	r24, 0x00	; 0
     7fe:	61 f0       	breq	.+24     	; 0x818 <GPIO_setupPortDirection+0x54>
     800:	1e c0       	rjmp	.+60     	; 0x83e <GPIO_setupPortDirection+0x7a>
     802:	2b 81       	ldd	r18, Y+3	; 0x03
     804:	3c 81       	ldd	r19, Y+4	; 0x04
     806:	22 30       	cpi	r18, 0x02	; 2
     808:	31 05       	cpc	r19, r1
     80a:	81 f0       	breq	.+32     	; 0x82c <GPIO_setupPortDirection+0x68>
     80c:	8b 81       	ldd	r24, Y+3	; 0x03
     80e:	9c 81       	ldd	r25, Y+4	; 0x04
     810:	83 30       	cpi	r24, 0x03	; 3
     812:	91 05       	cpc	r25, r1
     814:	81 f0       	breq	.+32     	; 0x836 <GPIO_setupPortDirection+0x72>
     816:	13 c0       	rjmp	.+38     	; 0x83e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
     818:	ea e3       	ldi	r30, 0x3A	; 58
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	8a 81       	ldd	r24, Y+2	; 0x02
     81e:	80 83       	st	Z, r24
     820:	0e c0       	rjmp	.+28     	; 0x83e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
     822:	e7 e3       	ldi	r30, 0x37	; 55
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	8a 81       	ldd	r24, Y+2	; 0x02
     828:	80 83       	st	Z, r24
     82a:	09 c0       	rjmp	.+18     	; 0x83e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
     82c:	e4 e3       	ldi	r30, 0x34	; 52
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	8a 81       	ldd	r24, Y+2	; 0x02
     832:	80 83       	st	Z, r24
     834:	04 c0       	rjmp	.+8      	; 0x83e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
     836:	e1 e3       	ldi	r30, 0x31	; 49
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	8a 81       	ldd	r24, Y+2	; 0x02
     83c:	80 83       	st	Z, r24
			break;
		}
	}
}
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	cf 91       	pop	r28
     848:	df 91       	pop	r29
     84a:	08 95       	ret

0000084c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
     84c:	df 93       	push	r29
     84e:	cf 93       	push	r28
     850:	00 d0       	rcall	.+0      	; 0x852 <GPIO_writePort+0x6>
     852:	00 d0       	rcall	.+0      	; 0x854 <GPIO_writePort+0x8>
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
     858:	89 83       	std	Y+1, r24	; 0x01
     85a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     85c:	89 81       	ldd	r24, Y+1	; 0x01
     85e:	84 30       	cpi	r24, 0x04	; 4
     860:	90 f5       	brcc	.+100    	; 0x8c6 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
     862:	89 81       	ldd	r24, Y+1	; 0x01
     864:	28 2f       	mov	r18, r24
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	3c 83       	std	Y+4, r19	; 0x04
     86a:	2b 83       	std	Y+3, r18	; 0x03
     86c:	8b 81       	ldd	r24, Y+3	; 0x03
     86e:	9c 81       	ldd	r25, Y+4	; 0x04
     870:	81 30       	cpi	r24, 0x01	; 1
     872:	91 05       	cpc	r25, r1
     874:	d1 f0       	breq	.+52     	; 0x8aa <GPIO_writePort+0x5e>
     876:	2b 81       	ldd	r18, Y+3	; 0x03
     878:	3c 81       	ldd	r19, Y+4	; 0x04
     87a:	22 30       	cpi	r18, 0x02	; 2
     87c:	31 05       	cpc	r19, r1
     87e:	2c f4       	brge	.+10     	; 0x88a <GPIO_writePort+0x3e>
     880:	8b 81       	ldd	r24, Y+3	; 0x03
     882:	9c 81       	ldd	r25, Y+4	; 0x04
     884:	00 97       	sbiw	r24, 0x00	; 0
     886:	61 f0       	breq	.+24     	; 0x8a0 <GPIO_writePort+0x54>
     888:	1e c0       	rjmp	.+60     	; 0x8c6 <GPIO_writePort+0x7a>
     88a:	2b 81       	ldd	r18, Y+3	; 0x03
     88c:	3c 81       	ldd	r19, Y+4	; 0x04
     88e:	22 30       	cpi	r18, 0x02	; 2
     890:	31 05       	cpc	r19, r1
     892:	81 f0       	breq	.+32     	; 0x8b4 <GPIO_writePort+0x68>
     894:	8b 81       	ldd	r24, Y+3	; 0x03
     896:	9c 81       	ldd	r25, Y+4	; 0x04
     898:	83 30       	cpi	r24, 0x03	; 3
     89a:	91 05       	cpc	r25, r1
     89c:	81 f0       	breq	.+32     	; 0x8be <GPIO_writePort+0x72>
     89e:	13 c0       	rjmp	.+38     	; 0x8c6 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
     8a0:	eb e3       	ldi	r30, 0x3B	; 59
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
     8a4:	8a 81       	ldd	r24, Y+2	; 0x02
     8a6:	80 83       	st	Z, r24
     8a8:	0e c0       	rjmp	.+28     	; 0x8c6 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
     8aa:	e8 e3       	ldi	r30, 0x38	; 56
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	8a 81       	ldd	r24, Y+2	; 0x02
     8b0:	80 83       	st	Z, r24
     8b2:	09 c0       	rjmp	.+18     	; 0x8c6 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
     8b4:	e5 e3       	ldi	r30, 0x35	; 53
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	8a 81       	ldd	r24, Y+2	; 0x02
     8ba:	80 83       	st	Z, r24
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
     8be:	e2 e3       	ldi	r30, 0x32	; 50
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	8a 81       	ldd	r24, Y+2	; 0x02
     8c4:	80 83       	st	Z, r24
			break;
		}
	}
}
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	cf 91       	pop	r28
     8d0:	df 91       	pop	r29
     8d2:	08 95       	ret

000008d4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
     8d4:	df 93       	push	r29
     8d6:	cf 93       	push	r28
     8d8:	00 d0       	rcall	.+0      	; 0x8da <GPIO_readPort+0x6>
     8da:	00 d0       	rcall	.+0      	; 0x8dc <GPIO_readPort+0x8>
     8dc:	cd b7       	in	r28, 0x3d	; 61
     8de:	de b7       	in	r29, 0x3e	; 62
     8e0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
     8e2:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     8e4:	8a 81       	ldd	r24, Y+2	; 0x02
     8e6:	84 30       	cpi	r24, 0x04	; 4
     8e8:	90 f5       	brcc	.+100    	; 0x94e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
     8ea:	8a 81       	ldd	r24, Y+2	; 0x02
     8ec:	28 2f       	mov	r18, r24
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	3c 83       	std	Y+4, r19	; 0x04
     8f2:	2b 83       	std	Y+3, r18	; 0x03
     8f4:	8b 81       	ldd	r24, Y+3	; 0x03
     8f6:	9c 81       	ldd	r25, Y+4	; 0x04
     8f8:	81 30       	cpi	r24, 0x01	; 1
     8fa:	91 05       	cpc	r25, r1
     8fc:	d1 f0       	breq	.+52     	; 0x932 <GPIO_readPort+0x5e>
     8fe:	2b 81       	ldd	r18, Y+3	; 0x03
     900:	3c 81       	ldd	r19, Y+4	; 0x04
     902:	22 30       	cpi	r18, 0x02	; 2
     904:	31 05       	cpc	r19, r1
     906:	2c f4       	brge	.+10     	; 0x912 <GPIO_readPort+0x3e>
     908:	8b 81       	ldd	r24, Y+3	; 0x03
     90a:	9c 81       	ldd	r25, Y+4	; 0x04
     90c:	00 97       	sbiw	r24, 0x00	; 0
     90e:	61 f0       	breq	.+24     	; 0x928 <GPIO_readPort+0x54>
     910:	1e c0       	rjmp	.+60     	; 0x94e <GPIO_readPort+0x7a>
     912:	2b 81       	ldd	r18, Y+3	; 0x03
     914:	3c 81       	ldd	r19, Y+4	; 0x04
     916:	22 30       	cpi	r18, 0x02	; 2
     918:	31 05       	cpc	r19, r1
     91a:	81 f0       	breq	.+32     	; 0x93c <GPIO_readPort+0x68>
     91c:	8b 81       	ldd	r24, Y+3	; 0x03
     91e:	9c 81       	ldd	r25, Y+4	; 0x04
     920:	83 30       	cpi	r24, 0x03	; 3
     922:	91 05       	cpc	r25, r1
     924:	81 f0       	breq	.+32     	; 0x946 <GPIO_readPort+0x72>
     926:	13 c0       	rjmp	.+38     	; 0x94e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
     928:	e9 e3       	ldi	r30, 0x39	; 57
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	80 81       	ld	r24, Z
     92e:	89 83       	std	Y+1, r24	; 0x01
     930:	0e c0       	rjmp	.+28     	; 0x94e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
     932:	e6 e3       	ldi	r30, 0x36	; 54
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	80 81       	ld	r24, Z
     938:	89 83       	std	Y+1, r24	; 0x01
     93a:	09 c0       	rjmp	.+18     	; 0x94e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
     93c:	e3 e3       	ldi	r30, 0x33	; 51
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	80 81       	ld	r24, Z
     942:	89 83       	std	Y+1, r24	; 0x01
     944:	04 c0       	rjmp	.+8      	; 0x94e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
     946:	e0 e3       	ldi	r30, 0x30	; 48
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	80 81       	ld	r24, Z
     94c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
     94e:	89 81       	ldd	r24, Y+1	; 0x01
}
     950:	0f 90       	pop	r0
     952:	0f 90       	pop	r0
     954:	0f 90       	pop	r0
     956:	0f 90       	pop	r0
     958:	cf 91       	pop	r28
     95a:	df 91       	pop	r29
     95c:	08 95       	ret

0000095e <TWI_init>:
 *******************************************************************************/

#include "i2c.h"

void TWI_init(const TWI_ConfigType * ConfigTypePtr)
{
     95e:	df 93       	push	r29
     960:	cf 93       	push	r28
     962:	00 d0       	rcall	.+0      	; 0x964 <TWI_init+0x6>
     964:	0f 92       	push	r0
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
     96a:	9a 83       	std	Y+2, r25	; 0x02
     96c:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = ConfigTypePtr->SCLfactor;
     96e:	a0 e2       	ldi	r26, 0x20	; 32
     970:	b0 e0       	ldi	r27, 0x00	; 0
     972:	e9 81       	ldd	r30, Y+1	; 0x01
     974:	fa 81       	ldd	r31, Y+2	; 0x02
     976:	81 81       	ldd	r24, Z+1	; 0x01
     978:	8c 93       	st	X, r24
	TWSR = (TWSR &= 0xFC) | (ConfigTypePtr->pre_scaler);
     97a:	21 e2       	ldi	r18, 0x21	; 33
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	a1 e2       	ldi	r26, 0x21	; 33
     980:	b0 e0       	ldi	r27, 0x00	; 0
     982:	e1 e2       	ldi	r30, 0x21	; 33
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	80 81       	ld	r24, Z
     988:	8c 7f       	andi	r24, 0xFC	; 252
     98a:	8c 93       	st	X, r24
     98c:	9c 91       	ld	r25, X
     98e:	e9 81       	ldd	r30, Y+1	; 0x01
     990:	fa 81       	ldd	r31, Y+2	; 0x02
     992:	80 81       	ld	r24, Z
     994:	89 2b       	or	r24, r25
     996:	f9 01       	movw	r30, r18
     998:	80 83       	st	Z, r24

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (TWAR &= 0x00 )|(ConfigTypePtr->slaveAddress)<<1; // my address = 0x01 :)
     99a:	a2 e2       	ldi	r26, 0x22	; 34
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e2 e2       	ldi	r30, 0x22	; 34
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	80 81       	ld	r24, Z
     9a4:	e2 e2       	ldi	r30, 0x22	; 34
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	10 82       	st	Z, r1
     9aa:	80 81       	ld	r24, Z
     9ac:	28 2f       	mov	r18, r24
     9ae:	e9 81       	ldd	r30, Y+1	; 0x01
     9b0:	fa 81       	ldd	r31, Y+2	; 0x02
     9b2:	82 81       	ldd	r24, Z+2	; 0x02
     9b4:	88 2f       	mov	r24, r24
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	88 0f       	add	r24, r24
     9ba:	99 1f       	adc	r25, r25
     9bc:	82 2b       	or	r24, r18
     9be:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
     9c0:	e6 e5       	ldi	r30, 0x56	; 86
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	84 e0       	ldi	r24, 0x04	; 4
     9c6:	80 83       	st	Z, r24
}
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	cf 91       	pop	r28
     9d0:	df 91       	pop	r29
     9d2:	08 95       	ret

000009d4 <TWI_start>:

void TWI_start(void)
{
     9d4:	df 93       	push	r29
     9d6:	cf 93       	push	r28
     9d8:	cd b7       	in	r28, 0x3d	; 61
     9da:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     9dc:	e6 e5       	ldi	r30, 0x56	; 86
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	84 ea       	ldi	r24, 0xA4	; 164
     9e2:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     9e4:	e6 e5       	ldi	r30, 0x56	; 86
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	80 81       	ld	r24, Z
     9ea:	88 23       	and	r24, r24
     9ec:	dc f7       	brge	.-10     	; 0x9e4 <TWI_start+0x10>
}
     9ee:	cf 91       	pop	r28
     9f0:	df 91       	pop	r29
     9f2:	08 95       	ret

000009f4 <TWI_stop>:

void TWI_stop(void)
{
     9f4:	df 93       	push	r29
     9f6:	cf 93       	push	r28
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     9fc:	e6 e5       	ldi	r30, 0x56	; 86
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	84 e9       	ldi	r24, 0x94	; 148
     a02:	80 83       	st	Z, r24
}
     a04:	cf 91       	pop	r28
     a06:	df 91       	pop	r29
     a08:	08 95       	ret

00000a0a <TWI_write>:

void TWI_write(uint8 data)
{
     a0a:	df 93       	push	r29
     a0c:	cf 93       	push	r28
     a0e:	0f 92       	push	r0
     a10:	cd b7       	in	r28, 0x3d	; 61
     a12:	de b7       	in	r29, 0x3e	; 62
     a14:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
     a16:	e3 e2       	ldi	r30, 0x23	; 35
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	89 81       	ldd	r24, Y+1	; 0x01
     a1c:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     a1e:	e6 e5       	ldi	r30, 0x56	; 86
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	84 e8       	ldi	r24, 0x84	; 132
     a24:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     a26:	e6 e5       	ldi	r30, 0x56	; 86
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	80 81       	ld	r24, Z
     a2c:	88 23       	and	r24, r24
     a2e:	dc f7       	brge	.-10     	; 0xa26 <TWI_write+0x1c>
}
     a30:	0f 90       	pop	r0
     a32:	cf 91       	pop	r28
     a34:	df 91       	pop	r29
     a36:	08 95       	ret

00000a38 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
     a38:	df 93       	push	r29
     a3a:	cf 93       	push	r28
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     a40:	e6 e5       	ldi	r30, 0x56	; 86
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	84 ec       	ldi	r24, 0xC4	; 196
     a46:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     a48:	e6 e5       	ldi	r30, 0x56	; 86
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	80 81       	ld	r24, Z
     a4e:	88 23       	and	r24, r24
     a50:	dc f7       	brge	.-10     	; 0xa48 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
     a52:	e3 e2       	ldi	r30, 0x23	; 35
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	80 81       	ld	r24, Z
}
     a58:	cf 91       	pop	r28
     a5a:	df 91       	pop	r29
     a5c:	08 95       	ret

00000a5e <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
     a5e:	df 93       	push	r29
     a60:	cf 93       	push	r28
     a62:	cd b7       	in	r28, 0x3d	; 61
     a64:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     a66:	e6 e5       	ldi	r30, 0x56	; 86
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	84 e8       	ldi	r24, 0x84	; 132
     a6c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     a6e:	e6 e5       	ldi	r30, 0x56	; 86
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	80 81       	ld	r24, Z
     a74:	88 23       	and	r24, r24
     a76:	dc f7       	brge	.-10     	; 0xa6e <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
     a78:	e3 e2       	ldi	r30, 0x23	; 35
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	80 81       	ld	r24, Z
}
     a7e:	cf 91       	pop	r28
     a80:	df 91       	pop	r29
     a82:	08 95       	ret

00000a84 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
     a84:	df 93       	push	r29
     a86:	cf 93       	push	r28
     a88:	0f 92       	push	r0
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
     a8e:	e1 e2       	ldi	r30, 0x21	; 33
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	80 81       	ld	r24, Z
     a94:	88 7f       	andi	r24, 0xF8	; 248
     a96:	89 83       	std	Y+1, r24	; 0x01
    return status;
     a98:	89 81       	ldd	r24, Y+1	; 0x01
}
     a9a:	0f 90       	pop	r0
     a9c:	cf 91       	pop	r28
     a9e:	df 91       	pop	r29
     aa0:	08 95       	ret

00000aa2 <main>:

/* Counter to hold the seconds */
volatile uint16 g_seconds = 0;

int main (void)
{
     aa2:	df 93       	push	r29
     aa4:	cf 93       	push	r28
     aa6:	cd b7       	in	r28, 0x3d	; 61
     aa8:	de b7       	in	r29, 0x3e	; 62
     aaa:	64 97       	sbiw	r28, 0x14	; 20
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	f8 94       	cli
     ab0:	de bf       	out	0x3e, r29	; 62
     ab2:	0f be       	out	0x3f, r0	; 63
     ab4:	cd bf       	out	0x3d, r28	; 61
	/*I2C initialization*/
	TWI_ConfigType TWI_Config = {FCPU_CLOCK,0x02,0x01};
     ab6:	ce 01       	movw	r24, r28
     ab8:	01 96       	adiw	r24, 0x01	; 1
     aba:	9c 87       	std	Y+12, r25	; 0x0c
     abc:	8b 87       	std	Y+11, r24	; 0x0b
     abe:	e8 e6       	ldi	r30, 0x68	; 104
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	fe 87       	std	Y+14, r31	; 0x0e
     ac4:	ed 87       	std	Y+13, r30	; 0x0d
     ac6:	f3 e0       	ldi	r31, 0x03	; 3
     ac8:	ff 87       	std	Y+15, r31	; 0x0f
     aca:	ed 85       	ldd	r30, Y+13	; 0x0d
     acc:	fe 85       	ldd	r31, Y+14	; 0x0e
     ace:	00 80       	ld	r0, Z
     ad0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ad2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ad4:	01 96       	adiw	r24, 0x01	; 1
     ad6:	9e 87       	std	Y+14, r25	; 0x0e
     ad8:	8d 87       	std	Y+13, r24	; 0x0d
     ada:	eb 85       	ldd	r30, Y+11	; 0x0b
     adc:	fc 85       	ldd	r31, Y+12	; 0x0c
     ade:	00 82       	st	Z, r0
     ae0:	8b 85       	ldd	r24, Y+11	; 0x0b
     ae2:	9c 85       	ldd	r25, Y+12	; 0x0c
     ae4:	01 96       	adiw	r24, 0x01	; 1
     ae6:	9c 87       	std	Y+12, r25	; 0x0c
     ae8:	8b 87       	std	Y+11, r24	; 0x0b
     aea:	9f 85       	ldd	r25, Y+15	; 0x0f
     aec:	91 50       	subi	r25, 0x01	; 1
     aee:	9f 87       	std	Y+15, r25	; 0x0f
     af0:	ef 85       	ldd	r30, Y+15	; 0x0f
     af2:	ee 23       	and	r30, r30
     af4:	51 f7       	brne	.-44     	; 0xaca <main+0x28>
	UART_config uart_config = {
			9600,
			EIGHT_BITS,
			DISABLED,
			ONE_BIT
	};
     af6:	ce 01       	movw	r24, r28
     af8:	04 96       	adiw	r24, 0x04	; 4
     afa:	99 8b       	std	Y+17, r25	; 0x11
     afc:	88 8b       	std	Y+16, r24	; 0x10
     afe:	e1 e6       	ldi	r30, 0x61	; 97
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	fb 8b       	std	Y+19, r31	; 0x13
     b04:	ea 8b       	std	Y+18, r30	; 0x12
     b06:	f7 e0       	ldi	r31, 0x07	; 7
     b08:	fc 8b       	std	Y+20, r31	; 0x14
     b0a:	ea 89       	ldd	r30, Y+18	; 0x12
     b0c:	fb 89       	ldd	r31, Y+19	; 0x13
     b0e:	00 80       	ld	r0, Z
     b10:	8a 89       	ldd	r24, Y+18	; 0x12
     b12:	9b 89       	ldd	r25, Y+19	; 0x13
     b14:	01 96       	adiw	r24, 0x01	; 1
     b16:	9b 8b       	std	Y+19, r25	; 0x13
     b18:	8a 8b       	std	Y+18, r24	; 0x12
     b1a:	e8 89       	ldd	r30, Y+16	; 0x10
     b1c:	f9 89       	ldd	r31, Y+17	; 0x11
     b1e:	00 82       	st	Z, r0
     b20:	88 89       	ldd	r24, Y+16	; 0x10
     b22:	99 89       	ldd	r25, Y+17	; 0x11
     b24:	01 96       	adiw	r24, 0x01	; 1
     b26:	99 8b       	std	Y+17, r25	; 0x11
     b28:	88 8b       	std	Y+16, r24	; 0x10
     b2a:	9c 89       	ldd	r25, Y+20	; 0x14
     b2c:	91 50       	subi	r25, 0x01	; 1
     b2e:	9c 8b       	std	Y+20, r25	; 0x14
     b30:	ec 89       	ldd	r30, Y+20	; 0x14
     b32:	ee 23       	and	r30, r30
     b34:	51 f7       	brne	.-44     	; 0xb0a <main+0x68>

	EEPROM_init(&TWI_Config);
     b36:	ce 01       	movw	r24, r28
     b38:	01 96       	adiw	r24, 0x01	; 1
     b3a:	0e 94 c0 00 	call	0x180	; 0x180 <EEPROM_init>

	UART_init(&uart_config);
     b3e:	ce 01       	movw	r24, r28
     b40:	04 96       	adiw	r24, 0x04	; 4
     b42:	0e 94 a3 08 	call	0x1146	; 0x1146 <UART_init>
     b46:	3b c0       	rjmp	.+118    	; 0xbbe <main+0x11c>
	{
		/* Check for every iteration if the password is stored in EEPROM or not */
		while(IsRecorded != RecBefore)
		{
			/* Wait until the HMI_ECU tell it is ready to receive */
			while (UART_recieveByte() != HMI_ECU_IS_READY);
     b48:	0e 94 47 09 	call	0x128e	; 0x128e <UART_recieveByte>
     b4c:	85 3a       	cpi	r24, 0xA5	; 165
     b4e:	e1 f7       	brne	.-8      	; 0xb48 <main+0xa6>
			UART_sendByte(0);
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	0e 94 30 09 	call	0x1260	; 0x1260 <UART_sendByte>

			/* Tell HMI_ECU that I am ready to receive */
			UART_sendByte(CONTROL_ECU_IS_READY);
     b56:	8a e5       	ldi	r24, 0x5A	; 90
     b58:	0e 94 30 09 	call	0x1260	; 0x1260 <UART_sendByte>
			UART_receiveString(CONTROL_ECU_Password);
     b5c:	8d e8       	ldi	r24, 0x8D	; 141
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	0e 94 72 09 	call	0x12e4	; 0x12e4 <UART_receiveString>

			EEPROM_writeByte(EEPROM_SA,RecBefore);
     b64:	8a e0       	ldi	r24, 0x0A	; 10
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	61 e1       	ldi	r22, 0x11	; 17
     b6a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <EEPROM_writeByte>

			/* Store the 5 digits of the password */
			for (i=0; i<5 ; i++)
     b6e:	10 92 89 00 	sts	0x0089, r1
     b72:	17 c0       	rjmp	.+46     	; 0xba2 <main+0x100>
			{
				EEPROM_writeByte(EEPROM_SA+(i+1), CONTROL_ECU_Password[i]);
     b74:	80 91 89 00 	lds	r24, 0x0089
     b78:	88 2f       	mov	r24, r24
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0b 96       	adiw	r24, 0x0b	; 11
     b7e:	ac 01       	movw	r20, r24
     b80:	80 91 89 00 	lds	r24, 0x0089
     b84:	88 2f       	mov	r24, r24
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	fc 01       	movw	r30, r24
     b8a:	e3 57       	subi	r30, 0x73	; 115
     b8c:	ff 4f       	sbci	r31, 0xFF	; 255
     b8e:	20 81       	ld	r18, Z
     b90:	ca 01       	movw	r24, r20
     b92:	62 2f       	mov	r22, r18
     b94:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <EEPROM_writeByte>
			UART_receiveString(CONTROL_ECU_Password);

			EEPROM_writeByte(EEPROM_SA,RecBefore);

			/* Store the 5 digits of the password */
			for (i=0; i<5 ; i++)
     b98:	80 91 89 00 	lds	r24, 0x0089
     b9c:	8f 5f       	subi	r24, 0xFF	; 255
     b9e:	80 93 89 00 	sts	0x0089, r24
     ba2:	80 91 89 00 	lds	r24, 0x0089
     ba6:	85 30       	cpi	r24, 0x05	; 5
     ba8:	28 f3       	brcs	.-54     	; 0xb74 <main+0xd2>
			{
				EEPROM_writeByte(EEPROM_SA+(i+1), CONTROL_ECU_Password[i]);
			}

			/* Set the flag to know there is a stored password in EEPROM */
			IsRecorded = RecBefore;
     baa:	81 e1       	ldi	r24, 0x11	; 17
     bac:	80 93 8a 00 	sts	0x008A, r24
			EEPROM_writeByte(EEPROM_SA, IsRecorded);
     bb0:	20 91 8a 00 	lds	r18, 0x008A
     bb4:	8a e0       	ldi	r24, 0x0A	; 10
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	62 2f       	mov	r22, r18
     bba:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <EEPROM_writeByte>
	UART_init(&uart_config);

	while (1)
	{
		/* Check for every iteration if the password is stored in EEPROM or not */
		while(IsRecorded != RecBefore)
     bbe:	80 91 8a 00 	lds	r24, 0x008A
     bc2:	81 31       	cpi	r24, 0x11	; 17
     bc4:	09 f6       	brne	.-126    	; 0xb48 <main+0xa6>
			IsRecorded = RecBefore;
			EEPROM_writeByte(EEPROM_SA, IsRecorded);
		}

		/* If there is a stored password, and already will be, then read it */
		for (i=0; i<5 ;i++)
     bc6:	10 92 89 00 	sts	0x0089, r1
     bca:	16 c0       	rjmp	.+44     	; 0xbf8 <main+0x156>
		{
			EEPROM_readByte(EEPROM_SA+(i+1), CONTROL_ECU_Password+i);
     bcc:	80 91 89 00 	lds	r24, 0x0089
     bd0:	88 2f       	mov	r24, r24
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0b 96       	adiw	r24, 0x0b	; 11
     bd6:	ac 01       	movw	r20, r24
     bd8:	80 91 89 00 	lds	r24, 0x0089
     bdc:	88 2f       	mov	r24, r24
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	9c 01       	movw	r18, r24
     be2:	23 57       	subi	r18, 0x73	; 115
     be4:	3f 4f       	sbci	r19, 0xFF	; 255
     be6:	ca 01       	movw	r24, r20
     be8:	b9 01       	movw	r22, r18
     bea:	0e 94 11 01 	call	0x222	; 0x222 <EEPROM_readByte>
			IsRecorded = RecBefore;
			EEPROM_writeByte(EEPROM_SA, IsRecorded);
		}

		/* If there is a stored password, and already will be, then read it */
		for (i=0; i<5 ;i++)
     bee:	80 91 89 00 	lds	r24, 0x0089
     bf2:	8f 5f       	subi	r24, 0xFF	; 255
     bf4:	80 93 89 00 	sts	0x0089, r24
     bf8:	80 91 89 00 	lds	r24, 0x0089
     bfc:	85 30       	cpi	r24, 0x05	; 5
     bfe:	30 f3       	brcs	.-52     	; 0xbcc <main+0x12a>
		{
			EEPROM_readByte(EEPROM_SA+(i+1), CONTROL_ECU_Password+i);
		}

		/* Wait until the HMI_ECU tell it is ready to receive */
		while (UART_recieveByte() != HMI_ECU_IS_READY);
     c00:	0e 94 47 09 	call	0x128e	; 0x128e <UART_recieveByte>
     c04:	85 3a       	cpi	r24, 0xA5	; 165
     c06:	e1 f7       	brne	.-8      	; 0xc00 <main+0x15e>
		UART_sendByte(1);
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	0e 94 30 09 	call	0x1260	; 0x1260 <UART_sendByte>

		/* Tell HMI_ECU that I am ready to receive */
		UART_sendByte(CONTROL_ECU_IS_READY);
     c0e:	8a e5       	ldi	r24, 0x5A	; 90
     c10:	0e 94 30 09 	call	0x1260	; 0x1260 <UART_sendByte>
		User_Choice = UART_recieveByte();
     c14:	0e 94 47 09 	call	0x128e	; 0x128e <UART_recieveByte>
     c18:	80 93 82 00 	sts	0x0082, r24

		if (User_Choice == '-')
     c1c:	80 91 82 00 	lds	r24, 0x0082
     c20:	8d 32       	cpi	r24, 0x2D	; 45
     c22:	09 f0       	breq	.+2      	; 0xc26 <main+0x184>
     c24:	41 c0       	rjmp	.+130    	; 0xca8 <main+0x206>
		{
			CONTROL_ECU_Password[5]='#';
     c26:	83 e2       	ldi	r24, 0x23	; 35
     c28:	80 93 92 00 	sts	0x0092, r24

			/* Wait until the HMI_ECU tell it is ready to receive */
			while (UART_recieveByte() != HMI_ECU_IS_READY);
     c2c:	0e 94 47 09 	call	0x128e	; 0x128e <UART_recieveByte>
     c30:	85 3a       	cpi	r24, 0xA5	; 165
     c32:	e1 f7       	brne	.-8      	; 0xc2c <main+0x18a>
			/* Sent the password to be checked */
			UART_sendString(CONTROL_ECU_Password);
     c34:	8d e8       	ldi	r24, 0x8D	; 141
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 56 09 	call	0x12ac	; 0x12ac <UART_sendString>

			/* Tell HMI_ECU that I am ready to receive */
			UART_sendByte(CONTROL_ECU_IS_READY);
     c3c:	8a e5       	ldi	r24, 0x5A	; 90
     c3e:	0e 94 30 09 	call	0x1260	; 0x1260 <UART_sendByte>
			/* To know if the user is knowing the password or he is a thief */
			Decision = UART_recieveByte();
     c42:	0e 94 47 09 	call	0x128e	; 0x128e <UART_recieveByte>
     c46:	80 93 8c 00 	sts	0x008C, r24

			if (Decision == CORRECT)
     c4a:	80 91 8c 00 	lds	r24, 0x008C
     c4e:	80 3f       	cpi	r24, 0xF0	; 240
     c50:	31 f5       	brne	.+76     	; 0xc9e <main+0x1fc>
			{
				UART_sendByte(CONTROL_ECU_IS_READY);
     c52:	8a e5       	ldi	r24, 0x5A	; 90
     c54:	0e 94 30 09 	call	0x1260	; 0x1260 <UART_sendByte>
				UART_receiveString(CONTROL_ECU_Password);
     c58:	8d e8       	ldi	r24, 0x8D	; 141
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <UART_receiveString>

				/* Store the new password */
				for (i=0; i<5 ; i++)
     c60:	10 92 89 00 	sts	0x0089, r1
     c64:	17 c0       	rjmp	.+46     	; 0xc94 <main+0x1f2>
				{
					EEPROM_writeByte(EEPROM_SA+(i+1),CONTROL_ECU_Password[i]);
     c66:	80 91 89 00 	lds	r24, 0x0089
     c6a:	88 2f       	mov	r24, r24
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0b 96       	adiw	r24, 0x0b	; 11
     c70:	ac 01       	movw	r20, r24
     c72:	80 91 89 00 	lds	r24, 0x0089
     c76:	88 2f       	mov	r24, r24
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	fc 01       	movw	r30, r24
     c7c:	e3 57       	subi	r30, 0x73	; 115
     c7e:	ff 4f       	sbci	r31, 0xFF	; 255
     c80:	20 81       	ld	r18, Z
     c82:	ca 01       	movw	r24, r20
     c84:	62 2f       	mov	r22, r18
     c86:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <EEPROM_writeByte>
			{
				UART_sendByte(CONTROL_ECU_IS_READY);
				UART_receiveString(CONTROL_ECU_Password);

				/* Store the new password */
				for (i=0; i<5 ; i++)
     c8a:	80 91 89 00 	lds	r24, 0x0089
     c8e:	8f 5f       	subi	r24, 0xFF	; 255
     c90:	80 93 89 00 	sts	0x0089, r24
     c94:	80 91 89 00 	lds	r24, 0x0089
     c98:	85 30       	cpi	r24, 0x05	; 5
     c9a:	28 f3       	brcs	.-54     	; 0xc66 <main+0x1c4>
     c9c:	90 cf       	rjmp	.-224    	; 0xbbe <main+0x11c>
				}
			}
			else
			{
				/* Raise the alarm for 1 min */
				TASK_alertOn();
     c9e:	0e 94 89 06 	call	0xd12	; 0xd12 <TASK_alertOn>
				TASK_alertOff();
     ca2:	0e 94 db 06 	call	0xdb6	; 0xdb6 <TASK_alertOff>
     ca6:	8b cf       	rjmp	.-234    	; 0xbbe <main+0x11c>
			}
		}
		else if (User_Choice == '+')
     ca8:	80 91 82 00 	lds	r24, 0x0082
     cac:	8b 32       	cpi	r24, 0x2B	; 43
     cae:	09 f0       	breq	.+2      	; 0xcb2 <main+0x210>
     cb0:	86 cf       	rjmp	.-244    	; 0xbbe <main+0x11c>
		{
			CONTROL_ECU_Password[5]='#';
     cb2:	83 e2       	ldi	r24, 0x23	; 35
     cb4:	80 93 92 00 	sts	0x0092, r24

			while (UART_recieveByte() != HMI_ECU_IS_READY);
     cb8:	0e 94 47 09 	call	0x128e	; 0x128e <UART_recieveByte>
     cbc:	85 3a       	cpi	r24, 0xA5	; 165
     cbe:	e1 f7       	brne	.-8      	; 0xcb8 <main+0x216>
			UART_sendString(CONTROL_ECU_Password);
     cc0:	8d e8       	ldi	r24, 0x8D	; 141
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 56 09 	call	0x12ac	; 0x12ac <UART_sendString>

			UART_sendByte(CONTROL_ECU_IS_READY);
     cc8:	8a e5       	ldi	r24, 0x5A	; 90
     cca:	0e 94 30 09 	call	0x1260	; 0x1260 <UART_sendByte>
			Decision = UART_recieveByte();
     cce:	0e 94 47 09 	call	0x128e	; 0x128e <UART_recieveByte>
     cd2:	80 93 8c 00 	sts	0x008C, r24

			if (Decision == CORRECT)
     cd6:	80 91 8c 00 	lds	r24, 0x008C
     cda:	80 3f       	cpi	r24, 0xF0	; 240
     cdc:	71 f4       	brne	.+28     	; 0xcfa <main+0x258>
			{
				/* Open the door in 30 sec and wait 3 sec, then close the door in 30 sec */
				SET_BIT(SREG,7);
     cde:	af e5       	ldi	r26, 0x5F	; 95
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	ef e5       	ldi	r30, 0x5F	; 95
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	80 68       	ori	r24, 0x80	; 128
     cea:	8c 93       	st	X, r24
				TASK_doorOpen();
     cec:	0e 94 f6 06 	call	0xdec	; 0xdec <TASK_doorOpen>
				TASK_doorStop();
     cf0:	0e 94 6e 07 	call	0xedc	; 0xedc <TASK_doorStop>
				TASK_doorClose();
     cf4:	0e 94 3e 07 	call	0xe7c	; 0xe7c <TASK_doorClose>
     cf8:	62 cf       	rjmp	.-316    	; 0xbbe <main+0x11c>
			}
			else
			{
				/* Raise the alarm for 1 min */
				SET_BIT(SREG,7);
     cfa:	af e5       	ldi	r26, 0x5F	; 95
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	ef e5       	ldi	r30, 0x5F	; 95
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	80 68       	ori	r24, 0x80	; 128
     d06:	8c 93       	st	X, r24
				TASK_alertOn();
     d08:	0e 94 89 06 	call	0xd12	; 0xd12 <TASK_alertOn>
				TASK_alertOff();
     d0c:	0e 94 db 06 	call	0xdb6	; 0xdb6 <TASK_alertOff>
     d10:	56 cf       	rjmp	.-340    	; 0xbbe <main+0x11c>

00000d12 <TASK_alertOn>:

}


void TASK_alertOn()
{
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	60 97       	sbiw	r28, 0x10	; 16
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
	BUZZER_init();
     d26:	0e 94 49 00 	call	0x92	; 0x92 <BUZZER_init>
	BUZZER_on();
     d2a:	0e 94 5a 00 	call	0xb4	; 0xb4 <BUZZER_on>
	g_seconds = g_ticks = 0;
     d2e:	10 92 88 00 	sts	0x0088, r1
     d32:	10 92 87 00 	sts	0x0087, r1
     d36:	80 91 87 00 	lds	r24, 0x0087
     d3a:	90 91 88 00 	lds	r25, 0x0088
     d3e:	90 93 84 00 	sts	0x0084, r25
     d42:	80 93 83 00 	sts	0x0083, r24
	TIMER0_setCallBack(TASK_TickTok);
     d46:	8c e8       	ldi	r24, 0x8C	; 140
     d48:	97 e0       	ldi	r25, 0x07	; 7
     d4a:	0e 94 7e 08 	call	0x10fc	; 0x10fc <TIMER0_setCallBack>
				0,
				0,
				TIMER0_F_CPU_1024,
				TIMER_NORMAL_MODE,
				0
		};
     d4e:	ce 01       	movw	r24, r28
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	9d 87       	std	Y+13, r25	; 0x0d
     d54:	8c 87       	std	Y+12, r24	; 0x0c
     d56:	eb e6       	ldi	r30, 0x6B	; 107
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	ff 87       	std	Y+15, r31	; 0x0f
     d5c:	ee 87       	std	Y+14, r30	; 0x0e
     d5e:	fb e0       	ldi	r31, 0x0B	; 11
     d60:	f8 8b       	std	Y+16, r31	; 0x10
     d62:	ee 85       	ldd	r30, Y+14	; 0x0e
     d64:	ff 85       	ldd	r31, Y+15	; 0x0f
     d66:	00 80       	ld	r0, Z
     d68:	8e 85       	ldd	r24, Y+14	; 0x0e
     d6a:	9f 85       	ldd	r25, Y+15	; 0x0f
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	9f 87       	std	Y+15, r25	; 0x0f
     d70:	8e 87       	std	Y+14, r24	; 0x0e
     d72:	ec 85       	ldd	r30, Y+12	; 0x0c
     d74:	fd 85       	ldd	r31, Y+13	; 0x0d
     d76:	00 82       	st	Z, r0
     d78:	8c 85       	ldd	r24, Y+12	; 0x0c
     d7a:	9d 85       	ldd	r25, Y+13	; 0x0d
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	9d 87       	std	Y+13, r25	; 0x0d
     d80:	8c 87       	std	Y+12, r24	; 0x0c
     d82:	98 89       	ldd	r25, Y+16	; 0x10
     d84:	91 50       	subi	r25, 0x01	; 1
     d86:	98 8b       	std	Y+16, r25	; 0x10
     d88:	e8 89       	ldd	r30, Y+16	; 0x10
     d8a:	ee 23       	and	r30, r30
     d8c:	51 f7       	brne	.-44     	; 0xd62 <TASK_alertOn+0x50>

	TIMER0_init(&timer0_config);
     d8e:	ce 01       	movw	r24, r28
     d90:	01 96       	adiw	r24, 0x01	; 1
     d92:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <TIMER0_init>

	/* 1 minute - Busy wait until 1830 overflows */
	while (g_seconds <= 60);
     d96:	80 91 83 00 	lds	r24, 0x0083
     d9a:	90 91 84 00 	lds	r25, 0x0084
     d9e:	8d 33       	cpi	r24, 0x3D	; 61
     da0:	91 05       	cpc	r25, r1
     da2:	c8 f3       	brcs	.-14     	; 0xd96 <TASK_alertOn+0x84>
}
     da4:	60 96       	adiw	r28, 0x10	; 16
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	f8 94       	cli
     daa:	de bf       	out	0x3e, r29	; 62
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	cd bf       	out	0x3d, r28	; 61
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <TASK_alertOff>:

void TASK_alertOff(void)
{
     db6:	df 93       	push	r29
     db8:	cf 93       	push	r28
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
	BUZZER_off();
     dbe:	0e 94 66 00 	call	0xcc	; 0xcc <BUZZER_off>
	TIMER0_setCallBack(NULL_PTR);
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 7e 08 	call	0x10fc	; 0x10fc <TIMER0_setCallBack>
	g_seconds = g_ticks = 0;
     dca:	10 92 88 00 	sts	0x0088, r1
     dce:	10 92 87 00 	sts	0x0087, r1
     dd2:	80 91 87 00 	lds	r24, 0x0087
     dd6:	90 91 88 00 	lds	r25, 0x0088
     dda:	90 93 84 00 	sts	0x0084, r25
     dde:	80 93 83 00 	sts	0x0083, r24
	TIMER0_deinit();
     de2:	0e 94 90 08 	call	0x1120	; 0x1120 <TIMER0_deinit>
}
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <TASK_doorOpen>:

void TASK_doorOpen (void)
{
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	60 97       	sbiw	r28, 0x10	; 16
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	cd bf       	out	0x3d, r28	; 61
	DcMotor_Init();
     e00:	0e 94 72 00 	call	0xe4	; 0xe4 <DcMotor_Init>

	// Rotate the motor --> clock wise
	DcMotor_Rotate(0);
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 8d 00 	call	0x11a	; 0x11a <DcMotor_Rotate>

	TIMER0_setCallBack(TASK_TickTok);
     e0c:	8c e8       	ldi	r24, 0x8C	; 140
     e0e:	97 e0       	ldi	r25, 0x07	; 7
     e10:	0e 94 7e 08 	call	0x10fc	; 0x10fc <TIMER0_setCallBack>
				0,
				0,
				TIMER0_F_CPU_1024,
				TIMER_NORMAL_MODE,
				0
		};
     e14:	ce 01       	movw	r24, r28
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	9d 87       	std	Y+13, r25	; 0x0d
     e1a:	8c 87       	std	Y+12, r24	; 0x0c
     e1c:	e6 e7       	ldi	r30, 0x76	; 118
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	ff 87       	std	Y+15, r31	; 0x0f
     e22:	ee 87       	std	Y+14, r30	; 0x0e
     e24:	fb e0       	ldi	r31, 0x0B	; 11
     e26:	f8 8b       	std	Y+16, r31	; 0x10
     e28:	ee 85       	ldd	r30, Y+14	; 0x0e
     e2a:	ff 85       	ldd	r31, Y+15	; 0x0f
     e2c:	00 80       	ld	r0, Z
     e2e:	8e 85       	ldd	r24, Y+14	; 0x0e
     e30:	9f 85       	ldd	r25, Y+15	; 0x0f
     e32:	01 96       	adiw	r24, 0x01	; 1
     e34:	9f 87       	std	Y+15, r25	; 0x0f
     e36:	8e 87       	std	Y+14, r24	; 0x0e
     e38:	ec 85       	ldd	r30, Y+12	; 0x0c
     e3a:	fd 85       	ldd	r31, Y+13	; 0x0d
     e3c:	00 82       	st	Z, r0
     e3e:	8c 85       	ldd	r24, Y+12	; 0x0c
     e40:	9d 85       	ldd	r25, Y+13	; 0x0d
     e42:	01 96       	adiw	r24, 0x01	; 1
     e44:	9d 87       	std	Y+13, r25	; 0x0d
     e46:	8c 87       	std	Y+12, r24	; 0x0c
     e48:	98 89       	ldd	r25, Y+16	; 0x10
     e4a:	91 50       	subi	r25, 0x01	; 1
     e4c:	98 8b       	std	Y+16, r25	; 0x10
     e4e:	e8 89       	ldd	r30, Y+16	; 0x10
     e50:	ee 23       	and	r30, r30
     e52:	51 f7       	brne	.-44     	; 0xe28 <TASK_doorOpen+0x3c>

	TIMER0_init(&timer0_config);
     e54:	ce 01       	movw	r24, r28
     e56:	01 96       	adiw	r24, 0x01	; 1
     e58:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <TIMER0_init>

	/* 15 seconds*/
	while (g_seconds <= 15);
     e5c:	80 91 83 00 	lds	r24, 0x0083
     e60:	90 91 84 00 	lds	r25, 0x0084
     e64:	80 31       	cpi	r24, 0x10	; 16
     e66:	91 05       	cpc	r25, r1
     e68:	c8 f3       	brcs	.-14     	; 0xe5c <TASK_doorOpen+0x70>
}
     e6a:	60 96       	adiw	r28, 0x10	; 16
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <TASK_doorClose>:

void TASK_doorClose (void)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
	// Rotate the motor --> Anti clock wise
	DcMotor_Rotate(1);
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 8d 00 	call	0x11a	; 0x11a <DcMotor_Rotate>

	g_seconds = g_ticks = 0;
     e8c:	10 92 88 00 	sts	0x0088, r1
     e90:	10 92 87 00 	sts	0x0087, r1
     e94:	80 91 87 00 	lds	r24, 0x0087
     e98:	90 91 88 00 	lds	r25, 0x0088
     e9c:	90 93 84 00 	sts	0x0084, r25
     ea0:	80 93 83 00 	sts	0x0083, r24

	/* 15 seconds*/
	while (g_seconds <= 15);
     ea4:	80 91 83 00 	lds	r24, 0x0083
     ea8:	90 91 84 00 	lds	r25, 0x0084
     eac:	80 31       	cpi	r24, 0x10	; 16
     eae:	91 05       	cpc	r25, r1
     eb0:	c8 f3       	brcs	.-14     	; 0xea4 <TASK_doorClose+0x28>

	TIMER0_setCallBack(NULL_PTR);
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 7e 08 	call	0x10fc	; 0x10fc <TIMER0_setCallBack>
	g_seconds = g_ticks = 0;
     eba:	10 92 88 00 	sts	0x0088, r1
     ebe:	10 92 87 00 	sts	0x0087, r1
     ec2:	80 91 87 00 	lds	r24, 0x0087
     ec6:	90 91 88 00 	lds	r25, 0x0088
     eca:	90 93 84 00 	sts	0x0084, r25
     ece:	80 93 83 00 	sts	0x0083, r24
	TIMER0_deinit();
     ed2:	0e 94 90 08 	call	0x1120	; 0x1120 <TIMER0_deinit>
}
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <TASK_doorStop>:

void TASK_doorStop (void)
{
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
	DcMotor_Rotate(2);
     ee4:	82 e0       	ldi	r24, 0x02	; 2
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 8d 00 	call	0x11a	; 0x11a <DcMotor_Rotate>

	g_seconds = g_ticks = 0;
     eec:	10 92 88 00 	sts	0x0088, r1
     ef0:	10 92 87 00 	sts	0x0087, r1
     ef4:	80 91 87 00 	lds	r24, 0x0087
     ef8:	90 91 88 00 	lds	r25, 0x0088
     efc:	90 93 84 00 	sts	0x0084, r25
     f00:	80 93 83 00 	sts	0x0083, r24

	/* 3 seconds*/
	while (g_seconds <= 3);
     f04:	80 91 83 00 	lds	r24, 0x0083
     f08:	90 91 84 00 	lds	r25, 0x0084
     f0c:	84 30       	cpi	r24, 0x04	; 4
     f0e:	91 05       	cpc	r25, r1
     f10:	c8 f3       	brcs	.-14     	; 0xf04 <TASK_doorStop+0x28>
}
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	08 95       	ret

00000f18 <TASK_TickTok>:

void TASK_TickTok(void)
{
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
     f20:	80 91 87 00 	lds	r24, 0x0087
     f24:	90 91 88 00 	lds	r25, 0x0088
     f28:	01 96       	adiw	r24, 0x01	; 1
     f2a:	90 93 88 00 	sts	0x0088, r25
     f2e:	80 93 87 00 	sts	0x0087, r24
	if (g_ticks == 31)
     f32:	80 91 87 00 	lds	r24, 0x0087
     f36:	90 91 88 00 	lds	r25, 0x0088
     f3a:	8f 31       	cpi	r24, 0x1F	; 31
     f3c:	91 05       	cpc	r25, r1
     f3e:	69 f4       	brne	.+26     	; 0xf5a <TASK_TickTok+0x42>
	{
		g_ticks = 0;
     f40:	10 92 88 00 	sts	0x0088, r1
     f44:	10 92 87 00 	sts	0x0087, r1
		g_seconds++;
     f48:	80 91 83 00 	lds	r24, 0x0083
     f4c:	90 91 84 00 	lds	r25, 0x0084
     f50:	01 96       	adiw	r24, 0x01	; 1
     f52:	90 93 84 00 	sts	0x0084, r25
     f56:	80 93 83 00 	sts	0x0083, r24
	}
}
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <__vector_9>:
volatile uint16 g_ticks = 0;
/*========================================================================================================
 ||                            			Interrupt Service Routines               	 	    	         ||
 ========================================================================================================*/
ISR(TIMER0_OVF_vect)
{
     f60:	1f 92       	push	r1
     f62:	0f 92       	push	r0
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	0f 92       	push	r0
     f68:	11 24       	eor	r1, r1
     f6a:	2f 93       	push	r18
     f6c:	3f 93       	push	r19
     f6e:	4f 93       	push	r20
     f70:	5f 93       	push	r21
     f72:	6f 93       	push	r22
     f74:	7f 93       	push	r23
     f76:	8f 93       	push	r24
     f78:	9f 93       	push	r25
     f7a:	af 93       	push	r26
     f7c:	bf 93       	push	r27
     f7e:	ef 93       	push	r30
     f80:	ff 93       	push	r31
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr_timer0)
     f8a:	80 91 85 00 	lds	r24, 0x0085
     f8e:	90 91 86 00 	lds	r25, 0x0086
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	29 f0       	breq	.+10     	; 0xfa0 <__vector_9+0x40>
		(*g_callBackPtr_timer0)();
     f96:	e0 91 85 00 	lds	r30, 0x0085
     f9a:	f0 91 86 00 	lds	r31, 0x0086
     f9e:	09 95       	icall
}
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	ff 91       	pop	r31
     fa6:	ef 91       	pop	r30
     fa8:	bf 91       	pop	r27
     faa:	af 91       	pop	r26
     fac:	9f 91       	pop	r25
     fae:	8f 91       	pop	r24
     fb0:	7f 91       	pop	r23
     fb2:	6f 91       	pop	r22
     fb4:	5f 91       	pop	r21
     fb6:	4f 91       	pop	r20
     fb8:	3f 91       	pop	r19
     fba:	2f 91       	pop	r18
     fbc:	0f 90       	pop	r0
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	0f 90       	pop	r0
     fc2:	1f 90       	pop	r1
     fc4:	18 95       	reti

00000fc6 <TIMER0_init>:
 * Description : Initialize the timer by the passed configurations								  		  *
 * Arguments:																							  *
 * 		Config_Ptr <Timer_ConfigType*> The timer's configurations								  		  *
 **********************************************************************************************************/
void TIMER0_init(Timer0_ConfigType * Config_Ptr)
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	00 d0       	rcall	.+0      	; 0xfcc <TIMER0_init+0x6>
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
     fd0:	9a 83       	std	Y+2, r25	; 0x02
     fd2:	89 83       	std	Y+1, r24	; 0x01
	/* Initialize the counter */
	TCNT0 = Config_Ptr->initial_value;
     fd4:	22 e5       	ldi	r18, 0x52	; 82
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	e9 81       	ldd	r30, Y+1	; 0x01
     fda:	fa 81       	ldd	r31, Y+2	; 0x02
     fdc:	80 81       	ld	r24, Z
     fde:	91 81       	ldd	r25, Z+1	; 0x01
     fe0:	a2 81       	ldd	r26, Z+2	; 0x02
     fe2:	b3 81       	ldd	r27, Z+3	; 0x03
     fe4:	f9 01       	movw	r30, r18
     fe6:	80 83       	st	Z, r24

	/* Initialize the compare match value */
	OCR0 = Config_Ptr->compare_value;
     fe8:	2c e5       	ldi	r18, 0x5C	; 92
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	e9 81       	ldd	r30, Y+1	; 0x01
     fee:	fa 81       	ldd	r31, Y+2	; 0x02
     ff0:	84 81       	ldd	r24, Z+4	; 0x04
     ff2:	95 81       	ldd	r25, Z+5	; 0x05
     ff4:	a6 81       	ldd	r26, Z+6	; 0x06
     ff6:	b7 81       	ldd	r27, Z+7	; 0x07
     ff8:	f9 01       	movw	r30, r18
     ffa:	80 83       	st	Z, r24

	/* Reset the timer settings */
	TCCR0 = 0;
     ffc:	e3 e5       	ldi	r30, 0x53	; 83
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	10 82       	st	Z, r1

	if ((Config_Ptr->timer_mode == NORMAL_MODE) || (Config_Ptr->timer_mode == OVERFLOW_MODE))
    1002:	e9 81       	ldd	r30, Y+1	; 0x01
    1004:	fa 81       	ldd	r31, Y+2	; 0x02
    1006:	81 85       	ldd	r24, Z+9	; 0x09
    1008:	88 23       	and	r24, r24
    100a:	29 f0       	breq	.+10     	; 0x1016 <TIMER0_init+0x50>
    100c:	e9 81       	ldd	r30, Y+1	; 0x01
    100e:	fa 81       	ldd	r31, Y+2	; 0x02
    1010:	81 85       	ldd	r24, Z+9	; 0x09
    1012:	88 23       	and	r24, r24
    1014:	19 f5       	brne	.+70     	; 0x105c <TIMER0_init+0x96>
	{
		/* Disable the PWM Mode */
		SET_BIT(TCCR0, FOC0);
    1016:	a3 e5       	ldi	r26, 0x53	; 83
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e3 e5       	ldi	r30, 0x53	; 83
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	80 68       	ori	r24, 0x80	; 128
    1022:	8c 93       	st	X, r24

		/* Setup the timer mode */
		CLEAR_BIT(TCCR0, WGM01);
    1024:	a3 e5       	ldi	r26, 0x53	; 83
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e3 e5       	ldi	r30, 0x53	; 83
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	87 7f       	andi	r24, 0xF7	; 247
    1030:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, WGM00);
    1032:	a3 e5       	ldi	r26, 0x53	; 83
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e3 e5       	ldi	r30, 0x53	; 83
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	8f 7b       	andi	r24, 0xBF	; 191
    103e:	8c 93       	st	X, r24

		/* Feed the timer clock by setup the prescaler */
		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->timer_clock & 0x07);
    1040:	a3 e5       	ldi	r26, 0x53	; 83
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e3 e5       	ldi	r30, 0x53	; 83
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	98 2f       	mov	r25, r24
    104c:	98 7f       	andi	r25, 0xF8	; 248
    104e:	e9 81       	ldd	r30, Y+1	; 0x01
    1050:	fa 81       	ldd	r31, Y+2	; 0x02
    1052:	80 85       	ldd	r24, Z+8	; 0x08
    1054:	87 70       	andi	r24, 0x07	; 7
    1056:	89 2b       	or	r24, r25
    1058:	8c 93       	st	X, r24
    105a:	3d c0       	rjmp	.+122    	; 0x10d6 <TIMER0_init+0x110>
	}
	else if (Config_Ptr->timer_mode == COMPARE_MODE)
    105c:	e9 81       	ldd	r30, Y+1	; 0x01
    105e:	fa 81       	ldd	r31, Y+2	; 0x02
    1060:	81 85       	ldd	r24, Z+9	; 0x09
    1062:	81 30       	cpi	r24, 0x01	; 1
    1064:	c1 f5       	brne	.+112    	; 0x10d6 <TIMER0_init+0x110>
	{
		/* Disable the PWM Mode */
		SET_BIT(TCCR0, FOC0);
    1066:	a3 e5       	ldi	r26, 0x53	; 83
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e3 e5       	ldi	r30, 0x53	; 83
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	80 68       	ori	r24, 0x80	; 128
    1072:	8c 93       	st	X, r24

		/* Setup the timer mode */
		SET_BIT(TCCR0, WGM01);
    1074:	a3 e5       	ldi	r26, 0x53	; 83
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e3 e5       	ldi	r30, 0x53	; 83
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	88 60       	ori	r24, 0x08	; 8
    1080:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, WGM00);
    1082:	a3 e5       	ldi	r26, 0x53	; 83
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e3 e5       	ldi	r30, 0x53	; 83
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	8f 7b       	andi	r24, 0xBF	; 191
    108e:	8c 93       	st	X, r24

		/* Setup the compare output mode */
		TCCR0 = (TCCR0 & 0xCF) | ((Config_Ptr->com_mode & 0x03) << 4);
    1090:	a3 e5       	ldi	r26, 0x53	; 83
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e3 e5       	ldi	r30, 0x53	; 83
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	28 2f       	mov	r18, r24
    109c:	2f 7c       	andi	r18, 0xCF	; 207
    109e:	e9 81       	ldd	r30, Y+1	; 0x01
    10a0:	fa 81       	ldd	r31, Y+2	; 0x02
    10a2:	82 85       	ldd	r24, Z+10	; 0x0a
    10a4:	88 2f       	mov	r24, r24
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	83 70       	andi	r24, 0x03	; 3
    10aa:	90 70       	andi	r25, 0x00	; 0
    10ac:	82 95       	swap	r24
    10ae:	92 95       	swap	r25
    10b0:	90 7f       	andi	r25, 0xF0	; 240
    10b2:	98 27       	eor	r25, r24
    10b4:	80 7f       	andi	r24, 0xF0	; 240
    10b6:	98 27       	eor	r25, r24
    10b8:	82 2b       	or	r24, r18
    10ba:	8c 93       	st	X, r24

		/* Feed the timer clock by setup the prescaler */
		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->timer_clock & 0x07);
    10bc:	a3 e5       	ldi	r26, 0x53	; 83
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e3 e5       	ldi	r30, 0x53	; 83
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	98 2f       	mov	r25, r24
    10c8:	98 7f       	andi	r25, 0xF8	; 248
    10ca:	e9 81       	ldd	r30, Y+1	; 0x01
    10cc:	fa 81       	ldd	r31, Y+2	; 0x02
    10ce:	80 85       	ldd	r24, Z+8	; 0x08
    10d0:	87 70       	andi	r24, 0x07	; 7
    10d2:	89 2b       	or	r24, r25
    10d4:	8c 93       	st	X, r24
	}

	SET_BIT(SREG, SREG_I);
    10d6:	af e5       	ldi	r26, 0x5F	; 95
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	ef e5       	ldi	r30, 0x5F	; 95
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	80 68       	ori	r24, 0x80	; 128
    10e2:	8c 93       	st	X, r24
	SET_BIT(TIMSK, TOIE0);
    10e4:	a9 e5       	ldi	r26, 0x59	; 89
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e9 e5       	ldi	r30, 0x59	; 89
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	81 60       	ori	r24, 0x01	; 1
    10f0:	8c 93       	st	X, r24
}
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <TIMER0_setCallBack>:
 * Description : Function to set the Call Back function address.										  *
 * Arguments:																							  *
 * 		a_ptr <void*> The function address which will be called back									  *
 **********************************************************************************************************/
void TIMER0_setCallBack(void(*a_ptr)(void))
{
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	00 d0       	rcall	.+0      	; 0x1102 <TIMER0_setCallBack+0x6>
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	9a 83       	std	Y+2, r25	; 0x02
    1108:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr_timer0 = (volatile void*)a_ptr;
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	9a 81       	ldd	r25, Y+2	; 0x02
    110e:	90 93 86 00 	sts	0x0086, r25
    1112:	80 93 85 00 	sts	0x0085, r24
}
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <TIMER0_deinit>:
 * Description : De-initialize the timer														  		  *
 * Arguments:																							  *
 * 		NONE								 		  													  *
 **********************************************************************************************************/
void TIMER0_deinit()
{
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = OCR0 = TCCR0 = 0;
    1128:	22 e5       	ldi	r18, 0x52	; 82
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	ac e5       	ldi	r26, 0x5C	; 92
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e3 e5       	ldi	r30, 0x53	; 83
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	10 82       	st	Z, r1
    1136:	80 81       	ld	r24, Z
    1138:	8c 93       	st	X, r24
    113a:	8c 91       	ld	r24, X
    113c:	f9 01       	movw	r30, r18
    113e:	80 83       	st	Z, r24
}
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	08 95       	ret

00001146 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_config *Config_Ptr)
{
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	00 d0       	rcall	.+0      	; 0x114c <UART_init+0x6>
    114c:	00 d0       	rcall	.+0      	; 0x114e <UART_init+0x8>
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	9c 83       	std	Y+4, r25	; 0x04
    1154:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1156:	1a 82       	std	Y+2, r1	; 0x02
    1158:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    115a:	eb e2       	ldi	r30, 0x2B	; 43
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	82 e0       	ldi	r24, 0x02	; 2
    1160:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1162:	ea e2       	ldi	r30, 0x2A	; 42
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	88 e1       	ldi	r24, 0x18	; 24
    1168:	80 83       	st	Z, r24
	if(Config_Ptr->number_of_bits_per_frame == NINE_BITS)
    116a:	eb 81       	ldd	r30, Y+3	; 0x03
    116c:	fc 81       	ldd	r31, Y+4	; 0x04
    116e:	84 81       	ldd	r24, Z+4	; 0x04
    1170:	87 30       	cpi	r24, 0x07	; 7
    1172:	39 f4       	brne	.+14     	; 0x1182 <UART_init+0x3c>
		UCSRB |= (1<<UCSZ2);
    1174:	aa e2       	ldi	r26, 0x2A	; 42
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	ea e2       	ldi	r30, 0x2A	; 42
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	84 60       	ori	r24, 0x04	; 4
    1180:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    1182:	e0 e4       	ldi	r30, 0x40	; 64
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 e8       	ldi	r24, 0x80	; 128
    1188:	80 83       	st	Z, r24
	/* Set the parity type in UPM1:0 */
	UCSRC |= ((Config_Ptr ->parity_type <<UPM0) & 0x30);
    118a:	a0 e4       	ldi	r26, 0x40	; 64
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e0 e4       	ldi	r30, 0x40	; 64
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	28 2f       	mov	r18, r24
    1196:	eb 81       	ldd	r30, Y+3	; 0x03
    1198:	fc 81       	ldd	r31, Y+4	; 0x04
    119a:	85 81       	ldd	r24, Z+5	; 0x05
    119c:	88 2f       	mov	r24, r24
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	82 95       	swap	r24
    11a2:	92 95       	swap	r25
    11a4:	90 7f       	andi	r25, 0xF0	; 240
    11a6:	98 27       	eor	r25, r24
    11a8:	80 7f       	andi	r24, 0xF0	; 240
    11aa:	98 27       	eor	r25, r24
    11ac:	80 73       	andi	r24, 0x30	; 48
    11ae:	82 2b       	or	r24, r18
    11b0:	8c 93       	st	X, r24
	/* Set the data range in UCSZ1:0 */
	UCSRC |= ((Config_Ptr ->number_of_bits_per_frame << UCSZ0) & 0x06);
    11b2:	a0 e4       	ldi	r26, 0x40	; 64
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e0 e4       	ldi	r30, 0x40	; 64
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	28 2f       	mov	r18, r24
    11be:	eb 81       	ldd	r30, Y+3	; 0x03
    11c0:	fc 81       	ldd	r31, Y+4	; 0x04
    11c2:	84 81       	ldd	r24, Z+4	; 0x04
    11c4:	88 2f       	mov	r24, r24
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	86 70       	andi	r24, 0x06	; 6
    11ce:	82 2b       	or	r24, r18
    11d0:	8c 93       	st	X, r24
	/* Set the numbers of stop bits in USBS */
	UCSRC |= ((Config_Ptr ->number_of_stop_bits << USBS) & 0x08);
    11d2:	a0 e4       	ldi	r26, 0x40	; 64
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e0 e4       	ldi	r30, 0x40	; 64
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	28 2f       	mov	r18, r24
    11de:	eb 81       	ldd	r30, Y+3	; 0x03
    11e0:	fc 81       	ldd	r31, Y+4	; 0x04
    11e2:	86 81       	ldd	r24, Z+6	; 0x06
    11e4:	88 2f       	mov	r24, r24
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	88 70       	andi	r24, 0x08	; 8
    11f6:	82 2b       	or	r24, r18
    11f8:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    11fa:	eb 81       	ldd	r30, Y+3	; 0x03
    11fc:	fc 81       	ldd	r31, Y+4	; 0x04
    11fe:	80 81       	ld	r24, Z
    1200:	91 81       	ldd	r25, Z+1	; 0x01
    1202:	a2 81       	ldd	r26, Z+2	; 0x02
    1204:	b3 81       	ldd	r27, Z+3	; 0x03
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	aa 1f       	adc	r26, r26
    120c:	bb 1f       	adc	r27, r27
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	aa 1f       	adc	r26, r26
    1214:	bb 1f       	adc	r27, r27
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	aa 1f       	adc	r26, r26
    121c:	bb 1f       	adc	r27, r27
    121e:	9c 01       	movw	r18, r24
    1220:	ad 01       	movw	r20, r26
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	92 e1       	ldi	r25, 0x12	; 18
    1226:	aa e7       	ldi	r26, 0x7A	; 122
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	bc 01       	movw	r22, r24
    122c:	cd 01       	movw	r24, r26
    122e:	0e 94 b5 09 	call	0x136a	; 0x136a <__udivmodsi4>
    1232:	da 01       	movw	r26, r20
    1234:	c9 01       	movw	r24, r18
    1236:	01 97       	sbiw	r24, 0x01	; 1
    1238:	9a 83       	std	Y+2, r25	; 0x02
    123a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    123c:	e0 e4       	ldi	r30, 0x40	; 64
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	9a 81       	ldd	r25, Y+2	; 0x02
    1244:	89 2f       	mov	r24, r25
    1246:	99 27       	eor	r25, r25
    1248:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    124a:	e9 e2       	ldi	r30, 0x29	; 41
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	80 83       	st	Z, r24
}
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	0f 92       	push	r0
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    126c:	eb e2       	ldi	r30, 0x2B	; 43
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	88 2f       	mov	r24, r24
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	80 72       	andi	r24, 0x20	; 32
    1278:	90 70       	andi	r25, 0x00	; 0
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	b9 f3       	breq	.-18     	; 0x126c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    127e:	ec e2       	ldi	r30, 0x2C	; 44
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	80 83       	st	Z, r24
}
    1286:	0f 90       	pop	r0
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    1296:	eb e2       	ldi	r30, 0x2B	; 43
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	88 23       	and	r24, r24
    129e:	dc f7       	brge	.-10     	; 0x1296 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    12a0:	ec e2       	ldi	r30, 0x2C	; 44
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
}
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <UART_sendString+0x6>
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	9a 83       	std	Y+2, r25	; 0x02
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	0a c0       	rjmp	.+20     	; 0x12d0 <UART_sendString+0x24>
	/* Send the whole string */
	while(*Str != '\0')
	{
		UART_sendByte(*Str);
    12bc:	e9 81       	ldd	r30, Y+1	; 0x01
    12be:	fa 81       	ldd	r31, Y+2	; 0x02
    12c0:	80 81       	ld	r24, Z
    12c2:	0e 94 30 09 	call	0x1260	; 0x1260 <UART_sendByte>
		Str++;
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ca:	01 96       	adiw	r24, 0x01	; 1
    12cc:	9a 83       	std	Y+2, r25	; 0x02
    12ce:	89 83       	std	Y+1, r24	; 0x01
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
	/* Send the whole string */
	while(*Str != '\0')
    12d0:	e9 81       	ldd	r30, Y+1	; 0x01
    12d2:	fa 81       	ldd	r31, Y+2	; 0x02
    12d4:	80 81       	ld	r24, Z
    12d6:	88 23       	and	r24, r24
    12d8:	89 f7       	brne	.-30     	; 0x12bc <UART_sendString+0x10>
	{
		UART_sendByte(*Str);
		Str++;
	}
}
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <UART_receiveString+0xa>
    12ee:	0f 92       	push	r0
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	9b 83       	std	Y+3, r25	; 0x03
    12f6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    12f8:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	9b 81       	ldd	r25, Y+3	; 0x03
    1304:	8c 01       	movw	r16, r24
    1306:	02 0f       	add	r16, r18
    1308:	13 1f       	adc	r17, r19
    130a:	0e 94 47 09 	call	0x128e	; 0x128e <UART_recieveByte>
    130e:	f8 01       	movw	r30, r16
    1310:	80 83       	st	Z, r24
    1312:	0f c0       	rjmp	.+30     	; 0x1332 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	8f 5f       	subi	r24, 0xFF	; 255
    1318:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	9b 81       	ldd	r25, Y+3	; 0x03
    1324:	8c 01       	movw	r16, r24
    1326:	02 0f       	add	r16, r18
    1328:	13 1f       	adc	r17, r19
    132a:	0e 94 47 09 	call	0x128e	; 0x128e <UART_recieveByte>
    132e:	f8 01       	movw	r30, r16
    1330:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	9b 81       	ldd	r25, Y+3	; 0x03
    133c:	fc 01       	movw	r30, r24
    133e:	e2 0f       	add	r30, r18
    1340:	f3 1f       	adc	r31, r19
    1342:	80 81       	ld	r24, Z
    1344:	83 32       	cpi	r24, 0x23	; 35
    1346:	31 f7       	brne	.-52     	; 0x1314 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	9b 81       	ldd	r25, Y+3	; 0x03
    1352:	fc 01       	movw	r30, r24
    1354:	e2 0f       	add	r30, r18
    1356:	f3 1f       	adc	r31, r19
    1358:	10 82       	st	Z, r1
}
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	1f 91       	pop	r17
    1366:	0f 91       	pop	r16
    1368:	08 95       	ret

0000136a <__udivmodsi4>:
    136a:	a1 e2       	ldi	r26, 0x21	; 33
    136c:	1a 2e       	mov	r1, r26
    136e:	aa 1b       	sub	r26, r26
    1370:	bb 1b       	sub	r27, r27
    1372:	fd 01       	movw	r30, r26
    1374:	0d c0       	rjmp	.+26     	; 0x1390 <__udivmodsi4_ep>

00001376 <__udivmodsi4_loop>:
    1376:	aa 1f       	adc	r26, r26
    1378:	bb 1f       	adc	r27, r27
    137a:	ee 1f       	adc	r30, r30
    137c:	ff 1f       	adc	r31, r31
    137e:	a2 17       	cp	r26, r18
    1380:	b3 07       	cpc	r27, r19
    1382:	e4 07       	cpc	r30, r20
    1384:	f5 07       	cpc	r31, r21
    1386:	20 f0       	brcs	.+8      	; 0x1390 <__udivmodsi4_ep>
    1388:	a2 1b       	sub	r26, r18
    138a:	b3 0b       	sbc	r27, r19
    138c:	e4 0b       	sbc	r30, r20
    138e:	f5 0b       	sbc	r31, r21

00001390 <__udivmodsi4_ep>:
    1390:	66 1f       	adc	r22, r22
    1392:	77 1f       	adc	r23, r23
    1394:	88 1f       	adc	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	1a 94       	dec	r1
    139a:	69 f7       	brne	.-38     	; 0x1376 <__udivmodsi4_loop>
    139c:	60 95       	com	r22
    139e:	70 95       	com	r23
    13a0:	80 95       	com	r24
    13a2:	90 95       	com	r25
    13a4:	9b 01       	movw	r18, r22
    13a6:	ac 01       	movw	r20, r24
    13a8:	bd 01       	movw	r22, r26
    13aa:	cf 01       	movw	r24, r30
    13ac:	08 95       	ret

000013ae <_exit>:
    13ae:	f8 94       	cli

000013b0 <__stop_program>:
    13b0:	ff cf       	rjmp	.-2      	; 0x13b0 <__stop_program>
