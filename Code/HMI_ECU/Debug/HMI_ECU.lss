
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003512  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  00003512  000035a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800172  00800172  000036b8  2**0
                  ALLOC
  3 .stab         000032d0  00000000  00000000  000036b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000140b  00000000  00000000  00006988  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007d93  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008043  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ab77  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b924  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ba84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bd11  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c4df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <main>
      8a:	0c 94 87 1a 	jmp	0x350e	; 0x350e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e4       	ldi	r26, 0x4B	; 75
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 27 1a 	jmp	0x344e	; 0x344e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8b e4       	ldi	r24, 0x4B	; 75
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 27 1a 	jmp	0x344e	; 0x344e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1b 1a 	jmp	0x3436	; 0x3436 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 37 1a 	jmp	0x346e	; 0x346e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <BUZZER_init>:
/*
 * Description :
 * Initialize the direction of the connected pin
 */
void BUZZER_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	65 e0       	ldi	r22, 0x05	; 5
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 cc 05 	call	0xb98	; 0xb98 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	65 e0       	ldi	r22, 0x05	; 5
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 b7 06 	call	0xd6e	; 0xd6e <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <BUZZER_on>:
/*
 * Description :
 * Force HIGH Logic in Buzzer connected pin
 */
void BUZZER_on(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	65 e0       	ldi	r22, 0x05	; 5
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 b7 06 	call	0xd6e	; 0xd6e <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <BUZZER_off>:
/*
 * Description :
 * Force LOW Logic in Buzzer connected pin
 */
void BUZZER_off(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	65 e0       	ldi	r22, 0x05	; 5
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 b7 06 	call	0xd6e	; 0xd6e <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	00 d0       	rcall	.+0      	; 0xb9e <GPIO_setupPinDirection+0x6>
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <GPIO_setupPinDirection+0x8>
     ba0:	0f 92       	push	r0
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	89 83       	std	Y+1, r24	; 0x01
     ba8:	6a 83       	std	Y+2, r22	; 0x02
     baa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     bac:	8a 81       	ldd	r24, Y+2	; 0x02
     bae:	88 30       	cpi	r24, 0x08	; 8
     bb0:	08 f0       	brcs	.+2      	; 0xbb4 <GPIO_setupPinDirection+0x1c>
     bb2:	d5 c0       	rjmp	.+426    	; 0xd5e <GPIO_setupPinDirection+0x1c6>
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	84 30       	cpi	r24, 0x04	; 4
     bb8:	08 f0       	brcs	.+2      	; 0xbbc <GPIO_setupPinDirection+0x24>
     bba:	d1 c0       	rjmp	.+418    	; 0xd5e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	3d 83       	std	Y+5, r19	; 0x05
     bc4:	2c 83       	std	Y+4, r18	; 0x04
     bc6:	8c 81       	ldd	r24, Y+4	; 0x04
     bc8:	9d 81       	ldd	r25, Y+5	; 0x05
     bca:	81 30       	cpi	r24, 0x01	; 1
     bcc:	91 05       	cpc	r25, r1
     bce:	09 f4       	brne	.+2      	; 0xbd2 <GPIO_setupPinDirection+0x3a>
     bd0:	43 c0       	rjmp	.+134    	; 0xc58 <GPIO_setupPinDirection+0xc0>
     bd2:	2c 81       	ldd	r18, Y+4	; 0x04
     bd4:	3d 81       	ldd	r19, Y+5	; 0x05
     bd6:	22 30       	cpi	r18, 0x02	; 2
     bd8:	31 05       	cpc	r19, r1
     bda:	2c f4       	brge	.+10     	; 0xbe6 <GPIO_setupPinDirection+0x4e>
     bdc:	8c 81       	ldd	r24, Y+4	; 0x04
     bde:	9d 81       	ldd	r25, Y+5	; 0x05
     be0:	00 97       	sbiw	r24, 0x00	; 0
     be2:	71 f0       	breq	.+28     	; 0xc00 <GPIO_setupPinDirection+0x68>
     be4:	bc c0       	rjmp	.+376    	; 0xd5e <GPIO_setupPinDirection+0x1c6>
     be6:	2c 81       	ldd	r18, Y+4	; 0x04
     be8:	3d 81       	ldd	r19, Y+5	; 0x05
     bea:	22 30       	cpi	r18, 0x02	; 2
     bec:	31 05       	cpc	r19, r1
     bee:	09 f4       	brne	.+2      	; 0xbf2 <GPIO_setupPinDirection+0x5a>
     bf0:	5f c0       	rjmp	.+190    	; 0xcb0 <GPIO_setupPinDirection+0x118>
     bf2:	8c 81       	ldd	r24, Y+4	; 0x04
     bf4:	9d 81       	ldd	r25, Y+5	; 0x05
     bf6:	83 30       	cpi	r24, 0x03	; 3
     bf8:	91 05       	cpc	r25, r1
     bfa:	09 f4       	brne	.+2      	; 0xbfe <GPIO_setupPinDirection+0x66>
     bfc:	85 c0       	rjmp	.+266    	; 0xd08 <GPIO_setupPinDirection+0x170>
     bfe:	af c0       	rjmp	.+350    	; 0xd5e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	81 30       	cpi	r24, 0x01	; 1
     c04:	a1 f4       	brne	.+40     	; 0xc2e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     c06:	aa e3       	ldi	r26, 0x3A	; 58
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	ea e3       	ldi	r30, 0x3A	; 58
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	48 2f       	mov	r20, r24
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	02 2e       	mov	r0, r18
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <GPIO_setupPinDirection+0x8c>
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	0a 94       	dec	r0
     c26:	e2 f7       	brpl	.-8      	; 0xc20 <GPIO_setupPinDirection+0x88>
     c28:	84 2b       	or	r24, r20
     c2a:	8c 93       	st	X, r24
     c2c:	98 c0       	rjmp	.+304    	; 0xd5e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     c2e:	aa e3       	ldi	r26, 0x3A	; 58
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	ea e3       	ldi	r30, 0x3A	; 58
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	48 2f       	mov	r20, r24
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	28 2f       	mov	r18, r24
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	02 2e       	mov	r0, r18
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <GPIO_setupPinDirection+0xb4>
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	0a 94       	dec	r0
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <GPIO_setupPinDirection+0xb0>
     c50:	80 95       	com	r24
     c52:	84 23       	and	r24, r20
     c54:	8c 93       	st	X, r24
     c56:	83 c0       	rjmp	.+262    	; 0xd5e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c58:	8b 81       	ldd	r24, Y+3	; 0x03
     c5a:	81 30       	cpi	r24, 0x01	; 1
     c5c:	a1 f4       	brne	.+40     	; 0xc86 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c5e:	a7 e3       	ldi	r26, 0x37	; 55
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e7 e3       	ldi	r30, 0x37	; 55
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	48 2f       	mov	r20, r24
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	28 2f       	mov	r18, r24
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	02 2e       	mov	r0, r18
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <GPIO_setupPinDirection+0xe4>
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	0a 94       	dec	r0
     c7e:	e2 f7       	brpl	.-8      	; 0xc78 <GPIO_setupPinDirection+0xe0>
     c80:	84 2b       	or	r24, r20
     c82:	8c 93       	st	X, r24
     c84:	6c c0       	rjmp	.+216    	; 0xd5e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c86:	a7 e3       	ldi	r26, 0x37	; 55
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e7 e3       	ldi	r30, 0x37	; 55
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	48 2f       	mov	r20, r24
     c92:	8a 81       	ldd	r24, Y+2	; 0x02
     c94:	28 2f       	mov	r18, r24
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	02 2e       	mov	r0, r18
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <GPIO_setupPinDirection+0x10c>
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	0a 94       	dec	r0
     ca6:	e2 f7       	brpl	.-8      	; 0xca0 <GPIO_setupPinDirection+0x108>
     ca8:	80 95       	com	r24
     caa:	84 23       	and	r24, r20
     cac:	8c 93       	st	X, r24
     cae:	57 c0       	rjmp	.+174    	; 0xd5e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	a1 f4       	brne	.+40     	; 0xcde <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     cb6:	a4 e3       	ldi	r26, 0x34	; 52
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e4 e3       	ldi	r30, 0x34	; 52
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	48 2f       	mov	r20, r24
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	02 2e       	mov	r0, r18
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <GPIO_setupPinDirection+0x13c>
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	0a 94       	dec	r0
     cd6:	e2 f7       	brpl	.-8      	; 0xcd0 <GPIO_setupPinDirection+0x138>
     cd8:	84 2b       	or	r24, r20
     cda:	8c 93       	st	X, r24
     cdc:	40 c0       	rjmp	.+128    	; 0xd5e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     cde:	a4 e3       	ldi	r26, 0x34	; 52
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e4 e3       	ldi	r30, 0x34	; 52
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	48 2f       	mov	r20, r24
     cea:	8a 81       	ldd	r24, Y+2	; 0x02
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	02 2e       	mov	r0, r18
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <GPIO_setupPinDirection+0x164>
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	0a 94       	dec	r0
     cfe:	e2 f7       	brpl	.-8      	; 0xcf8 <GPIO_setupPinDirection+0x160>
     d00:	80 95       	com	r24
     d02:	84 23       	and	r24, r20
     d04:	8c 93       	st	X, r24
     d06:	2b c0       	rjmp	.+86     	; 0xd5e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	a1 f4       	brne	.+40     	; 0xd36 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     d0e:	a1 e3       	ldi	r26, 0x31	; 49
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e1 e3       	ldi	r30, 0x31	; 49
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <GPIO_setupPinDirection+0x194>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <GPIO_setupPinDirection+0x190>
     d30:	84 2b       	or	r24, r20
     d32:	8c 93       	st	X, r24
     d34:	14 c0       	rjmp	.+40     	; 0xd5e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     d36:	a1 e3       	ldi	r26, 0x31	; 49
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e1 e3       	ldi	r30, 0x31	; 49
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	48 2f       	mov	r20, r24
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 2e       	mov	r0, r18
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <GPIO_setupPinDirection+0x1bc>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	0a 94       	dec	r0
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <GPIO_setupPinDirection+0x1b8>
     d58:	80 95       	com	r24
     d5a:	84 23       	and	r24, r20
     d5c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <GPIO_writePin+0x6>
     d74:	00 d0       	rcall	.+0      	; 0xd76 <GPIO_writePin+0x8>
     d76:	0f 92       	push	r0
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	89 83       	std	Y+1, r24	; 0x01
     d7e:	6a 83       	std	Y+2, r22	; 0x02
     d80:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	88 30       	cpi	r24, 0x08	; 8
     d86:	08 f0       	brcs	.+2      	; 0xd8a <GPIO_writePin+0x1c>
     d88:	d5 c0       	rjmp	.+426    	; 0xf34 <GPIO_writePin+0x1c6>
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	84 30       	cpi	r24, 0x04	; 4
     d8e:	08 f0       	brcs	.+2      	; 0xd92 <GPIO_writePin+0x24>
     d90:	d1 c0       	rjmp	.+418    	; 0xf34 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	3d 83       	std	Y+5, r19	; 0x05
     d9a:	2c 83       	std	Y+4, r18	; 0x04
     d9c:	8c 81       	ldd	r24, Y+4	; 0x04
     d9e:	9d 81       	ldd	r25, Y+5	; 0x05
     da0:	81 30       	cpi	r24, 0x01	; 1
     da2:	91 05       	cpc	r25, r1
     da4:	09 f4       	brne	.+2      	; 0xda8 <GPIO_writePin+0x3a>
     da6:	43 c0       	rjmp	.+134    	; 0xe2e <GPIO_writePin+0xc0>
     da8:	2c 81       	ldd	r18, Y+4	; 0x04
     daa:	3d 81       	ldd	r19, Y+5	; 0x05
     dac:	22 30       	cpi	r18, 0x02	; 2
     dae:	31 05       	cpc	r19, r1
     db0:	2c f4       	brge	.+10     	; 0xdbc <GPIO_writePin+0x4e>
     db2:	8c 81       	ldd	r24, Y+4	; 0x04
     db4:	9d 81       	ldd	r25, Y+5	; 0x05
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	71 f0       	breq	.+28     	; 0xdd6 <GPIO_writePin+0x68>
     dba:	bc c0       	rjmp	.+376    	; 0xf34 <GPIO_writePin+0x1c6>
     dbc:	2c 81       	ldd	r18, Y+4	; 0x04
     dbe:	3d 81       	ldd	r19, Y+5	; 0x05
     dc0:	22 30       	cpi	r18, 0x02	; 2
     dc2:	31 05       	cpc	r19, r1
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <GPIO_writePin+0x5a>
     dc6:	5f c0       	rjmp	.+190    	; 0xe86 <GPIO_writePin+0x118>
     dc8:	8c 81       	ldd	r24, Y+4	; 0x04
     dca:	9d 81       	ldd	r25, Y+5	; 0x05
     dcc:	83 30       	cpi	r24, 0x03	; 3
     dce:	91 05       	cpc	r25, r1
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <GPIO_writePin+0x66>
     dd2:	85 c0       	rjmp	.+266    	; 0xede <GPIO_writePin+0x170>
     dd4:	af c0       	rjmp	.+350    	; 0xf34 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	81 30       	cpi	r24, 0x01	; 1
     dda:	a1 f4       	brne	.+40     	; 0xe04 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     ddc:	ab e3       	ldi	r26, 0x3B	; 59
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	eb e3       	ldi	r30, 0x3B	; 59
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	48 2f       	mov	r20, r24
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	02 2e       	mov	r0, r18
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <GPIO_writePin+0x8c>
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	0a 94       	dec	r0
     dfc:	e2 f7       	brpl	.-8      	; 0xdf6 <GPIO_writePin+0x88>
     dfe:	84 2b       	or	r24, r20
     e00:	8c 93       	st	X, r24
     e02:	98 c0       	rjmp	.+304    	; 0xf34 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     e04:	ab e3       	ldi	r26, 0x3B	; 59
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	eb e3       	ldi	r30, 0x3B	; 59
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	48 2f       	mov	r20, r24
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	02 2e       	mov	r0, r18
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <GPIO_writePin+0xb4>
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	0a 94       	dec	r0
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <GPIO_writePin+0xb0>
     e26:	80 95       	com	r24
     e28:	84 23       	and	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	83 c0       	rjmp	.+262    	; 0xf34 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	81 30       	cpi	r24, 0x01	; 1
     e32:	a1 f4       	brne	.+40     	; 0xe5c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     e34:	a8 e3       	ldi	r26, 0x38	; 56
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e8 e3       	ldi	r30, 0x38	; 56
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	48 2f       	mov	r20, r24
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 2e       	mov	r0, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <GPIO_writePin+0xe4>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	0a 94       	dec	r0
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <GPIO_writePin+0xe0>
     e56:	84 2b       	or	r24, r20
     e58:	8c 93       	st	X, r24
     e5a:	6c c0       	rjmp	.+216    	; 0xf34 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e5c:	a8 e3       	ldi	r26, 0x38	; 56
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e8 e3       	ldi	r30, 0x38	; 56
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	48 2f       	mov	r20, r24
     e68:	8a 81       	ldd	r24, Y+2	; 0x02
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	02 2e       	mov	r0, r18
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <GPIO_writePin+0x10c>
     e76:	88 0f       	add	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	0a 94       	dec	r0
     e7c:	e2 f7       	brpl	.-8      	; 0xe76 <GPIO_writePin+0x108>
     e7e:	80 95       	com	r24
     e80:	84 23       	and	r24, r20
     e82:	8c 93       	st	X, r24
     e84:	57 c0       	rjmp	.+174    	; 0xf34 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e86:	8b 81       	ldd	r24, Y+3	; 0x03
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	a1 f4       	brne	.+40     	; 0xeb4 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e8c:	a5 e3       	ldi	r26, 0x35	; 53
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e5 e3       	ldi	r30, 0x35	; 53
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <GPIO_writePin+0x13c>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <GPIO_writePin+0x138>
     eae:	84 2b       	or	r24, r20
     eb0:	8c 93       	st	X, r24
     eb2:	40 c0       	rjmp	.+128    	; 0xf34 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     eb4:	a5 e3       	ldi	r26, 0x35	; 53
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e5 e3       	ldi	r30, 0x35	; 53
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	48 2f       	mov	r20, r24
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 2e       	mov	r0, r18
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <GPIO_writePin+0x164>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	0a 94       	dec	r0
     ed4:	e2 f7       	brpl	.-8      	; 0xece <GPIO_writePin+0x160>
     ed6:	80 95       	com	r24
     ed8:	84 23       	and	r24, r20
     eda:	8c 93       	st	X, r24
     edc:	2b c0       	rjmp	.+86     	; 0xf34 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	a1 f4       	brne	.+40     	; 0xf0c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     ee4:	a2 e3       	ldi	r26, 0x32	; 50
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e2 e3       	ldi	r30, 0x32	; 50
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <GPIO_writePin+0x194>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <GPIO_writePin+0x190>
     f06:	84 2b       	or	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	14 c0       	rjmp	.+40     	; 0xf34 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     f0c:	a2 e3       	ldi	r26, 0x32	; 50
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e2 e3       	ldi	r30, 0x32	; 50
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <GPIO_writePin+0x1bc>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <GPIO_writePin+0x1b8>
     f2e:	80 95       	com	r24
     f30:	84 23       	and	r24, r20
     f32:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	00 d0       	rcall	.+0      	; 0xf4a <GPIO_readPin+0x6>
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <GPIO_readPin+0x8>
     f4c:	0f 92       	push	r0
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	8a 83       	std	Y+2, r24	; 0x02
     f54:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f56:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	88 30       	cpi	r24, 0x08	; 8
     f5c:	08 f0       	brcs	.+2      	; 0xf60 <GPIO_readPin+0x1c>
     f5e:	84 c0       	rjmp	.+264    	; 0x1068 <GPIO_readPin+0x124>
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	84 30       	cpi	r24, 0x04	; 4
     f64:	08 f0       	brcs	.+2      	; 0xf68 <GPIO_readPin+0x24>
     f66:	80 c0       	rjmp	.+256    	; 0x1068 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	3d 83       	std	Y+5, r19	; 0x05
     f70:	2c 83       	std	Y+4, r18	; 0x04
     f72:	4c 81       	ldd	r20, Y+4	; 0x04
     f74:	5d 81       	ldd	r21, Y+5	; 0x05
     f76:	41 30       	cpi	r20, 0x01	; 1
     f78:	51 05       	cpc	r21, r1
     f7a:	79 f1       	breq	.+94     	; 0xfda <GPIO_readPin+0x96>
     f7c:	8c 81       	ldd	r24, Y+4	; 0x04
     f7e:	9d 81       	ldd	r25, Y+5	; 0x05
     f80:	82 30       	cpi	r24, 0x02	; 2
     f82:	91 05       	cpc	r25, r1
     f84:	34 f4       	brge	.+12     	; 0xf92 <GPIO_readPin+0x4e>
     f86:	2c 81       	ldd	r18, Y+4	; 0x04
     f88:	3d 81       	ldd	r19, Y+5	; 0x05
     f8a:	21 15       	cp	r18, r1
     f8c:	31 05       	cpc	r19, r1
     f8e:	69 f0       	breq	.+26     	; 0xfaa <GPIO_readPin+0x66>
     f90:	6b c0       	rjmp	.+214    	; 0x1068 <GPIO_readPin+0x124>
     f92:	4c 81       	ldd	r20, Y+4	; 0x04
     f94:	5d 81       	ldd	r21, Y+5	; 0x05
     f96:	42 30       	cpi	r20, 0x02	; 2
     f98:	51 05       	cpc	r21, r1
     f9a:	b9 f1       	breq	.+110    	; 0x100a <GPIO_readPin+0xc6>
     f9c:	8c 81       	ldd	r24, Y+4	; 0x04
     f9e:	9d 81       	ldd	r25, Y+5	; 0x05
     fa0:	83 30       	cpi	r24, 0x03	; 3
     fa2:	91 05       	cpc	r25, r1
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <GPIO_readPin+0x64>
     fa6:	49 c0       	rjmp	.+146    	; 0x103a <GPIO_readPin+0xf6>
     fa8:	5f c0       	rjmp	.+190    	; 0x1068 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     faa:	e9 e3       	ldi	r30, 0x39	; 57
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	88 2f       	mov	r24, r24
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	a9 01       	movw	r20, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <GPIO_readPin+0x7e>
     fbe:	55 95       	asr	r21
     fc0:	47 95       	ror	r20
     fc2:	8a 95       	dec	r24
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <GPIO_readPin+0x7a>
     fc6:	ca 01       	movw	r24, r20
     fc8:	81 70       	andi	r24, 0x01	; 1
     fca:	90 70       	andi	r25, 0x00	; 0
     fcc:	88 23       	and	r24, r24
     fce:	19 f0       	breq	.+6      	; 0xfd6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	89 83       	std	Y+1, r24	; 0x01
     fd4:	49 c0       	rjmp	.+146    	; 0x1068 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fd6:	19 82       	std	Y+1, r1	; 0x01
     fd8:	47 c0       	rjmp	.+142    	; 0x1068 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     fda:	e6 e3       	ldi	r30, 0x36	; 54
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	88 2f       	mov	r24, r24
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	a9 01       	movw	r20, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <GPIO_readPin+0xae>
     fee:	55 95       	asr	r21
     ff0:	47 95       	ror	r20
     ff2:	8a 95       	dec	r24
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <GPIO_readPin+0xaa>
     ff6:	ca 01       	movw	r24, r20
     ff8:	81 70       	andi	r24, 0x01	; 1
     ffa:	90 70       	andi	r25, 0x00	; 0
     ffc:	88 23       	and	r24, r24
     ffe:	19 f0       	breq	.+6      	; 0x1006 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	31 c0       	rjmp	.+98     	; 0x1068 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1006:	19 82       	std	Y+1, r1	; 0x01
    1008:	2f c0       	rjmp	.+94     	; 0x1068 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    100a:	e3 e3       	ldi	r30, 0x33	; 51
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	88 2f       	mov	r24, r24
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	a9 01       	movw	r20, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <GPIO_readPin+0xde>
    101e:	55 95       	asr	r21
    1020:	47 95       	ror	r20
    1022:	8a 95       	dec	r24
    1024:	e2 f7       	brpl	.-8      	; 0x101e <GPIO_readPin+0xda>
    1026:	ca 01       	movw	r24, r20
    1028:	81 70       	andi	r24, 0x01	; 1
    102a:	90 70       	andi	r25, 0x00	; 0
    102c:	88 23       	and	r24, r24
    102e:	19 f0       	breq	.+6      	; 0x1036 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	89 83       	std	Y+1, r24	; 0x01
    1034:	19 c0       	rjmp	.+50     	; 0x1068 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1036:	19 82       	std	Y+1, r1	; 0x01
    1038:	17 c0       	rjmp	.+46     	; 0x1068 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    103a:	e0 e3       	ldi	r30, 0x30	; 48
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	88 2f       	mov	r24, r24
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	a9 01       	movw	r20, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <GPIO_readPin+0x10e>
    104e:	55 95       	asr	r21
    1050:	47 95       	ror	r20
    1052:	8a 95       	dec	r24
    1054:	e2 f7       	brpl	.-8      	; 0x104e <GPIO_readPin+0x10a>
    1056:	ca 01       	movw	r24, r20
    1058:	81 70       	andi	r24, 0x01	; 1
    105a:	90 70       	andi	r25, 0x00	; 0
    105c:	88 23       	and	r24, r24
    105e:	19 f0       	breq	.+6      	; 0x1066 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	01 c0       	rjmp	.+2      	; 0x1068 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1066:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1068:	89 81       	ldd	r24, Y+1	; 0x01
}
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	00 d0       	rcall	.+0      	; 0x1080 <GPIO_setupPortDirection+0x6>
    1080:	00 d0       	rcall	.+0      	; 0x1082 <GPIO_setupPortDirection+0x8>
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	89 83       	std	Y+1, r24	; 0x01
    1088:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	84 30       	cpi	r24, 0x04	; 4
    108e:	90 f5       	brcc	.+100    	; 0x10f4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	3c 83       	std	Y+4, r19	; 0x04
    1098:	2b 83       	std	Y+3, r18	; 0x03
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	81 30       	cpi	r24, 0x01	; 1
    10a0:	91 05       	cpc	r25, r1
    10a2:	d1 f0       	breq	.+52     	; 0x10d8 <GPIO_setupPortDirection+0x5e>
    10a4:	2b 81       	ldd	r18, Y+3	; 0x03
    10a6:	3c 81       	ldd	r19, Y+4	; 0x04
    10a8:	22 30       	cpi	r18, 0x02	; 2
    10aa:	31 05       	cpc	r19, r1
    10ac:	2c f4       	brge	.+10     	; 0x10b8 <GPIO_setupPortDirection+0x3e>
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	61 f0       	breq	.+24     	; 0x10ce <GPIO_setupPortDirection+0x54>
    10b6:	1e c0       	rjmp	.+60     	; 0x10f4 <GPIO_setupPortDirection+0x7a>
    10b8:	2b 81       	ldd	r18, Y+3	; 0x03
    10ba:	3c 81       	ldd	r19, Y+4	; 0x04
    10bc:	22 30       	cpi	r18, 0x02	; 2
    10be:	31 05       	cpc	r19, r1
    10c0:	81 f0       	breq	.+32     	; 0x10e2 <GPIO_setupPortDirection+0x68>
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	9c 81       	ldd	r25, Y+4	; 0x04
    10c6:	83 30       	cpi	r24, 0x03	; 3
    10c8:	91 05       	cpc	r25, r1
    10ca:	81 f0       	breq	.+32     	; 0x10ec <GPIO_setupPortDirection+0x72>
    10cc:	13 c0       	rjmp	.+38     	; 0x10f4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    10ce:	ea e3       	ldi	r30, 0x3A	; 58
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	80 83       	st	Z, r24
    10d6:	0e c0       	rjmp	.+28     	; 0x10f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    10d8:	e7 e3       	ldi	r30, 0x37	; 55
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	80 83       	st	Z, r24
    10e0:	09 c0       	rjmp	.+18     	; 0x10f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    10e2:	e4 e3       	ldi	r30, 0x34	; 52
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	80 83       	st	Z, r24
    10ea:	04 c0       	rjmp	.+8      	; 0x10f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    10ec:	e1 e3       	ldi	r30, 0x31	; 49
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	80 83       	st	Z, r24
			break;
		}
	}
}
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	00 d0       	rcall	.+0      	; 0x1108 <GPIO_writePort+0x6>
    1108:	00 d0       	rcall	.+0      	; 0x110a <GPIO_writePort+0x8>
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	89 83       	std	Y+1, r24	; 0x01
    1110:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	84 30       	cpi	r24, 0x04	; 4
    1116:	90 f5       	brcc	.+100    	; 0x117c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	3c 83       	std	Y+4, r19	; 0x04
    1120:	2b 83       	std	Y+3, r18	; 0x03
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	9c 81       	ldd	r25, Y+4	; 0x04
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	91 05       	cpc	r25, r1
    112a:	d1 f0       	breq	.+52     	; 0x1160 <GPIO_writePort+0x5e>
    112c:	2b 81       	ldd	r18, Y+3	; 0x03
    112e:	3c 81       	ldd	r19, Y+4	; 0x04
    1130:	22 30       	cpi	r18, 0x02	; 2
    1132:	31 05       	cpc	r19, r1
    1134:	2c f4       	brge	.+10     	; 0x1140 <GPIO_writePort+0x3e>
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	9c 81       	ldd	r25, Y+4	; 0x04
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	61 f0       	breq	.+24     	; 0x1156 <GPIO_writePort+0x54>
    113e:	1e c0       	rjmp	.+60     	; 0x117c <GPIO_writePort+0x7a>
    1140:	2b 81       	ldd	r18, Y+3	; 0x03
    1142:	3c 81       	ldd	r19, Y+4	; 0x04
    1144:	22 30       	cpi	r18, 0x02	; 2
    1146:	31 05       	cpc	r19, r1
    1148:	81 f0       	breq	.+32     	; 0x116a <GPIO_writePort+0x68>
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	83 30       	cpi	r24, 0x03	; 3
    1150:	91 05       	cpc	r25, r1
    1152:	81 f0       	breq	.+32     	; 0x1174 <GPIO_writePort+0x72>
    1154:	13 c0       	rjmp	.+38     	; 0x117c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1156:	eb e3       	ldi	r30, 0x3B	; 59
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	80 83       	st	Z, r24
    115e:	0e c0       	rjmp	.+28     	; 0x117c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1160:	e8 e3       	ldi	r30, 0x38	; 56
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	80 83       	st	Z, r24
    1168:	09 c0       	rjmp	.+18     	; 0x117c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    116a:	e5 e3       	ldi	r30, 0x35	; 53
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	80 83       	st	Z, r24
    1172:	04 c0       	rjmp	.+8      	; 0x117c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1174:	e2 e3       	ldi	r30, 0x32	; 50
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	80 83       	st	Z, r24
			break;
		}
	}
}
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	00 d0       	rcall	.+0      	; 0x1190 <GPIO_readPort+0x6>
    1190:	00 d0       	rcall	.+0      	; 0x1192 <GPIO_readPort+0x8>
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1198:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	90 f5       	brcc	.+100    	; 0x1204 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	3c 83       	std	Y+4, r19	; 0x04
    11a8:	2b 83       	std	Y+3, r18	; 0x03
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	9c 81       	ldd	r25, Y+4	; 0x04
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	91 05       	cpc	r25, r1
    11b2:	d1 f0       	breq	.+52     	; 0x11e8 <GPIO_readPort+0x5e>
    11b4:	2b 81       	ldd	r18, Y+3	; 0x03
    11b6:	3c 81       	ldd	r19, Y+4	; 0x04
    11b8:	22 30       	cpi	r18, 0x02	; 2
    11ba:	31 05       	cpc	r19, r1
    11bc:	2c f4       	brge	.+10     	; 0x11c8 <GPIO_readPort+0x3e>
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	9c 81       	ldd	r25, Y+4	; 0x04
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	61 f0       	breq	.+24     	; 0x11de <GPIO_readPort+0x54>
    11c6:	1e c0       	rjmp	.+60     	; 0x1204 <GPIO_readPort+0x7a>
    11c8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ca:	3c 81       	ldd	r19, Y+4	; 0x04
    11cc:	22 30       	cpi	r18, 0x02	; 2
    11ce:	31 05       	cpc	r19, r1
    11d0:	81 f0       	breq	.+32     	; 0x11f2 <GPIO_readPort+0x68>
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	83 30       	cpi	r24, 0x03	; 3
    11d8:	91 05       	cpc	r25, r1
    11da:	81 f0       	breq	.+32     	; 0x11fc <GPIO_readPort+0x72>
    11dc:	13 c0       	rjmp	.+38     	; 0x1204 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    11de:	e9 e3       	ldi	r30, 0x39	; 57
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	0e c0       	rjmp	.+28     	; 0x1204 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    11e8:	e6 e3       	ldi	r30, 0x36	; 54
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	09 c0       	rjmp	.+18     	; 0x1204 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11f2:	e3 e3       	ldi	r30, 0x33	; 51
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	04 c0       	rjmp	.+8      	; 0x1204 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11fc:	e0 e3       	ldi	r30, 0x30	; 48
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1204:	89 81       	ldd	r24, Y+1	; 0x01
}
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	00 d0       	rcall	.+0      	; 0x121a <KEYPAD_getPressedKey+0x6>
    121a:	0f 92       	push	r0
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1220:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1222:	1b 82       	std	Y+3, r1	; 0x03
    1224:	43 c0       	rjmp	.+134    	; 0x12ac <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	60 e0       	ldi	r22, 0x00	; 0
    122a:	0e 94 3d 08 	call	0x107a	; 0x107a <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	98 2f       	mov	r25, r24
    1232:	9c 5f       	subi	r25, 0xFC	; 252
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	69 2f       	mov	r22, r25
    1238:	41 e0       	ldi	r20, 0x01	; 1
    123a:	0e 94 cc 05 	call	0xb98	; 0xb98 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	88 2f       	mov	r24, r24
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	9c 01       	movw	r18, r24
    1246:	2c 5f       	subi	r18, 0xFC	; 252
    1248:	3f 4f       	sbci	r19, 0xFF	; 255
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <KEYPAD_getPressedKey+0x40>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	2a 95       	dec	r18
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <KEYPAD_getPressedKey+0x3c>
    1258:	80 95       	com	r24
    125a:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	69 81       	ldd	r22, Y+1	; 0x01
    1260:	0e 94 81 08 	call	0x1102	; 0x1102 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1264:	1a 82       	std	Y+2, r1	; 0x02
    1266:	1c c0       	rjmp	.+56     	; 0x12a0 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	6a 81       	ldd	r22, Y+2	; 0x02
    126c:	0e 94 a2 07 	call	0xf44	; 0xf44 <GPIO_readPin>
    1270:	88 23       	and	r24, r24
    1272:	99 f4       	brne	.+38     	; 0x129a <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	88 2f       	mov	r24, r24
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	98 2f       	mov	r25, r24
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	89 0f       	add	r24, r25
    1288:	8f 5f       	subi	r24, 0xFF	; 255
    128a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	8f 5f       	subi	r24, 0xFF	; 255
    129e:	8a 83       	std	Y+2, r24	; 0x02
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	84 30       	cpi	r24, 0x04	; 4
    12a4:	08 f3       	brcs	.-62     	; 0x1268 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	8f 5f       	subi	r24, 0xFF	; 255
    12aa:	8b 83       	std	Y+3, r24	; 0x03
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	84 30       	cpi	r24, 0x04	; 4
    12b0:	08 f4       	brcc	.+2      	; 0x12b4 <KEYPAD_getPressedKey+0xa0>
    12b2:	b9 cf       	rjmp	.-142    	; 0x1226 <KEYPAD_getPressedKey+0x12>
    12b4:	b6 cf       	rjmp	.-148    	; 0x1222 <KEYPAD_getPressedKey+0xe>

000012b6 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <KEYPAD_4x4_adjustKeyNumber+0x6>
    12bc:	00 d0       	rcall	.+0      	; 0x12be <KEYPAD_4x4_adjustKeyNumber+0x8>
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    12c4:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	3c 83       	std	Y+4, r19	; 0x04
    12ce:	2b 83       	std	Y+3, r18	; 0x03
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	88 30       	cpi	r24, 0x08	; 8
    12d6:	91 05       	cpc	r25, r1
    12d8:	09 f4       	brne	.+2      	; 0x12dc <KEYPAD_4x4_adjustKeyNumber+0x26>
    12da:	70 c0       	rjmp	.+224    	; 0x13bc <KEYPAD_4x4_adjustKeyNumber+0x106>
    12dc:	2b 81       	ldd	r18, Y+3	; 0x03
    12de:	3c 81       	ldd	r19, Y+4	; 0x04
    12e0:	29 30       	cpi	r18, 0x09	; 9
    12e2:	31 05       	cpc	r19, r1
    12e4:	5c f5       	brge	.+86     	; 0x133c <KEYPAD_4x4_adjustKeyNumber+0x86>
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	84 30       	cpi	r24, 0x04	; 4
    12ec:	91 05       	cpc	r25, r1
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    12f0:	59 c0       	rjmp	.+178    	; 0x13a4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    12f2:	2b 81       	ldd	r18, Y+3	; 0x03
    12f4:	3c 81       	ldd	r19, Y+4	; 0x04
    12f6:	25 30       	cpi	r18, 0x05	; 5
    12f8:	31 05       	cpc	r19, r1
    12fa:	9c f4       	brge	.+38     	; 0x1322 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1300:	82 30       	cpi	r24, 0x02	; 2
    1302:	91 05       	cpc	r25, r1
    1304:	09 f4       	brne	.+2      	; 0x1308 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1306:	48 c0       	rjmp	.+144    	; 0x1398 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1308:	2b 81       	ldd	r18, Y+3	; 0x03
    130a:	3c 81       	ldd	r19, Y+4	; 0x04
    130c:	23 30       	cpi	r18, 0x03	; 3
    130e:	31 05       	cpc	r19, r1
    1310:	0c f0       	brlt	.+2      	; 0x1314 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1312:	45 c0       	rjmp	.+138    	; 0x139e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	91 05       	cpc	r25, r1
    131c:	09 f4       	brne	.+2      	; 0x1320 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    131e:	39 c0       	rjmp	.+114    	; 0x1392 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1320:	68 c0       	rjmp	.+208    	; 0x13f2 <KEYPAD_4x4_adjustKeyNumber+0x13c>
    1322:	2b 81       	ldd	r18, Y+3	; 0x03
    1324:	3c 81       	ldd	r19, Y+4	; 0x04
    1326:	26 30       	cpi	r18, 0x06	; 6
    1328:	31 05       	cpc	r19, r1
    132a:	09 f4       	brne	.+2      	; 0x132e <KEYPAD_4x4_adjustKeyNumber+0x78>
    132c:	41 c0       	rjmp	.+130    	; 0x13b0 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	9c 81       	ldd	r25, Y+4	; 0x04
    1332:	87 30       	cpi	r24, 0x07	; 7
    1334:	91 05       	cpc	r25, r1
    1336:	0c f0       	brlt	.+2      	; 0x133a <KEYPAD_4x4_adjustKeyNumber+0x84>
    1338:	3e c0       	rjmp	.+124    	; 0x13b6 <KEYPAD_4x4_adjustKeyNumber+0x100>
    133a:	37 c0       	rjmp	.+110    	; 0x13aa <KEYPAD_4x4_adjustKeyNumber+0xf4>
    133c:	2b 81       	ldd	r18, Y+3	; 0x03
    133e:	3c 81       	ldd	r19, Y+4	; 0x04
    1340:	2c 30       	cpi	r18, 0x0C	; 12
    1342:	31 05       	cpc	r19, r1
    1344:	09 f4       	brne	.+2      	; 0x1348 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1346:	46 c0       	rjmp	.+140    	; 0x13d4 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	8d 30       	cpi	r24, 0x0D	; 13
    134e:	91 05       	cpc	r25, r1
    1350:	5c f4       	brge	.+22     	; 0x1368 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1352:	2b 81       	ldd	r18, Y+3	; 0x03
    1354:	3c 81       	ldd	r19, Y+4	; 0x04
    1356:	2a 30       	cpi	r18, 0x0A	; 10
    1358:	31 05       	cpc	r19, r1
    135a:	b1 f1       	breq	.+108    	; 0x13c8 <KEYPAD_4x4_adjustKeyNumber+0x112>
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	9c 81       	ldd	r25, Y+4	; 0x04
    1360:	8b 30       	cpi	r24, 0x0B	; 11
    1362:	91 05       	cpc	r25, r1
    1364:	a4 f5       	brge	.+104    	; 0x13ce <KEYPAD_4x4_adjustKeyNumber+0x118>
    1366:	2d c0       	rjmp	.+90     	; 0x13c2 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1368:	2b 81       	ldd	r18, Y+3	; 0x03
    136a:	3c 81       	ldd	r19, Y+4	; 0x04
    136c:	2e 30       	cpi	r18, 0x0E	; 14
    136e:	31 05       	cpc	r19, r1
    1370:	b9 f1       	breq	.+110    	; 0x13e0 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	9c 81       	ldd	r25, Y+4	; 0x04
    1376:	8e 30       	cpi	r24, 0x0E	; 14
    1378:	91 05       	cpc	r25, r1
    137a:	7c f1       	brlt	.+94     	; 0x13da <KEYPAD_4x4_adjustKeyNumber+0x124>
    137c:	2b 81       	ldd	r18, Y+3	; 0x03
    137e:	3c 81       	ldd	r19, Y+4	; 0x04
    1380:	2f 30       	cpi	r18, 0x0F	; 15
    1382:	31 05       	cpc	r19, r1
    1384:	81 f1       	breq	.+96     	; 0x13e6 <KEYPAD_4x4_adjustKeyNumber+0x130>
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	9c 81       	ldd	r25, Y+4	; 0x04
    138a:	80 31       	cpi	r24, 0x10	; 16
    138c:	91 05       	cpc	r25, r1
    138e:	71 f1       	breq	.+92     	; 0x13ec <KEYPAD_4x4_adjustKeyNumber+0x136>
    1390:	30 c0       	rjmp	.+96     	; 0x13f2 <KEYPAD_4x4_adjustKeyNumber+0x13c>
	{
		case 1: keypad_button = '7';
    1392:	87 e3       	ldi	r24, 0x37	; 55
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	2f c0       	rjmp	.+94     	; 0x13f6 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 2: keypad_button = '8';
    1398:	88 e3       	ldi	r24, 0x38	; 56
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	2c c0       	rjmp	.+88     	; 0x13f6 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 3: keypad_button = '9';
    139e:	89 e3       	ldi	r24, 0x39	; 57
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	29 c0       	rjmp	.+82     	; 0x13f6 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    13a4:	85 e2       	ldi	r24, 0x25	; 37
    13a6:	89 83       	std	Y+1, r24	; 0x01
    13a8:	26 c0       	rjmp	.+76     	; 0x13f6 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 5: keypad_button = '4';
    13aa:	84 e3       	ldi	r24, 0x34	; 52
    13ac:	89 83       	std	Y+1, r24	; 0x01
    13ae:	23 c0       	rjmp	.+70     	; 0x13f6 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 6: keypad_button = '5';
    13b0:	85 e3       	ldi	r24, 0x35	; 53
    13b2:	89 83       	std	Y+1, r24	; 0x01
    13b4:	20 c0       	rjmp	.+64     	; 0x13f6 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 7: keypad_button = '6';
    13b6:	86 e3       	ldi	r24, 0x36	; 54
    13b8:	89 83       	std	Y+1, r24	; 0x01
    13ba:	1d c0       	rjmp	.+58     	; 0x13f6 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    13bc:	8a e2       	ldi	r24, 0x2A	; 42
    13be:	89 83       	std	Y+1, r24	; 0x01
    13c0:	1a c0       	rjmp	.+52     	; 0x13f6 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;		
		case 9: keypad_button = '1';
    13c2:	81 e3       	ldi	r24, 0x31	; 49
    13c4:	89 83       	std	Y+1, r24	; 0x01
    13c6:	17 c0       	rjmp	.+46     	; 0x13f6 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 10: keypad_button = '2';
    13c8:	82 e3       	ldi	r24, 0x32	; 50
    13ca:	89 83       	std	Y+1, r24	; 0x01
    13cc:	14 c0       	rjmp	.+40     	; 0x13f6 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 11: keypad_button = '3';
    13ce:	83 e3       	ldi	r24, 0x33	; 51
    13d0:	89 83       	std	Y+1, r24	; 0x01
    13d2:	11 c0       	rjmp	.+34     	; 0x13f6 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    13d4:	8d e2       	ldi	r24, 0x2D	; 45
    13d6:	89 83       	std	Y+1, r24	; 0x01
    13d8:	0e c0       	rjmp	.+28     	; 0x13f6 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 13: keypad_button = '\n';  /* ASCII of Enter */
    13da:	8a e0       	ldi	r24, 0x0A	; 10
    13dc:	89 83       	std	Y+1, r24	; 0x01
    13de:	0b c0       	rjmp	.+22     	; 0x13f6 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;			
		case 14: keypad_button = '0';
    13e0:	80 e3       	ldi	r24, 0x30	; 48
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	08 c0       	rjmp	.+16     	; 0x13f6 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    13e6:	8d e3       	ldi	r24, 0x3D	; 61
    13e8:	89 83       	std	Y+1, r24	; 0x01
    13ea:	05 c0       	rjmp	.+10     	; 0x13f6 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    13ec:	8b e2       	ldi	r24, 0x2B	; 43
    13ee:	89 83       	std	Y+1, r24	; 0x01
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		default: keypad_button = button_number;
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
} 
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    140e:	82 e0       	ldi	r24, 0x02	; 2
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	41 e0       	ldi	r20, 0x01	; 1
    1414:	0e 94 cc 05 	call	0xb98	; 0xb98 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1418:	82 e0       	ldi	r24, 0x02	; 2
    141a:	61 e0       	ldi	r22, 0x01	; 1
    141c:	41 e0       	ldi	r20, 0x01	; 1
    141e:	0e 94 cc 05 	call	0xb98	; 0xb98 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1422:	82 e0       	ldi	r24, 0x02	; 2
    1424:	62 e0       	ldi	r22, 0x02	; 2
    1426:	41 e0       	ldi	r20, 0x01	; 1
    1428:	0e 94 cc 05 	call	0xb98	; 0xb98 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	6f ef       	ldi	r22, 0xFF	; 255
    1430:	0e 94 3d 08 	call	0x107a	; 0x107a <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1434:	88 e3       	ldi	r24, 0x38	; 56
    1436:	0e 94 26 0a 	call	0x144c	; 0x144c <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    143a:	8c e0       	ldi	r24, 0x0C	; 12
    143c:	0e 94 26 0a 	call	0x144c	; 0x144c <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	0e 94 26 0a 	call	0x144c	; 0x144c <LCD_sendCommand>
}
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	e9 97       	sbiw	r28, 0x39	; 57
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1462:	82 e0       	ldi	r24, 0x02	; 2
    1464:	60 e0       	ldi	r22, 0x00	; 0
    1466:	40 e0       	ldi	r20, 0x00	; 0
    1468:	0e 94 b7 06 	call	0xd6e	; 0xd6e <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    146c:	82 e0       	ldi	r24, 0x02	; 2
    146e:	61 e0       	ldi	r22, 0x01	; 1
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	0e 94 b7 06 	call	0xd6e	; 0xd6e <GPIO_writePin>
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	a0 e8       	ldi	r26, 0x80	; 128
    147c:	bf e3       	ldi	r27, 0x3F	; 63
    147e:	8d ab       	std	Y+53, r24	; 0x35
    1480:	9e ab       	std	Y+54, r25	; 0x36
    1482:	af ab       	std	Y+55, r26	; 0x37
    1484:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1486:	6d a9       	ldd	r22, Y+53	; 0x35
    1488:	7e a9       	ldd	r23, Y+54	; 0x36
    148a:	8f a9       	ldd	r24, Y+55	; 0x37
    148c:	98 ad       	ldd	r25, Y+56	; 0x38
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	4a e7       	ldi	r20, 0x7A	; 122
    1494:	53 e4       	ldi	r21, 0x43	; 67
    1496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	89 ab       	std	Y+49, r24	; 0x31
    14a0:	9a ab       	std	Y+50, r25	; 0x32
    14a2:	ab ab       	std	Y+51, r26	; 0x33
    14a4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14a6:	69 a9       	ldd	r22, Y+49	; 0x31
    14a8:	7a a9       	ldd	r23, Y+50	; 0x32
    14aa:	8b a9       	ldd	r24, Y+51	; 0x33
    14ac:	9c a9       	ldd	r25, Y+52	; 0x34
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	40 e8       	ldi	r20, 0x80	; 128
    14b4:	5f e3       	ldi	r21, 0x3F	; 63
    14b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ba:	88 23       	and	r24, r24
    14bc:	2c f4       	brge	.+10     	; 0x14c8 <LCD_sendCommand+0x7c>
		__ticks = 1;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	98 ab       	std	Y+48, r25	; 0x30
    14c4:	8f a7       	std	Y+47, r24	; 0x2f
    14c6:	3f c0       	rjmp	.+126    	; 0x1546 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    14c8:	69 a9       	ldd	r22, Y+49	; 0x31
    14ca:	7a a9       	ldd	r23, Y+50	; 0x32
    14cc:	8b a9       	ldd	r24, Y+51	; 0x33
    14ce:	9c a9       	ldd	r25, Y+52	; 0x34
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	3f ef       	ldi	r19, 0xFF	; 255
    14d4:	4f e7       	ldi	r20, 0x7F	; 127
    14d6:	57 e4       	ldi	r21, 0x47	; 71
    14d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14dc:	18 16       	cp	r1, r24
    14de:	4c f5       	brge	.+82     	; 0x1532 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e0:	6d a9       	ldd	r22, Y+53	; 0x35
    14e2:	7e a9       	ldd	r23, Y+54	; 0x36
    14e4:	8f a9       	ldd	r24, Y+55	; 0x37
    14e6:	98 ad       	ldd	r25, Y+56	; 0x38
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	40 e2       	ldi	r20, 0x20	; 32
    14ee:	51 e4       	ldi	r21, 0x41	; 65
    14f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	bc 01       	movw	r22, r24
    14fa:	cd 01       	movw	r24, r26
    14fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	98 ab       	std	Y+48, r25	; 0x30
    1506:	8f a7       	std	Y+47, r24	; 0x2f
    1508:	0f c0       	rjmp	.+30     	; 0x1528 <LCD_sendCommand+0xdc>
    150a:	89 e1       	ldi	r24, 0x19	; 25
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	9e a7       	std	Y+46, r25	; 0x2e
    1510:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1512:	8d a5       	ldd	r24, Y+45	; 0x2d
    1514:	9e a5       	ldd	r25, Y+46	; 0x2e
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	f1 f7       	brne	.-4      	; 0x1516 <LCD_sendCommand+0xca>
    151a:	9e a7       	std	Y+46, r25	; 0x2e
    151c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    151e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1520:	98 a9       	ldd	r25, Y+48	; 0x30
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	98 ab       	std	Y+48, r25	; 0x30
    1526:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1528:	8f a5       	ldd	r24, Y+47	; 0x2f
    152a:	98 a9       	ldd	r25, Y+48	; 0x30
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	69 f7       	brne	.-38     	; 0x150a <LCD_sendCommand+0xbe>
    1530:	14 c0       	rjmp	.+40     	; 0x155a <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1532:	69 a9       	ldd	r22, Y+49	; 0x31
    1534:	7a a9       	ldd	r23, Y+50	; 0x32
    1536:	8b a9       	ldd	r24, Y+51	; 0x33
    1538:	9c a9       	ldd	r25, Y+52	; 0x34
    153a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	98 ab       	std	Y+48, r25	; 0x30
    1544:	8f a7       	std	Y+47, r24	; 0x2f
    1546:	8f a5       	ldd	r24, Y+47	; 0x2f
    1548:	98 a9       	ldd	r25, Y+48	; 0x30
    154a:	9c a7       	std	Y+44, r25	; 0x2c
    154c:	8b a7       	std	Y+43, r24	; 0x2b
    154e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1550:	9c a5       	ldd	r25, Y+44	; 0x2c
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <LCD_sendCommand+0x106>
    1556:	9c a7       	std	Y+44, r25	; 0x2c
    1558:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    155a:	82 e0       	ldi	r24, 0x02	; 2
    155c:	62 e0       	ldi	r22, 0x02	; 2
    155e:	41 e0       	ldi	r20, 0x01	; 1
    1560:	0e 94 b7 06 	call	0xd6e	; 0xd6e <GPIO_writePin>
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	a0 e8       	ldi	r26, 0x80	; 128
    156a:	bf e3       	ldi	r27, 0x3F	; 63
    156c:	8f a3       	std	Y+39, r24	; 0x27
    156e:	98 a7       	std	Y+40, r25	; 0x28
    1570:	a9 a7       	std	Y+41, r26	; 0x29
    1572:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1574:	6f a1       	ldd	r22, Y+39	; 0x27
    1576:	78 a5       	ldd	r23, Y+40	; 0x28
    1578:	89 a5       	ldd	r24, Y+41	; 0x29
    157a:	9a a5       	ldd	r25, Y+42	; 0x2a
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	4a e7       	ldi	r20, 0x7A	; 122
    1582:	53 e4       	ldi	r21, 0x43	; 67
    1584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	8b a3       	std	Y+35, r24	; 0x23
    158e:	9c a3       	std	Y+36, r25	; 0x24
    1590:	ad a3       	std	Y+37, r26	; 0x25
    1592:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1594:	6b a1       	ldd	r22, Y+35	; 0x23
    1596:	7c a1       	ldd	r23, Y+36	; 0x24
    1598:	8d a1       	ldd	r24, Y+37	; 0x25
    159a:	9e a1       	ldd	r25, Y+38	; 0x26
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	40 e8       	ldi	r20, 0x80	; 128
    15a2:	5f e3       	ldi	r21, 0x3F	; 63
    15a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15a8:	88 23       	and	r24, r24
    15aa:	2c f4       	brge	.+10     	; 0x15b6 <LCD_sendCommand+0x16a>
		__ticks = 1;
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	9a a3       	std	Y+34, r25	; 0x22
    15b2:	89 a3       	std	Y+33, r24	; 0x21
    15b4:	3f c0       	rjmp	.+126    	; 0x1634 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    15b6:	6b a1       	ldd	r22, Y+35	; 0x23
    15b8:	7c a1       	ldd	r23, Y+36	; 0x24
    15ba:	8d a1       	ldd	r24, Y+37	; 0x25
    15bc:	9e a1       	ldd	r25, Y+38	; 0x26
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	3f ef       	ldi	r19, 0xFF	; 255
    15c2:	4f e7       	ldi	r20, 0x7F	; 127
    15c4:	57 e4       	ldi	r21, 0x47	; 71
    15c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ca:	18 16       	cp	r1, r24
    15cc:	4c f5       	brge	.+82     	; 0x1620 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ce:	6f a1       	ldd	r22, Y+39	; 0x27
    15d0:	78 a5       	ldd	r23, Y+40	; 0x28
    15d2:	89 a5       	ldd	r24, Y+41	; 0x29
    15d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	40 e2       	ldi	r20, 0x20	; 32
    15dc:	51 e4       	ldi	r21, 0x41	; 65
    15de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	bc 01       	movw	r22, r24
    15e8:	cd 01       	movw	r24, r26
    15ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	9a a3       	std	Y+34, r25	; 0x22
    15f4:	89 a3       	std	Y+33, r24	; 0x21
    15f6:	0f c0       	rjmp	.+30     	; 0x1616 <LCD_sendCommand+0x1ca>
    15f8:	89 e1       	ldi	r24, 0x19	; 25
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	98 a3       	std	Y+32, r25	; 0x20
    15fe:	8f 8f       	std	Y+31, r24	; 0x1f
    1600:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1602:	98 a1       	ldd	r25, Y+32	; 0x20
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	f1 f7       	brne	.-4      	; 0x1604 <LCD_sendCommand+0x1b8>
    1608:	98 a3       	std	Y+32, r25	; 0x20
    160a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160c:	89 a1       	ldd	r24, Y+33	; 0x21
    160e:	9a a1       	ldd	r25, Y+34	; 0x22
    1610:	01 97       	sbiw	r24, 0x01	; 1
    1612:	9a a3       	std	Y+34, r25	; 0x22
    1614:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1616:	89 a1       	ldd	r24, Y+33	; 0x21
    1618:	9a a1       	ldd	r25, Y+34	; 0x22
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	69 f7       	brne	.-38     	; 0x15f8 <LCD_sendCommand+0x1ac>
    161e:	14 c0       	rjmp	.+40     	; 0x1648 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1620:	6b a1       	ldd	r22, Y+35	; 0x23
    1622:	7c a1       	ldd	r23, Y+36	; 0x24
    1624:	8d a1       	ldd	r24, Y+37	; 0x25
    1626:	9e a1       	ldd	r25, Y+38	; 0x26
    1628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	9a a3       	std	Y+34, r25	; 0x22
    1632:	89 a3       	std	Y+33, r24	; 0x21
    1634:	89 a1       	ldd	r24, Y+33	; 0x21
    1636:	9a a1       	ldd	r25, Y+34	; 0x22
    1638:	9e 8f       	std	Y+30, r25	; 0x1e
    163a:	8d 8f       	std	Y+29, r24	; 0x1d
    163c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    163e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	f1 f7       	brne	.-4      	; 0x1640 <LCD_sendCommand+0x1f4>
    1644:	9e 8f       	std	Y+30, r25	; 0x1e
    1646:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	69 ad       	ldd	r22, Y+57	; 0x39
    164c:	0e 94 81 08 	call	0x1102	; 0x1102 <GPIO_writePort>
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	a0 e8       	ldi	r26, 0x80	; 128
    1656:	bf e3       	ldi	r27, 0x3F	; 63
    1658:	89 8f       	std	Y+25, r24	; 0x19
    165a:	9a 8f       	std	Y+26, r25	; 0x1a
    165c:	ab 8f       	std	Y+27, r26	; 0x1b
    165e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1660:	69 8d       	ldd	r22, Y+25	; 0x19
    1662:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1664:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1666:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	4a e7       	ldi	r20, 0x7A	; 122
    166e:	53 e4       	ldi	r21, 0x43	; 67
    1670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	8d 8b       	std	Y+21, r24	; 0x15
    167a:	9e 8b       	std	Y+22, r25	; 0x16
    167c:	af 8b       	std	Y+23, r26	; 0x17
    167e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1680:	6d 89       	ldd	r22, Y+21	; 0x15
    1682:	7e 89       	ldd	r23, Y+22	; 0x16
    1684:	8f 89       	ldd	r24, Y+23	; 0x17
    1686:	98 8d       	ldd	r25, Y+24	; 0x18
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	40 e8       	ldi	r20, 0x80	; 128
    168e:	5f e3       	ldi	r21, 0x3F	; 63
    1690:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1694:	88 23       	and	r24, r24
    1696:	2c f4       	brge	.+10     	; 0x16a2 <LCD_sendCommand+0x256>
		__ticks = 1;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	9c 8b       	std	Y+20, r25	; 0x14
    169e:	8b 8b       	std	Y+19, r24	; 0x13
    16a0:	3f c0       	rjmp	.+126    	; 0x1720 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    16a2:	6d 89       	ldd	r22, Y+21	; 0x15
    16a4:	7e 89       	ldd	r23, Y+22	; 0x16
    16a6:	8f 89       	ldd	r24, Y+23	; 0x17
    16a8:	98 8d       	ldd	r25, Y+24	; 0x18
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	3f ef       	ldi	r19, 0xFF	; 255
    16ae:	4f e7       	ldi	r20, 0x7F	; 127
    16b0:	57 e4       	ldi	r21, 0x47	; 71
    16b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16b6:	18 16       	cp	r1, r24
    16b8:	4c f5       	brge	.+82     	; 0x170c <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ba:	69 8d       	ldd	r22, Y+25	; 0x19
    16bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	40 e2       	ldi	r20, 0x20	; 32
    16c8:	51 e4       	ldi	r21, 0x41	; 65
    16ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	bc 01       	movw	r22, r24
    16d4:	cd 01       	movw	r24, r26
    16d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	9c 8b       	std	Y+20, r25	; 0x14
    16e0:	8b 8b       	std	Y+19, r24	; 0x13
    16e2:	0f c0       	rjmp	.+30     	; 0x1702 <LCD_sendCommand+0x2b6>
    16e4:	89 e1       	ldi	r24, 0x19	; 25
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	9a 8b       	std	Y+18, r25	; 0x12
    16ea:	89 8b       	std	Y+17, r24	; 0x11
    16ec:	89 89       	ldd	r24, Y+17	; 0x11
    16ee:	9a 89       	ldd	r25, Y+18	; 0x12
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <LCD_sendCommand+0x2a4>
    16f4:	9a 8b       	std	Y+18, r25	; 0x12
    16f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f8:	8b 89       	ldd	r24, Y+19	; 0x13
    16fa:	9c 89       	ldd	r25, Y+20	; 0x14
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	9c 8b       	std	Y+20, r25	; 0x14
    1700:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1702:	8b 89       	ldd	r24, Y+19	; 0x13
    1704:	9c 89       	ldd	r25, Y+20	; 0x14
    1706:	00 97       	sbiw	r24, 0x00	; 0
    1708:	69 f7       	brne	.-38     	; 0x16e4 <LCD_sendCommand+0x298>
    170a:	14 c0       	rjmp	.+40     	; 0x1734 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    170c:	6d 89       	ldd	r22, Y+21	; 0x15
    170e:	7e 89       	ldd	r23, Y+22	; 0x16
    1710:	8f 89       	ldd	r24, Y+23	; 0x17
    1712:	98 8d       	ldd	r25, Y+24	; 0x18
    1714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	9c 8b       	std	Y+20, r25	; 0x14
    171e:	8b 8b       	std	Y+19, r24	; 0x13
    1720:	8b 89       	ldd	r24, Y+19	; 0x13
    1722:	9c 89       	ldd	r25, Y+20	; 0x14
    1724:	98 8b       	std	Y+16, r25	; 0x10
    1726:	8f 87       	std	Y+15, r24	; 0x0f
    1728:	8f 85       	ldd	r24, Y+15	; 0x0f
    172a:	98 89       	ldd	r25, Y+16	; 0x10
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	f1 f7       	brne	.-4      	; 0x172c <LCD_sendCommand+0x2e0>
    1730:	98 8b       	std	Y+16, r25	; 0x10
    1732:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1734:	82 e0       	ldi	r24, 0x02	; 2
    1736:	62 e0       	ldi	r22, 0x02	; 2
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <GPIO_writePin>
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	a0 e8       	ldi	r26, 0x80	; 128
    1744:	bf e3       	ldi	r27, 0x3F	; 63
    1746:	8b 87       	std	Y+11, r24	; 0x0b
    1748:	9c 87       	std	Y+12, r25	; 0x0c
    174a:	ad 87       	std	Y+13, r26	; 0x0d
    174c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    174e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1750:	7c 85       	ldd	r23, Y+12	; 0x0c
    1752:	8d 85       	ldd	r24, Y+13	; 0x0d
    1754:	9e 85       	ldd	r25, Y+14	; 0x0e
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	4a e7       	ldi	r20, 0x7A	; 122
    175c:	53 e4       	ldi	r21, 0x43	; 67
    175e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	8f 83       	std	Y+7, r24	; 0x07
    1768:	98 87       	std	Y+8, r25	; 0x08
    176a:	a9 87       	std	Y+9, r26	; 0x09
    176c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    176e:	6f 81       	ldd	r22, Y+7	; 0x07
    1770:	78 85       	ldd	r23, Y+8	; 0x08
    1772:	89 85       	ldd	r24, Y+9	; 0x09
    1774:	9a 85       	ldd	r25, Y+10	; 0x0a
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	40 e8       	ldi	r20, 0x80	; 128
    177c:	5f e3       	ldi	r21, 0x3F	; 63
    177e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1782:	88 23       	and	r24, r24
    1784:	2c f4       	brge	.+10     	; 0x1790 <LCD_sendCommand+0x344>
		__ticks = 1;
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	9e 83       	std	Y+6, r25	; 0x06
    178c:	8d 83       	std	Y+5, r24	; 0x05
    178e:	3f c0       	rjmp	.+126    	; 0x180e <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1790:	6f 81       	ldd	r22, Y+7	; 0x07
    1792:	78 85       	ldd	r23, Y+8	; 0x08
    1794:	89 85       	ldd	r24, Y+9	; 0x09
    1796:	9a 85       	ldd	r25, Y+10	; 0x0a
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	3f ef       	ldi	r19, 0xFF	; 255
    179c:	4f e7       	ldi	r20, 0x7F	; 127
    179e:	57 e4       	ldi	r21, 0x47	; 71
    17a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17a4:	18 16       	cp	r1, r24
    17a6:	4c f5       	brge	.+82     	; 0x17fa <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e2       	ldi	r20, 0x20	; 32
    17b6:	51 e4       	ldi	r21, 0x41	; 65
    17b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	bc 01       	movw	r22, r24
    17c2:	cd 01       	movw	r24, r26
    17c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	9e 83       	std	Y+6, r25	; 0x06
    17ce:	8d 83       	std	Y+5, r24	; 0x05
    17d0:	0f c0       	rjmp	.+30     	; 0x17f0 <LCD_sendCommand+0x3a4>
    17d2:	89 e1       	ldi	r24, 0x19	; 25
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	9c 83       	std	Y+4, r25	; 0x04
    17d8:	8b 83       	std	Y+3, r24	; 0x03
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	9c 81       	ldd	r25, Y+4	; 0x04
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	f1 f7       	brne	.-4      	; 0x17de <LCD_sendCommand+0x392>
    17e2:	9c 83       	std	Y+4, r25	; 0x04
    17e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e6:	8d 81       	ldd	r24, Y+5	; 0x05
    17e8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	9e 83       	std	Y+6, r25	; 0x06
    17ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f0:	8d 81       	ldd	r24, Y+5	; 0x05
    17f2:	9e 81       	ldd	r25, Y+6	; 0x06
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	69 f7       	brne	.-38     	; 0x17d2 <LCD_sendCommand+0x386>
    17f8:	14 c0       	rjmp	.+40     	; 0x1822 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17fa:	6f 81       	ldd	r22, Y+7	; 0x07
    17fc:	78 85       	ldd	r23, Y+8	; 0x08
    17fe:	89 85       	ldd	r24, Y+9	; 0x09
    1800:	9a 85       	ldd	r25, Y+10	; 0x0a
    1802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	9e 83       	std	Y+6, r25	; 0x06
    180c:	8d 83       	std	Y+5, r24	; 0x05
    180e:	8d 81       	ldd	r24, Y+5	; 0x05
    1810:	9e 81       	ldd	r25, Y+6	; 0x06
    1812:	9a 83       	std	Y+2, r25	; 0x02
    1814:	89 83       	std	Y+1, r24	; 0x01
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	9a 81       	ldd	r25, Y+2	; 0x02
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	f1 f7       	brne	.-4      	; 0x181a <LCD_sendCommand+0x3ce>
    181e:	9a 83       	std	Y+2, r25	; 0x02
    1820:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1822:	e9 96       	adiw	r28, 0x39	; 57
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	08 95       	ret

00001834 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	e9 97       	sbiw	r28, 0x39	; 57
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	cd bf       	out	0x3d, r28	; 61
    1848:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    184a:	82 e0       	ldi	r24, 0x02	; 2
    184c:	60 e0       	ldi	r22, 0x00	; 0
    184e:	41 e0       	ldi	r20, 0x01	; 1
    1850:	0e 94 b7 06 	call	0xd6e	; 0xd6e <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1854:	82 e0       	ldi	r24, 0x02	; 2
    1856:	61 e0       	ldi	r22, 0x01	; 1
    1858:	40 e0       	ldi	r20, 0x00	; 0
    185a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <GPIO_writePin>
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	a0 e8       	ldi	r26, 0x80	; 128
    1864:	bf e3       	ldi	r27, 0x3F	; 63
    1866:	8d ab       	std	Y+53, r24	; 0x35
    1868:	9e ab       	std	Y+54, r25	; 0x36
    186a:	af ab       	std	Y+55, r26	; 0x37
    186c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    186e:	6d a9       	ldd	r22, Y+53	; 0x35
    1870:	7e a9       	ldd	r23, Y+54	; 0x36
    1872:	8f a9       	ldd	r24, Y+55	; 0x37
    1874:	98 ad       	ldd	r25, Y+56	; 0x38
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	4a e7       	ldi	r20, 0x7A	; 122
    187c:	53 e4       	ldi	r21, 0x43	; 67
    187e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	89 ab       	std	Y+49, r24	; 0x31
    1888:	9a ab       	std	Y+50, r25	; 0x32
    188a:	ab ab       	std	Y+51, r26	; 0x33
    188c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    188e:	69 a9       	ldd	r22, Y+49	; 0x31
    1890:	7a a9       	ldd	r23, Y+50	; 0x32
    1892:	8b a9       	ldd	r24, Y+51	; 0x33
    1894:	9c a9       	ldd	r25, Y+52	; 0x34
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	40 e8       	ldi	r20, 0x80	; 128
    189c:	5f e3       	ldi	r21, 0x3F	; 63
    189e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a2:	88 23       	and	r24, r24
    18a4:	2c f4       	brge	.+10     	; 0x18b0 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	98 ab       	std	Y+48, r25	; 0x30
    18ac:	8f a7       	std	Y+47, r24	; 0x2f
    18ae:	3f c0       	rjmp	.+126    	; 0x192e <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    18b0:	69 a9       	ldd	r22, Y+49	; 0x31
    18b2:	7a a9       	ldd	r23, Y+50	; 0x32
    18b4:	8b a9       	ldd	r24, Y+51	; 0x33
    18b6:	9c a9       	ldd	r25, Y+52	; 0x34
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	3f ef       	ldi	r19, 0xFF	; 255
    18bc:	4f e7       	ldi	r20, 0x7F	; 127
    18be:	57 e4       	ldi	r21, 0x47	; 71
    18c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18c4:	18 16       	cp	r1, r24
    18c6:	4c f5       	brge	.+82     	; 0x191a <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c8:	6d a9       	ldd	r22, Y+53	; 0x35
    18ca:	7e a9       	ldd	r23, Y+54	; 0x36
    18cc:	8f a9       	ldd	r24, Y+55	; 0x37
    18ce:	98 ad       	ldd	r25, Y+56	; 0x38
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	40 e2       	ldi	r20, 0x20	; 32
    18d6:	51 e4       	ldi	r21, 0x41	; 65
    18d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	bc 01       	movw	r22, r24
    18e2:	cd 01       	movw	r24, r26
    18e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	98 ab       	std	Y+48, r25	; 0x30
    18ee:	8f a7       	std	Y+47, r24	; 0x2f
    18f0:	0f c0       	rjmp	.+30     	; 0x1910 <LCD_displayCharacter+0xdc>
    18f2:	89 e1       	ldi	r24, 0x19	; 25
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	9e a7       	std	Y+46, r25	; 0x2e
    18f8:	8d a7       	std	Y+45, r24	; 0x2d
    18fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    18fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	f1 f7       	brne	.-4      	; 0x18fe <LCD_displayCharacter+0xca>
    1902:	9e a7       	std	Y+46, r25	; 0x2e
    1904:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1906:	8f a5       	ldd	r24, Y+47	; 0x2f
    1908:	98 a9       	ldd	r25, Y+48	; 0x30
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	98 ab       	std	Y+48, r25	; 0x30
    190e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1910:	8f a5       	ldd	r24, Y+47	; 0x2f
    1912:	98 a9       	ldd	r25, Y+48	; 0x30
    1914:	00 97       	sbiw	r24, 0x00	; 0
    1916:	69 f7       	brne	.-38     	; 0x18f2 <LCD_displayCharacter+0xbe>
    1918:	14 c0       	rjmp	.+40     	; 0x1942 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    191a:	69 a9       	ldd	r22, Y+49	; 0x31
    191c:	7a a9       	ldd	r23, Y+50	; 0x32
    191e:	8b a9       	ldd	r24, Y+51	; 0x33
    1920:	9c a9       	ldd	r25, Y+52	; 0x34
    1922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	98 ab       	std	Y+48, r25	; 0x30
    192c:	8f a7       	std	Y+47, r24	; 0x2f
    192e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1930:	98 a9       	ldd	r25, Y+48	; 0x30
    1932:	9c a7       	std	Y+44, r25	; 0x2c
    1934:	8b a7       	std	Y+43, r24	; 0x2b
    1936:	8b a5       	ldd	r24, Y+43	; 0x2b
    1938:	9c a5       	ldd	r25, Y+44	; 0x2c
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	f1 f7       	brne	.-4      	; 0x193a <LCD_displayCharacter+0x106>
    193e:	9c a7       	std	Y+44, r25	; 0x2c
    1940:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1942:	82 e0       	ldi	r24, 0x02	; 2
    1944:	62 e0       	ldi	r22, 0x02	; 2
    1946:	41 e0       	ldi	r20, 0x01	; 1
    1948:	0e 94 b7 06 	call	0xd6e	; 0xd6e <GPIO_writePin>
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	a0 e8       	ldi	r26, 0x80	; 128
    1952:	bf e3       	ldi	r27, 0x3F	; 63
    1954:	8f a3       	std	Y+39, r24	; 0x27
    1956:	98 a7       	std	Y+40, r25	; 0x28
    1958:	a9 a7       	std	Y+41, r26	; 0x29
    195a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    195c:	6f a1       	ldd	r22, Y+39	; 0x27
    195e:	78 a5       	ldd	r23, Y+40	; 0x28
    1960:	89 a5       	ldd	r24, Y+41	; 0x29
    1962:	9a a5       	ldd	r25, Y+42	; 0x2a
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	4a e7       	ldi	r20, 0x7A	; 122
    196a:	53 e4       	ldi	r21, 0x43	; 67
    196c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	8b a3       	std	Y+35, r24	; 0x23
    1976:	9c a3       	std	Y+36, r25	; 0x24
    1978:	ad a3       	std	Y+37, r26	; 0x25
    197a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    197c:	6b a1       	ldd	r22, Y+35	; 0x23
    197e:	7c a1       	ldd	r23, Y+36	; 0x24
    1980:	8d a1       	ldd	r24, Y+37	; 0x25
    1982:	9e a1       	ldd	r25, Y+38	; 0x26
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e8       	ldi	r20, 0x80	; 128
    198a:	5f e3       	ldi	r21, 0x3F	; 63
    198c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1990:	88 23       	and	r24, r24
    1992:	2c f4       	brge	.+10     	; 0x199e <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	9a a3       	std	Y+34, r25	; 0x22
    199a:	89 a3       	std	Y+33, r24	; 0x21
    199c:	3f c0       	rjmp	.+126    	; 0x1a1c <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    199e:	6b a1       	ldd	r22, Y+35	; 0x23
    19a0:	7c a1       	ldd	r23, Y+36	; 0x24
    19a2:	8d a1       	ldd	r24, Y+37	; 0x25
    19a4:	9e a1       	ldd	r25, Y+38	; 0x26
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	3f ef       	ldi	r19, 0xFF	; 255
    19aa:	4f e7       	ldi	r20, 0x7F	; 127
    19ac:	57 e4       	ldi	r21, 0x47	; 71
    19ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b2:	18 16       	cp	r1, r24
    19b4:	4c f5       	brge	.+82     	; 0x1a08 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b6:	6f a1       	ldd	r22, Y+39	; 0x27
    19b8:	78 a5       	ldd	r23, Y+40	; 0x28
    19ba:	89 a5       	ldd	r24, Y+41	; 0x29
    19bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e2       	ldi	r20, 0x20	; 32
    19c4:	51 e4       	ldi	r21, 0x41	; 65
    19c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	bc 01       	movw	r22, r24
    19d0:	cd 01       	movw	r24, r26
    19d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	9a a3       	std	Y+34, r25	; 0x22
    19dc:	89 a3       	std	Y+33, r24	; 0x21
    19de:	0f c0       	rjmp	.+30     	; 0x19fe <LCD_displayCharacter+0x1ca>
    19e0:	89 e1       	ldi	r24, 0x19	; 25
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	98 a3       	std	Y+32, r25	; 0x20
    19e6:	8f 8f       	std	Y+31, r24	; 0x1f
    19e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19ea:	98 a1       	ldd	r25, Y+32	; 0x20
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	f1 f7       	brne	.-4      	; 0x19ec <LCD_displayCharacter+0x1b8>
    19f0:	98 a3       	std	Y+32, r25	; 0x20
    19f2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f4:	89 a1       	ldd	r24, Y+33	; 0x21
    19f6:	9a a1       	ldd	r25, Y+34	; 0x22
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	9a a3       	std	Y+34, r25	; 0x22
    19fc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1a00:	9a a1       	ldd	r25, Y+34	; 0x22
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	69 f7       	brne	.-38     	; 0x19e0 <LCD_displayCharacter+0x1ac>
    1a06:	14 c0       	rjmp	.+40     	; 0x1a30 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a08:	6b a1       	ldd	r22, Y+35	; 0x23
    1a0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	9a a3       	std	Y+34, r25	; 0x22
    1a1a:	89 a3       	std	Y+33, r24	; 0x21
    1a1c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a1e:	9a a1       	ldd	r25, Y+34	; 0x22
    1a20:	9e 8f       	std	Y+30, r25	; 0x1e
    1a22:	8d 8f       	std	Y+29, r24	; 0x1d
    1a24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a26:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	f1 f7       	brne	.-4      	; 0x1a28 <LCD_displayCharacter+0x1f4>
    1a2c:	9e 8f       	std	Y+30, r25	; 0x1e
    1a2e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	69 ad       	ldd	r22, Y+57	; 0x39
    1a34:	0e 94 81 08 	call	0x1102	; 0x1102 <GPIO_writePort>
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	a0 e8       	ldi	r26, 0x80	; 128
    1a3e:	bf e3       	ldi	r27, 0x3F	; 63
    1a40:	89 8f       	std	Y+25, r24	; 0x19
    1a42:	9a 8f       	std	Y+26, r25	; 0x1a
    1a44:	ab 8f       	std	Y+27, r26	; 0x1b
    1a46:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a48:	69 8d       	ldd	r22, Y+25	; 0x19
    1a4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	4a e7       	ldi	r20, 0x7A	; 122
    1a56:	53 e4       	ldi	r21, 0x43	; 67
    1a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	8d 8b       	std	Y+21, r24	; 0x15
    1a62:	9e 8b       	std	Y+22, r25	; 0x16
    1a64:	af 8b       	std	Y+23, r26	; 0x17
    1a66:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a68:	6d 89       	ldd	r22, Y+21	; 0x15
    1a6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	40 e8       	ldi	r20, 0x80	; 128
    1a76:	5f e3       	ldi	r21, 0x3F	; 63
    1a78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a7c:	88 23       	and	r24, r24
    1a7e:	2c f4       	brge	.+10     	; 0x1a8a <LCD_displayCharacter+0x256>
		__ticks = 1;
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	9c 8b       	std	Y+20, r25	; 0x14
    1a86:	8b 8b       	std	Y+19, r24	; 0x13
    1a88:	3f c0       	rjmp	.+126    	; 0x1b08 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1a8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a90:	98 8d       	ldd	r25, Y+24	; 0x18
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	3f ef       	ldi	r19, 0xFF	; 255
    1a96:	4f e7       	ldi	r20, 0x7F	; 127
    1a98:	57 e4       	ldi	r21, 0x47	; 71
    1a9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a9e:	18 16       	cp	r1, r24
    1aa0:	4c f5       	brge	.+82     	; 0x1af4 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa2:	69 8d       	ldd	r22, Y+25	; 0x19
    1aa4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aa6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aa8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	40 e2       	ldi	r20, 0x20	; 32
    1ab0:	51 e4       	ldi	r21, 0x41	; 65
    1ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	bc 01       	movw	r22, r24
    1abc:	cd 01       	movw	r24, r26
    1abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	9c 8b       	std	Y+20, r25	; 0x14
    1ac8:	8b 8b       	std	Y+19, r24	; 0x13
    1aca:	0f c0       	rjmp	.+30     	; 0x1aea <LCD_displayCharacter+0x2b6>
    1acc:	89 e1       	ldi	r24, 0x19	; 25
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	9a 8b       	std	Y+18, r25	; 0x12
    1ad2:	89 8b       	std	Y+17, r24	; 0x11
    1ad4:	89 89       	ldd	r24, Y+17	; 0x11
    1ad6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	f1 f7       	brne	.-4      	; 0x1ad8 <LCD_displayCharacter+0x2a4>
    1adc:	9a 8b       	std	Y+18, r25	; 0x12
    1ade:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	9c 8b       	std	Y+20, r25	; 0x14
    1ae8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aea:	8b 89       	ldd	r24, Y+19	; 0x13
    1aec:	9c 89       	ldd	r25, Y+20	; 0x14
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	69 f7       	brne	.-38     	; 0x1acc <LCD_displayCharacter+0x298>
    1af2:	14 c0       	rjmp	.+40     	; 0x1b1c <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af4:	6d 89       	ldd	r22, Y+21	; 0x15
    1af6:	7e 89       	ldd	r23, Y+22	; 0x16
    1af8:	8f 89       	ldd	r24, Y+23	; 0x17
    1afa:	98 8d       	ldd	r25, Y+24	; 0x18
    1afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	9c 8b       	std	Y+20, r25	; 0x14
    1b06:	8b 8b       	std	Y+19, r24	; 0x13
    1b08:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0c:	98 8b       	std	Y+16, r25	; 0x10
    1b0e:	8f 87       	std	Y+15, r24	; 0x0f
    1b10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b12:	98 89       	ldd	r25, Y+16	; 0x10
    1b14:	01 97       	sbiw	r24, 0x01	; 1
    1b16:	f1 f7       	brne	.-4      	; 0x1b14 <LCD_displayCharacter+0x2e0>
    1b18:	98 8b       	std	Y+16, r25	; 0x10
    1b1a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1b1c:	82 e0       	ldi	r24, 0x02	; 2
    1b1e:	62 e0       	ldi	r22, 0x02	; 2
    1b20:	40 e0       	ldi	r20, 0x00	; 0
    1b22:	0e 94 b7 06 	call	0xd6e	; 0xd6e <GPIO_writePin>
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	a0 e8       	ldi	r26, 0x80	; 128
    1b2c:	bf e3       	ldi	r27, 0x3F	; 63
    1b2e:	8b 87       	std	Y+11, r24	; 0x0b
    1b30:	9c 87       	std	Y+12, r25	; 0x0c
    1b32:	ad 87       	std	Y+13, r26	; 0x0d
    1b34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	4a e7       	ldi	r20, 0x7A	; 122
    1b44:	53 e4       	ldi	r21, 0x43	; 67
    1b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	8f 83       	std	Y+7, r24	; 0x07
    1b50:	98 87       	std	Y+8, r25	; 0x08
    1b52:	a9 87       	std	Y+9, r26	; 0x09
    1b54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b56:	6f 81       	ldd	r22, Y+7	; 0x07
    1b58:	78 85       	ldd	r23, Y+8	; 0x08
    1b5a:	89 85       	ldd	r24, Y+9	; 0x09
    1b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e8       	ldi	r20, 0x80	; 128
    1b64:	5f e3       	ldi	r21, 0x3F	; 63
    1b66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b6a:	88 23       	and	r24, r24
    1b6c:	2c f4       	brge	.+10     	; 0x1b78 <LCD_displayCharacter+0x344>
		__ticks = 1;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	9e 83       	std	Y+6, r25	; 0x06
    1b74:	8d 83       	std	Y+5, r24	; 0x05
    1b76:	3f c0       	rjmp	.+126    	; 0x1bf6 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1b78:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7a:	78 85       	ldd	r23, Y+8	; 0x08
    1b7c:	89 85       	ldd	r24, Y+9	; 0x09
    1b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	3f ef       	ldi	r19, 0xFF	; 255
    1b84:	4f e7       	ldi	r20, 0x7F	; 127
    1b86:	57 e4       	ldi	r21, 0x47	; 71
    1b88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b8c:	18 16       	cp	r1, r24
    1b8e:	4c f5       	brge	.+82     	; 0x1be2 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e2       	ldi	r20, 0x20	; 32
    1b9e:	51 e4       	ldi	r21, 0x41	; 65
    1ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	bc 01       	movw	r22, r24
    1baa:	cd 01       	movw	r24, r26
    1bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	9e 83       	std	Y+6, r25	; 0x06
    1bb6:	8d 83       	std	Y+5, r24	; 0x05
    1bb8:	0f c0       	rjmp	.+30     	; 0x1bd8 <LCD_displayCharacter+0x3a4>
    1bba:	89 e1       	ldi	r24, 0x19	; 25
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	9c 83       	std	Y+4, r25	; 0x04
    1bc0:	8b 83       	std	Y+3, r24	; 0x03
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	f1 f7       	brne	.-4      	; 0x1bc6 <LCD_displayCharacter+0x392>
    1bca:	9c 83       	std	Y+4, r25	; 0x04
    1bcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bce:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	9e 83       	std	Y+6, r25	; 0x06
    1bd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bda:	9e 81       	ldd	r25, Y+6	; 0x06
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	69 f7       	brne	.-38     	; 0x1bba <LCD_displayCharacter+0x386>
    1be0:	14 c0       	rjmp	.+40     	; 0x1c0a <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be2:	6f 81       	ldd	r22, Y+7	; 0x07
    1be4:	78 85       	ldd	r23, Y+8	; 0x08
    1be6:	89 85       	ldd	r24, Y+9	; 0x09
    1be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	9e 83       	std	Y+6, r25	; 0x06
    1bf4:	8d 83       	std	Y+5, r24	; 0x05
    1bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfa:	9a 83       	std	Y+2, r25	; 0x02
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	9a 81       	ldd	r25, Y+2	; 0x02
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <LCD_displayCharacter+0x3ce>
    1c06:	9a 83       	std	Y+2, r25	; 0x02
    1c08:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1c0a:	e9 96       	adiw	r28, 0x39	; 57
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	cd bf       	out	0x3d, r28	; 61
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <LCD_displayString+0x6>
    1c22:	0f 92       	push	r0
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	9b 83       	std	Y+3, r25	; 0x03
    1c2a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1c2c:	19 82       	std	Y+1, r1	; 0x01
    1c2e:	0e c0       	rjmp	.+28     	; 0x1c4c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	8a 81       	ldd	r24, Y+2	; 0x02
    1c38:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	e2 0f       	add	r30, r18
    1c3e:	f3 1f       	adc	r31, r19
    1c40:	80 81       	ld	r24, Z
    1c42:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_displayCharacter>
		i++;
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	8f 5f       	subi	r24, 0xFF	; 255
    1c4a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	9b 81       	ldd	r25, Y+3	; 0x03
    1c56:	fc 01       	movw	r30, r24
    1c58:	e2 0f       	add	r30, r18
    1c5a:	f3 1f       	adc	r31, r19
    1c5c:	80 81       	ld	r24, Z
    1c5e:	88 23       	and	r24, r24
    1c60:	39 f7       	brne	.-50     	; 0x1c30 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	00 d0       	rcall	.+0      	; 0x1c74 <LCD_moveCursor+0x6>
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <LCD_moveCursor+0x8>
    1c76:	0f 92       	push	r0
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	8a 83       	std	Y+2, r24	; 0x02
    1c7e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	3d 83       	std	Y+5, r19	; 0x05
    1c88:	2c 83       	std	Y+4, r18	; 0x04
    1c8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8e:	81 30       	cpi	r24, 0x01	; 1
    1c90:	91 05       	cpc	r25, r1
    1c92:	c1 f0       	breq	.+48     	; 0x1cc4 <LCD_moveCursor+0x56>
    1c94:	2c 81       	ldd	r18, Y+4	; 0x04
    1c96:	3d 81       	ldd	r19, Y+5	; 0x05
    1c98:	22 30       	cpi	r18, 0x02	; 2
    1c9a:	31 05       	cpc	r19, r1
    1c9c:	2c f4       	brge	.+10     	; 0x1ca8 <LCD_moveCursor+0x3a>
    1c9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca2:	00 97       	sbiw	r24, 0x00	; 0
    1ca4:	61 f0       	breq	.+24     	; 0x1cbe <LCD_moveCursor+0x50>
    1ca6:	19 c0       	rjmp	.+50     	; 0x1cda <LCD_moveCursor+0x6c>
    1ca8:	2c 81       	ldd	r18, Y+4	; 0x04
    1caa:	3d 81       	ldd	r19, Y+5	; 0x05
    1cac:	22 30       	cpi	r18, 0x02	; 2
    1cae:	31 05       	cpc	r19, r1
    1cb0:	69 f0       	breq	.+26     	; 0x1ccc <LCD_moveCursor+0x5e>
    1cb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb6:	83 30       	cpi	r24, 0x03	; 3
    1cb8:	91 05       	cpc	r25, r1
    1cba:	61 f0       	breq	.+24     	; 0x1cd4 <LCD_moveCursor+0x66>
    1cbc:	0e c0       	rjmp	.+28     	; 0x1cda <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	89 83       	std	Y+1, r24	; 0x01
    1cc2:	0b c0       	rjmp	.+22     	; 0x1cda <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	80 5c       	subi	r24, 0xC0	; 192
    1cc8:	89 83       	std	Y+1, r24	; 0x01
    1cca:	07 c0       	rjmp	.+14     	; 0x1cda <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	80 5f       	subi	r24, 0xF0	; 240
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    1cd2:	03 c0       	rjmp	.+6      	; 0x1cda <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	80 5b       	subi	r24, 0xB0	; 176
    1cd8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1cda:	89 81       	ldd	r24, Y+1	; 0x01
    1cdc:	80 68       	ori	r24, 0x80	; 128
    1cde:	0e 94 26 0a 	call	0x144c	; 0x144c <LCD_sendCommand>
}
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	cf 91       	pop	r28
    1cee:	df 91       	pop	r29
    1cf0:	08 95       	ret

00001cf2 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	00 d0       	rcall	.+0      	; 0x1cf8 <LCD_displayStringRowColumn+0x6>
    1cf8:	00 d0       	rcall	.+0      	; 0x1cfa <LCD_displayStringRowColumn+0x8>
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    1d00:	6a 83       	std	Y+2, r22	; 0x02
    1d02:	5c 83       	std	Y+4, r21	; 0x04
    1d04:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	6a 81       	ldd	r22, Y+2	; 0x02
    1d0a:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	9c 81       	ldd	r25, Y+4	; 0x04
    1d12:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_displayString>
}
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
    1d2c:	62 97       	sbiw	r28, 0x12	; 18
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	f8 94       	cli
    1d32:	de bf       	out	0x3e, r29	; 62
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	cd bf       	out	0x3d, r28	; 61
    1d38:	9a 8b       	std	Y+18, r25	; 0x12
    1d3a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1d3c:	89 89       	ldd	r24, Y+17	; 0x11
    1d3e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d40:	9e 01       	movw	r18, r28
    1d42:	2f 5f       	subi	r18, 0xFF	; 255
    1d44:	3f 4f       	sbci	r19, 0xFF	; 255
    1d46:	b9 01       	movw	r22, r18
    1d48:	4a e0       	ldi	r20, 0x0A	; 10
    1d4a:	50 e0       	ldi	r21, 0x00	; 0
    1d4c:	0e 94 42 1a 	call	0x3484	; 0x3484 <itoa>
   LCD_displayString(buff); /* Display the string */
    1d50:	ce 01       	movw	r24, r28
    1d52:	01 96       	adiw	r24, 0x01	; 1
    1d54:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_displayString>
}
    1d58:	62 96       	adiw	r28, 0x12	; 18
    1d5a:	0f b6       	in	r0, 0x3f	; 63
    1d5c:	f8 94       	cli
    1d5e:	de bf       	out	0x3e, r29	; 62
    1d60:	0f be       	out	0x3f, r0	; 63
    1d62:	cd bf       	out	0x3d, r28	; 61
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	08 95       	ret

00001d6a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1d6a:	df 93       	push	r29
    1d6c:	cf 93       	push	r28
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	0e 94 26 0a 	call	0x144c	; 0x144c <LCD_sendCommand>
}
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <main>:
/* Counter to hold the seconds */
volatile uint16 g_seconds = 0;


int main (void)
{
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	2c 97       	sbiw	r28, 0x0c	; 12
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
	BUZZER_init();
    1d92:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUZZER_init>
	/*LCD initialization*/
	LCD_init();
    1d96:	0e 94 03 0a 	call	0x1406	; 0x1406 <LCD_init>
	UART_config uart_config = {
			9600,
			EIGHT_BITS,
			DISABLED,
			ONE_BIT
	};
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	01 96       	adiw	r24, 0x01	; 1
    1d9e:	99 87       	std	Y+9, r25	; 0x09
    1da0:	88 87       	std	Y+8, r24	; 0x08
    1da2:	e4 e5       	ldi	r30, 0x54	; 84
    1da4:	f1 e0       	ldi	r31, 0x01	; 1
    1da6:	fb 87       	std	Y+11, r31	; 0x0b
    1da8:	ea 87       	std	Y+10, r30	; 0x0a
    1daa:	f7 e0       	ldi	r31, 0x07	; 7
    1dac:	fc 87       	std	Y+12, r31	; 0x0c
    1dae:	ea 85       	ldd	r30, Y+10	; 0x0a
    1db0:	fb 85       	ldd	r31, Y+11	; 0x0b
    1db2:	00 80       	ld	r0, Z
    1db4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1db6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1db8:	01 96       	adiw	r24, 0x01	; 1
    1dba:	9b 87       	std	Y+11, r25	; 0x0b
    1dbc:	8a 87       	std	Y+10, r24	; 0x0a
    1dbe:	e8 85       	ldd	r30, Y+8	; 0x08
    1dc0:	f9 85       	ldd	r31, Y+9	; 0x09
    1dc2:	00 82       	st	Z, r0
    1dc4:	88 85       	ldd	r24, Y+8	; 0x08
    1dc6:	99 85       	ldd	r25, Y+9	; 0x09
    1dc8:	01 96       	adiw	r24, 0x01	; 1
    1dca:	99 87       	std	Y+9, r25	; 0x09
    1dcc:	88 87       	std	Y+8, r24	; 0x08
    1dce:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dd0:	91 50       	subi	r25, 0x01	; 1
    1dd2:	9c 87       	std	Y+12, r25	; 0x0c
    1dd4:	ec 85       	ldd	r30, Y+12	; 0x0c
    1dd6:	ee 23       	and	r30, r30
    1dd8:	51 f7       	brne	.-44     	; 0x1dae <main+0x30>

	UART_init(&uart_config);
    1dda:	ce 01       	movw	r24, r28
    1ddc:	01 96       	adiw	r24, 0x01	; 1
    1dde:	0e 94 d7 18 	call	0x31ae	; 0x31ae <UART_init>

	while(1)
	{
		UART_sendByte(HMI_ECU_IS_READY);
    1de2:	85 ea       	ldi	r24, 0xA5	; 165
    1de4:	0e 94 64 19 	call	0x32c8	; 0x32c8 <UART_sendByte>
		IsRecorded = UART_recieveByte();
    1de8:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <UART_recieveByte>
    1dec:	80 93 7b 01 	sts	0x017B, r24

		if (IsRecorded == 0) // There is no recorded password; New User!
    1df0:	80 91 7b 01 	lds	r24, 0x017B
    1df4:	88 23       	and	r24, r24
    1df6:	19 f4       	brne	.+6      	; 0x1dfe <main+0x80>
		{
			TASK_newPasswordEnter();
    1df8:	0e 94 53 12 	call	0x24a6	; 0x24a6 <TASK_newPasswordEnter>
    1dfc:	f2 cf       	rjmp	.-28     	; 0x1de2 <main+0x64>
		}
		else if (IsRecorded == 1) // There is a recorded password
    1dfe:	80 91 7b 01 	lds	r24, 0x017B
    1e02:	81 30       	cpi	r24, 0x01	; 1
    1e04:	71 f7       	brne	.-36     	; 0x1de2 <main+0x64>
		{
			TASK_optionsDisplay();
    1e06:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <TASK_optionsDisplay>
    1e0a:	eb cf       	rjmp	.-42     	; 0x1de2 <main+0x64>

00001e0c <TASK_optionsDisplay>:
		}
	}
}

void TASK_optionsDisplay (void)
{
    1e0c:	df 93       	push	r29
    1e0e:	cf 93       	push	r28
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
    1e14:	6c 97       	sbiw	r28, 0x1c	; 28
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1e20:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_clearScreen>

	LCD_moveCursor(0, 0);
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	60 e0       	ldi	r22, 0x00	; 0
    1e28:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <LCD_moveCursor>
	LCD_displayString("+: Open door");
    1e2c:	80 e6       	ldi	r24, 0x60	; 96
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_displayString>

	LCD_moveCursor(1, 0);
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	60 e0       	ldi	r22, 0x00	; 0
    1e38:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <LCD_moveCursor>
	LCD_displayString("-: Change password");
    1e3c:	8d e6       	ldi	r24, 0x6D	; 109
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_displayString>

	/* User_Choice stored the button pressed on the keypad */
	User_Choice = KEYPAD_getPressedKey();
    1e44:	0e 94 0a 09 	call	0x1214	; 0x1214 <KEYPAD_getPressedKey>
    1e48:	80 93 72 01 	sts	0x0172, r24
    1e4c:	04 c0       	rjmp	.+8      	; 0x1e56 <TASK_optionsDisplay+0x4a>

	/* while loop for ignoring any inputs other than the + and - */
	while (User_Choice != '+' && User_Choice != '-')
	{
		User_Choice = KEYPAD_getPressedKey();
    1e4e:	0e 94 0a 09 	call	0x1214	; 0x1214 <KEYPAD_getPressedKey>
    1e52:	80 93 72 01 	sts	0x0172, r24

	/* User_Choice stored the button pressed on the keypad */
	User_Choice = KEYPAD_getPressedKey();

	/* while loop for ignoring any inputs other than the + and - */
	while (User_Choice != '+' && User_Choice != '-')
    1e56:	80 91 72 01 	lds	r24, 0x0172
    1e5a:	8b 32       	cpi	r24, 0x2B	; 43
    1e5c:	21 f0       	breq	.+8      	; 0x1e66 <TASK_optionsDisplay+0x5a>
    1e5e:	80 91 72 01 	lds	r24, 0x0172
    1e62:	8d 32       	cpi	r24, 0x2D	; 45
    1e64:	a1 f7       	brne	.-24     	; 0x1e4e <TASK_optionsDisplay+0x42>
	{
		User_Choice = KEYPAD_getPressedKey();
	}

	if (User_Choice == '-')
    1e66:	80 91 72 01 	lds	r24, 0x0172
    1e6a:	8d 32       	cpi	r24, 0x2D	; 45
    1e6c:	09 f0       	breq	.+2      	; 0x1e70 <TASK_optionsDisplay+0x64>
    1e6e:	7d c0       	rjmp	.+250    	; 0x1f6a <TASK_optionsDisplay+0x15e>
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	aa ef       	ldi	r26, 0xFA	; 250
    1e76:	b3 e4       	ldi	r27, 0x43	; 67
    1e78:	89 8f       	std	Y+25, r24	; 0x19
    1e7a:	9a 8f       	std	Y+26, r25	; 0x1a
    1e7c:	ab 8f       	std	Y+27, r26	; 0x1b
    1e7e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e80:	69 8d       	ldd	r22, Y+25	; 0x19
    1e82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	4a ef       	ldi	r20, 0xFA	; 250
    1e8e:	54 e4       	ldi	r21, 0x44	; 68
    1e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	8d 8b       	std	Y+21, r24	; 0x15
    1e9a:	9e 8b       	std	Y+22, r25	; 0x16
    1e9c:	af 8b       	std	Y+23, r26	; 0x17
    1e9e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ea0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e8       	ldi	r20, 0x80	; 128
    1eae:	5f e3       	ldi	r21, 0x3F	; 63
    1eb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb4:	88 23       	and	r24, r24
    1eb6:	2c f4       	brge	.+10     	; 0x1ec2 <TASK_optionsDisplay+0xb6>
		__ticks = 1;
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	9c 8b       	std	Y+20, r25	; 0x14
    1ebe:	8b 8b       	std	Y+19, r24	; 0x13
    1ec0:	3f c0       	rjmp	.+126    	; 0x1f40 <TASK_optionsDisplay+0x134>
	else if (__tmp > 65535)
    1ec2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ec6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ec8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	3f ef       	ldi	r19, 0xFF	; 255
    1ece:	4f e7       	ldi	r20, 0x7F	; 127
    1ed0:	57 e4       	ldi	r21, 0x47	; 71
    1ed2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ed6:	18 16       	cp	r1, r24
    1ed8:	4c f5       	brge	.+82     	; 0x1f2c <TASK_optionsDisplay+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eda:	69 8d       	ldd	r22, Y+25	; 0x19
    1edc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ede:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ee0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	40 e2       	ldi	r20, 0x20	; 32
    1ee8:	51 e4       	ldi	r21, 0x41	; 65
    1eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	bc 01       	movw	r22, r24
    1ef4:	cd 01       	movw	r24, r26
    1ef6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	9c 8b       	std	Y+20, r25	; 0x14
    1f00:	8b 8b       	std	Y+19, r24	; 0x13
    1f02:	0f c0       	rjmp	.+30     	; 0x1f22 <TASK_optionsDisplay+0x116>
    1f04:	88 ec       	ldi	r24, 0xC8	; 200
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	9a 8b       	std	Y+18, r25	; 0x12
    1f0a:	89 8b       	std	Y+17, r24	; 0x11
    1f0c:	89 89       	ldd	r24, Y+17	; 0x11
    1f0e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	f1 f7       	brne	.-4      	; 0x1f10 <TASK_optionsDisplay+0x104>
    1f14:	9a 8b       	std	Y+18, r25	; 0x12
    1f16:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f18:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	9c 8b       	std	Y+20, r25	; 0x14
    1f20:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f22:	8b 89       	ldd	r24, Y+19	; 0x13
    1f24:	9c 89       	ldd	r25, Y+20	; 0x14
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	69 f7       	brne	.-38     	; 0x1f04 <TASK_optionsDisplay+0xf8>
    1f2a:	14 c0       	rjmp	.+40     	; 0x1f54 <TASK_optionsDisplay+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f30:	8f 89       	ldd	r24, Y+23	; 0x17
    1f32:	98 8d       	ldd	r25, Y+24	; 0x18
    1f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	9c 8b       	std	Y+20, r25	; 0x14
    1f3e:	8b 8b       	std	Y+19, r24	; 0x13
    1f40:	8b 89       	ldd	r24, Y+19	; 0x13
    1f42:	9c 89       	ldd	r25, Y+20	; 0x14
    1f44:	98 8b       	std	Y+16, r25	; 0x10
    1f46:	8f 87       	std	Y+15, r24	; 0x0f
    1f48:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f4a:	98 89       	ldd	r25, Y+16	; 0x10
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <TASK_optionsDisplay+0x140>
    1f50:	98 8b       	std	Y+16, r25	; 0x10
    1f52:	8f 87       	std	Y+15, r24	; 0x0f
	{
		_delay_ms(500);

		while (UART_recieveByte() != CONTROL_ECU_IS_READY);
    1f54:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <UART_recieveByte>
    1f58:	8a 35       	cpi	r24, 0x5A	; 90
    1f5a:	e1 f7       	brne	.-8      	; 0x1f54 <TASK_optionsDisplay+0x148>
		UART_sendByte(User_Choice);
    1f5c:	80 91 72 01 	lds	r24, 0x0172
    1f60:	0e 94 64 19 	call	0x32c8	; 0x32c8 <UART_sendByte>

		TASK_passwordChange();
    1f64:	0e 94 3f 10 	call	0x207e	; 0x207e <TASK_passwordChange>
    1f68:	81 c0       	rjmp	.+258    	; 0x206c <TASK_optionsDisplay+0x260>
	}

	else if (User_Choice == '+')
    1f6a:	80 91 72 01 	lds	r24, 0x0172
    1f6e:	8b 32       	cpi	r24, 0x2B	; 43
    1f70:	09 f0       	breq	.+2      	; 0x1f74 <TASK_optionsDisplay+0x168>
    1f72:	7c c0       	rjmp	.+248    	; 0x206c <TASK_optionsDisplay+0x260>
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	aa ef       	ldi	r26, 0xFA	; 250
    1f7a:	b3 e4       	ldi	r27, 0x43	; 67
    1f7c:	8b 87       	std	Y+11, r24	; 0x0b
    1f7e:	9c 87       	std	Y+12, r25	; 0x0c
    1f80:	ad 87       	std	Y+13, r26	; 0x0d
    1f82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	4a ef       	ldi	r20, 0xFA	; 250
    1f92:	54 e4       	ldi	r21, 0x44	; 68
    1f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	8f 83       	std	Y+7, r24	; 0x07
    1f9e:	98 87       	std	Y+8, r25	; 0x08
    1fa0:	a9 87       	std	Y+9, r26	; 0x09
    1fa2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fa4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa6:	78 85       	ldd	r23, Y+8	; 0x08
    1fa8:	89 85       	ldd	r24, Y+9	; 0x09
    1faa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e8       	ldi	r20, 0x80	; 128
    1fb2:	5f e3       	ldi	r21, 0x3F	; 63
    1fb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fb8:	88 23       	and	r24, r24
    1fba:	2c f4       	brge	.+10     	; 0x1fc6 <TASK_optionsDisplay+0x1ba>
		__ticks = 1;
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	9e 83       	std	Y+6, r25	; 0x06
    1fc2:	8d 83       	std	Y+5, r24	; 0x05
    1fc4:	3f c0       	rjmp	.+126    	; 0x2044 <TASK_optionsDisplay+0x238>
	else if (__tmp > 65535)
    1fc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc8:	78 85       	ldd	r23, Y+8	; 0x08
    1fca:	89 85       	ldd	r24, Y+9	; 0x09
    1fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	3f ef       	ldi	r19, 0xFF	; 255
    1fd2:	4f e7       	ldi	r20, 0x7F	; 127
    1fd4:	57 e4       	ldi	r21, 0x47	; 71
    1fd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fda:	18 16       	cp	r1, r24
    1fdc:	4c f5       	brge	.+82     	; 0x2030 <TASK_optionsDisplay+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fde:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e2       	ldi	r20, 0x20	; 32
    1fec:	51 e4       	ldi	r21, 0x41	; 65
    1fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	bc 01       	movw	r22, r24
    1ff8:	cd 01       	movw	r24, r26
    1ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	9e 83       	std	Y+6, r25	; 0x06
    2004:	8d 83       	std	Y+5, r24	; 0x05
    2006:	0f c0       	rjmp	.+30     	; 0x2026 <TASK_optionsDisplay+0x21a>
    2008:	88 ec       	ldi	r24, 0xC8	; 200
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	9c 83       	std	Y+4, r25	; 0x04
    200e:	8b 83       	std	Y+3, r24	; 0x03
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	9c 81       	ldd	r25, Y+4	; 0x04
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	f1 f7       	brne	.-4      	; 0x2014 <TASK_optionsDisplay+0x208>
    2018:	9c 83       	std	Y+4, r25	; 0x04
    201a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    201c:	8d 81       	ldd	r24, Y+5	; 0x05
    201e:	9e 81       	ldd	r25, Y+6	; 0x06
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	9e 83       	std	Y+6, r25	; 0x06
    2024:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2026:	8d 81       	ldd	r24, Y+5	; 0x05
    2028:	9e 81       	ldd	r25, Y+6	; 0x06
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	69 f7       	brne	.-38     	; 0x2008 <TASK_optionsDisplay+0x1fc>
    202e:	14 c0       	rjmp	.+40     	; 0x2058 <TASK_optionsDisplay+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2030:	6f 81       	ldd	r22, Y+7	; 0x07
    2032:	78 85       	ldd	r23, Y+8	; 0x08
    2034:	89 85       	ldd	r24, Y+9	; 0x09
    2036:	9a 85       	ldd	r25, Y+10	; 0x0a
    2038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	9e 83       	std	Y+6, r25	; 0x06
    2042:	8d 83       	std	Y+5, r24	; 0x05
    2044:	8d 81       	ldd	r24, Y+5	; 0x05
    2046:	9e 81       	ldd	r25, Y+6	; 0x06
    2048:	9a 83       	std	Y+2, r25	; 0x02
    204a:	89 83       	std	Y+1, r24	; 0x01
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	9a 81       	ldd	r25, Y+2	; 0x02
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	f1 f7       	brne	.-4      	; 0x2050 <TASK_optionsDisplay+0x244>
    2054:	9a 83       	std	Y+2, r25	; 0x02
    2056:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(500);

		while (UART_recieveByte() != CONTROL_ECU_IS_READY) {}
    2058:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <UART_recieveByte>
    205c:	8a 35       	cpi	r24, 0x5A	; 90
    205e:	e1 f7       	brne	.-8      	; 0x2058 <TASK_optionsDisplay+0x24c>
		UART_sendByte(User_Choice);
    2060:	80 91 72 01 	lds	r24, 0x0172
    2064:	0e 94 64 19 	call	0x32c8	; 0x32c8 <UART_sendByte>

		TASK_passwordCheck();
    2068:	0e 94 ba 14 	call	0x2974	; 0x2974 <TASK_passwordCheck>
	}
}
    206c:	6c 96       	adiw	r28, 0x1c	; 28
    206e:	0f b6       	in	r0, 0x3f	; 63
    2070:	f8 94       	cli
    2072:	de bf       	out	0x3e, r29	; 62
    2074:	0f be       	out	0x3f, r0	; 63
    2076:	cd bf       	out	0x3d, r28	; 61
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	08 95       	ret

0000207e <TASK_passwordChange>:

void TASK_passwordChange(void)
{
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	aa 97       	sbiw	r28, 0x2a	; 42
    2088:	0f b6       	in	r0, 0x3f	; 63
    208a:	f8 94       	cli
    208c:	de bf       	out	0x3e, r29	; 62
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	cd bf       	out	0x3d, r28	; 61
	flag = 1;
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	80 93 53 01 	sts	0x0153, r24

	LCD_clearScreen();
    2098:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_clearScreen>

	LCD_moveCursor(0, 0);
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	60 e0       	ldi	r22, 0x00	; 0
    20a0:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <LCD_moveCursor>
	LCD_displayString("Current password: ");
    20a4:	80 e8       	ldi	r24, 0x80	; 128
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_displayString>

	LCD_moveCursor(1, 0);
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	60 e0       	ldi	r22, 0x00	; 0
    20b0:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <LCD_moveCursor>

	UART_sendByte(HMI_ECU_IS_READY);
    20b4:	85 ea       	ldi	r24, 0xA5	; 165
    20b6:	0e 94 64 19 	call	0x32c8	; 0x32c8 <UART_sendByte>
	UART_receiveString(HMI_ECU_Password);
    20ba:	8c e7       	ldi	r24, 0x7C	; 124
    20bc:	91 e0       	ldi	r25, 0x01	; 1
    20be:	0e 94 a6 19 	call	0x334c	; 0x334c <UART_receiveString>
	HMI_ECU_Password[5]='#';
    20c2:	83 e2       	ldi	r24, 0x23	; 35
    20c4:	80 93 81 01 	sts	0x0181, r24

	i = 0;
    20c8:	10 92 7a 01 	sts	0x017A, r1
    20cc:	8c c0       	rjmp	.+280    	; 0x21e6 <TASK_passwordChange+0x168>
	while (i < 5)
	{
		 /* get the pressed key value */
		keyPressed = KEYPAD_getPressedKey();
    20ce:	0e 94 0a 09 	call	0x1214	; 0x1214 <KEYPAD_getPressedKey>
    20d2:	80 93 82 01 	sts	0x0182, r24

		/* Check every entered digit with the real password.
		 * Note: We add '0' to change the value from decimal to ascii
		 */
		if (HMI_ECU_Password[i] != keyPressed)
    20d6:	80 91 7a 01 	lds	r24, 0x017A
    20da:	88 2f       	mov	r24, r24
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	fc 01       	movw	r30, r24
    20e0:	e4 58       	subi	r30, 0x84	; 132
    20e2:	fe 4f       	sbci	r31, 0xFE	; 254
    20e4:	90 81       	ld	r25, Z
    20e6:	80 91 82 01 	lds	r24, 0x0182
    20ea:	98 17       	cp	r25, r24
    20ec:	11 f0       	breq	.+4      	; 0x20f2 <TASK_passwordChange+0x74>
			flag = 0;
    20ee:	10 92 53 01 	sts	0x0153, r1

		LCD_displayCharacter('*');
    20f2:	8a e2       	ldi	r24, 0x2A	; 42
    20f4:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_displayCharacter>
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	aa ef       	ldi	r26, 0xFA	; 250
    20fe:	b3 e4       	ldi	r27, 0x43	; 67
    2100:	8f a3       	std	Y+39, r24	; 0x27
    2102:	98 a7       	std	Y+40, r25	; 0x28
    2104:	a9 a7       	std	Y+41, r26	; 0x29
    2106:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2108:	6f a1       	ldd	r22, Y+39	; 0x27
    210a:	78 a5       	ldd	r23, Y+40	; 0x28
    210c:	89 a5       	ldd	r24, Y+41	; 0x29
    210e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	4a ef       	ldi	r20, 0xFA	; 250
    2116:	54 e4       	ldi	r21, 0x44	; 68
    2118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	8b a3       	std	Y+35, r24	; 0x23
    2122:	9c a3       	std	Y+36, r25	; 0x24
    2124:	ad a3       	std	Y+37, r26	; 0x25
    2126:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2128:	6b a1       	ldd	r22, Y+35	; 0x23
    212a:	7c a1       	ldd	r23, Y+36	; 0x24
    212c:	8d a1       	ldd	r24, Y+37	; 0x25
    212e:	9e a1       	ldd	r25, Y+38	; 0x26
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e8       	ldi	r20, 0x80	; 128
    2136:	5f e3       	ldi	r21, 0x3F	; 63
    2138:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    213c:	88 23       	and	r24, r24
    213e:	2c f4       	brge	.+10     	; 0x214a <TASK_passwordChange+0xcc>
		__ticks = 1;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	9a a3       	std	Y+34, r25	; 0x22
    2146:	89 a3       	std	Y+33, r24	; 0x21
    2148:	3f c0       	rjmp	.+126    	; 0x21c8 <TASK_passwordChange+0x14a>
	else if (__tmp > 65535)
    214a:	6b a1       	ldd	r22, Y+35	; 0x23
    214c:	7c a1       	ldd	r23, Y+36	; 0x24
    214e:	8d a1       	ldd	r24, Y+37	; 0x25
    2150:	9e a1       	ldd	r25, Y+38	; 0x26
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	3f ef       	ldi	r19, 0xFF	; 255
    2156:	4f e7       	ldi	r20, 0x7F	; 127
    2158:	57 e4       	ldi	r21, 0x47	; 71
    215a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    215e:	18 16       	cp	r1, r24
    2160:	4c f5       	brge	.+82     	; 0x21b4 <TASK_passwordChange+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2162:	6f a1       	ldd	r22, Y+39	; 0x27
    2164:	78 a5       	ldd	r23, Y+40	; 0x28
    2166:	89 a5       	ldd	r24, Y+41	; 0x29
    2168:	9a a5       	ldd	r25, Y+42	; 0x2a
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e2       	ldi	r20, 0x20	; 32
    2170:	51 e4       	ldi	r21, 0x41	; 65
    2172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	bc 01       	movw	r22, r24
    217c:	cd 01       	movw	r24, r26
    217e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	9a a3       	std	Y+34, r25	; 0x22
    2188:	89 a3       	std	Y+33, r24	; 0x21
    218a:	0f c0       	rjmp	.+30     	; 0x21aa <TASK_passwordChange+0x12c>
    218c:	88 ec       	ldi	r24, 0xC8	; 200
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	98 a3       	std	Y+32, r25	; 0x20
    2192:	8f 8f       	std	Y+31, r24	; 0x1f
    2194:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2196:	98 a1       	ldd	r25, Y+32	; 0x20
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	f1 f7       	brne	.-4      	; 0x2198 <TASK_passwordChange+0x11a>
    219c:	98 a3       	std	Y+32, r25	; 0x20
    219e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a0:	89 a1       	ldd	r24, Y+33	; 0x21
    21a2:	9a a1       	ldd	r25, Y+34	; 0x22
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	9a a3       	std	Y+34, r25	; 0x22
    21a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21aa:	89 a1       	ldd	r24, Y+33	; 0x21
    21ac:	9a a1       	ldd	r25, Y+34	; 0x22
    21ae:	00 97       	sbiw	r24, 0x00	; 0
    21b0:	69 f7       	brne	.-38     	; 0x218c <TASK_passwordChange+0x10e>
    21b2:	14 c0       	rjmp	.+40     	; 0x21dc <TASK_passwordChange+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b4:	6b a1       	ldd	r22, Y+35	; 0x23
    21b6:	7c a1       	ldd	r23, Y+36	; 0x24
    21b8:	8d a1       	ldd	r24, Y+37	; 0x25
    21ba:	9e a1       	ldd	r25, Y+38	; 0x26
    21bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	9a a3       	std	Y+34, r25	; 0x22
    21c6:	89 a3       	std	Y+33, r24	; 0x21
    21c8:	89 a1       	ldd	r24, Y+33	; 0x21
    21ca:	9a a1       	ldd	r25, Y+34	; 0x22
    21cc:	9e 8f       	std	Y+30, r25	; 0x1e
    21ce:	8d 8f       	std	Y+29, r24	; 0x1d
    21d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <TASK_passwordChange+0x156>
    21d8:	9e 8f       	std	Y+30, r25	; 0x1e
    21da:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(500); /* Press time */
		i++;
    21dc:	80 91 7a 01 	lds	r24, 0x017A
    21e0:	8f 5f       	subi	r24, 0xFF	; 255
    21e2:	80 93 7a 01 	sts	0x017A, r24
	UART_sendByte(HMI_ECU_IS_READY);
	UART_receiveString(HMI_ECU_Password);
	HMI_ECU_Password[5]='#';

	i = 0;
	while (i < 5)
    21e6:	80 91 7a 01 	lds	r24, 0x017A
    21ea:	85 30       	cpi	r24, 0x05	; 5
    21ec:	08 f4       	brcc	.+2      	; 0x21f0 <TASK_passwordChange+0x172>
    21ee:	6f cf       	rjmp	.-290    	; 0x20ce <TASK_passwordChange+0x50>
		_delay_ms(500); /* Press time */
		i++;
	}

	/* User entered the correct password */
	if (flag == 1)
    21f0:	80 91 53 01 	lds	r24, 0x0153
    21f4:	81 30       	cpi	r24, 0x01	; 1
    21f6:	51 f4       	brne	.+20     	; 0x220c <TASK_passwordChange+0x18e>
	{
		while (UART_recieveByte() != CONTROL_ECU_IS_READY);
    21f8:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <UART_recieveByte>
    21fc:	8a 35       	cpi	r24, 0x5A	; 90
    21fe:	e1 f7       	brne	.-8      	; 0x21f8 <TASK_passwordChange+0x17a>
		UART_sendByte(CORRECT);
    2200:	80 ef       	ldi	r24, 0xF0	; 240
    2202:	0e 94 64 19 	call	0x32c8	; 0x32c8 <UART_sendByte>

		TASK_newPasswordEnter();
    2206:	0e 94 53 12 	call	0x24a6	; 0x24a6 <TASK_newPasswordEnter>
    220a:	44 c1       	rjmp	.+648    	; 0x2494 <TASK_passwordChange+0x416>
	}
	/* User enter the wrong answer */
	else if (flag == 0)
    220c:	80 91 53 01 	lds	r24, 0x0153
    2210:	88 23       	and	r24, r24
    2212:	09 f0       	breq	.+2      	; 0x2216 <TASK_passwordChange+0x198>
    2214:	3f c1       	rjmp	.+638    	; 0x2494 <TASK_passwordChange+0x416>
	{
		j = 0;
    2216:	10 92 79 01 	sts	0x0179, r1
		do {
			flag = 1;
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	80 93 53 01 	sts	0x0153, r24

			LCD_clearScreen();
    2220:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_clearScreen>
			LCD_displayString("Wrong Password");
    2224:	83 e9       	ldi	r24, 0x93	; 147
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_displayString>
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	aa ef       	ldi	r26, 0xFA	; 250
    2232:	b3 e4       	ldi	r27, 0x43	; 67
    2234:	89 8f       	std	Y+25, r24	; 0x19
    2236:	9a 8f       	std	Y+26, r25	; 0x1a
    2238:	ab 8f       	std	Y+27, r26	; 0x1b
    223a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    223c:	69 8d       	ldd	r22, Y+25	; 0x19
    223e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2240:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2242:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	4a ef       	ldi	r20, 0xFA	; 250
    224a:	54 e4       	ldi	r21, 0x44	; 68
    224c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	8d 8b       	std	Y+21, r24	; 0x15
    2256:	9e 8b       	std	Y+22, r25	; 0x16
    2258:	af 8b       	std	Y+23, r26	; 0x17
    225a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    225c:	6d 89       	ldd	r22, Y+21	; 0x15
    225e:	7e 89       	ldd	r23, Y+22	; 0x16
    2260:	8f 89       	ldd	r24, Y+23	; 0x17
    2262:	98 8d       	ldd	r25, Y+24	; 0x18
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	40 e8       	ldi	r20, 0x80	; 128
    226a:	5f e3       	ldi	r21, 0x3F	; 63
    226c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2270:	88 23       	and	r24, r24
    2272:	2c f4       	brge	.+10     	; 0x227e <TASK_passwordChange+0x200>
		__ticks = 1;
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	9c 8b       	std	Y+20, r25	; 0x14
    227a:	8b 8b       	std	Y+19, r24	; 0x13
    227c:	3f c0       	rjmp	.+126    	; 0x22fc <TASK_passwordChange+0x27e>
	else if (__tmp > 65535)
    227e:	6d 89       	ldd	r22, Y+21	; 0x15
    2280:	7e 89       	ldd	r23, Y+22	; 0x16
    2282:	8f 89       	ldd	r24, Y+23	; 0x17
    2284:	98 8d       	ldd	r25, Y+24	; 0x18
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	3f ef       	ldi	r19, 0xFF	; 255
    228a:	4f e7       	ldi	r20, 0x7F	; 127
    228c:	57 e4       	ldi	r21, 0x47	; 71
    228e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2292:	18 16       	cp	r1, r24
    2294:	4c f5       	brge	.+82     	; 0x22e8 <TASK_passwordChange+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2296:	69 8d       	ldd	r22, Y+25	; 0x19
    2298:	7a 8d       	ldd	r23, Y+26	; 0x1a
    229a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    229c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e2       	ldi	r20, 0x20	; 32
    22a4:	51 e4       	ldi	r21, 0x41	; 65
    22a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	bc 01       	movw	r22, r24
    22b0:	cd 01       	movw	r24, r26
    22b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	9c 8b       	std	Y+20, r25	; 0x14
    22bc:	8b 8b       	std	Y+19, r24	; 0x13
    22be:	0f c0       	rjmp	.+30     	; 0x22de <TASK_passwordChange+0x260>
    22c0:	88 ec       	ldi	r24, 0xC8	; 200
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	9a 8b       	std	Y+18, r25	; 0x12
    22c6:	89 8b       	std	Y+17, r24	; 0x11
    22c8:	89 89       	ldd	r24, Y+17	; 0x11
    22ca:	9a 89       	ldd	r25, Y+18	; 0x12
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	f1 f7       	brne	.-4      	; 0x22cc <TASK_passwordChange+0x24e>
    22d0:	9a 8b       	std	Y+18, r25	; 0x12
    22d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d4:	8b 89       	ldd	r24, Y+19	; 0x13
    22d6:	9c 89       	ldd	r25, Y+20	; 0x14
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	9c 8b       	std	Y+20, r25	; 0x14
    22dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22de:	8b 89       	ldd	r24, Y+19	; 0x13
    22e0:	9c 89       	ldd	r25, Y+20	; 0x14
    22e2:	00 97       	sbiw	r24, 0x00	; 0
    22e4:	69 f7       	brne	.-38     	; 0x22c0 <TASK_passwordChange+0x242>
    22e6:	14 c0       	rjmp	.+40     	; 0x2310 <TASK_passwordChange+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e8:	6d 89       	ldd	r22, Y+21	; 0x15
    22ea:	7e 89       	ldd	r23, Y+22	; 0x16
    22ec:	8f 89       	ldd	r24, Y+23	; 0x17
    22ee:	98 8d       	ldd	r25, Y+24	; 0x18
    22f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	9c 8b       	std	Y+20, r25	; 0x14
    22fa:	8b 8b       	std	Y+19, r24	; 0x13
    22fc:	8b 89       	ldd	r24, Y+19	; 0x13
    22fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2300:	98 8b       	std	Y+16, r25	; 0x10
    2302:	8f 87       	std	Y+15, r24	; 0x0f
    2304:	8f 85       	ldd	r24, Y+15	; 0x0f
    2306:	98 89       	ldd	r25, Y+16	; 0x10
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	f1 f7       	brne	.-4      	; 0x2308 <TASK_passwordChange+0x28a>
    230c:	98 8b       	std	Y+16, r25	; 0x10
    230e:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(500);

			LCD_clearScreen();
    2310:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_clearScreen>
			LCD_displayString("Current Password:");
    2314:	82 ea       	ldi	r24, 0xA2	; 162
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_displayString>
			LCD_moveCursor(1, 0);
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	60 e0       	ldi	r22, 0x00	; 0
    2320:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <LCD_moveCursor>

			i = 0;
    2324:	10 92 7a 01 	sts	0x017A, r1
    2328:	92 c0       	rjmp	.+292    	; 0x244e <TASK_passwordChange+0x3d0>
			while (i<5)
			{
				/* Get the pressed key value */
				keyPressed = KEYPAD_getPressedKey();
    232a:	0e 94 0a 09 	call	0x1214	; 0x1214 <KEYPAD_getPressedKey>
    232e:	80 93 82 01 	sts	0x0182, r24

				/* Check every entered digit with the real password.
				 * Note: We add '0' to change the value from decimal to ascii
				 */
				if (HMI_ECU_Password[i] != keyPressed + '0')
    2332:	80 91 7a 01 	lds	r24, 0x017A
    2336:	88 2f       	mov	r24, r24
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	fc 01       	movw	r30, r24
    233c:	e4 58       	subi	r30, 0x84	; 132
    233e:	fe 4f       	sbci	r31, 0xFE	; 254
    2340:	80 81       	ld	r24, Z
    2342:	28 2f       	mov	r18, r24
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	80 91 82 01 	lds	r24, 0x0182
    234a:	88 2f       	mov	r24, r24
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	c0 96       	adiw	r24, 0x30	; 48
    2350:	28 17       	cp	r18, r24
    2352:	39 07       	cpc	r19, r25
    2354:	11 f0       	breq	.+4      	; 0x235a <TASK_passwordChange+0x2dc>
					flag = 0;
    2356:	10 92 53 01 	sts	0x0153, r1

				LCD_displayCharacter('*');
    235a:	8a e2       	ldi	r24, 0x2A	; 42
    235c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_displayCharacter>
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	aa ef       	ldi	r26, 0xFA	; 250
    2366:	b3 e4       	ldi	r27, 0x43	; 67
    2368:	8b 87       	std	Y+11, r24	; 0x0b
    236a:	9c 87       	std	Y+12, r25	; 0x0c
    236c:	ad 87       	std	Y+13, r26	; 0x0d
    236e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2370:	6b 85       	ldd	r22, Y+11	; 0x0b
    2372:	7c 85       	ldd	r23, Y+12	; 0x0c
    2374:	8d 85       	ldd	r24, Y+13	; 0x0d
    2376:	9e 85       	ldd	r25, Y+14	; 0x0e
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	4a ef       	ldi	r20, 0xFA	; 250
    237e:	54 e4       	ldi	r21, 0x44	; 68
    2380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	8f 83       	std	Y+7, r24	; 0x07
    238a:	98 87       	std	Y+8, r25	; 0x08
    238c:	a9 87       	std	Y+9, r26	; 0x09
    238e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2390:	6f 81       	ldd	r22, Y+7	; 0x07
    2392:	78 85       	ldd	r23, Y+8	; 0x08
    2394:	89 85       	ldd	r24, Y+9	; 0x09
    2396:	9a 85       	ldd	r25, Y+10	; 0x0a
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	40 e8       	ldi	r20, 0x80	; 128
    239e:	5f e3       	ldi	r21, 0x3F	; 63
    23a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23a4:	88 23       	and	r24, r24
    23a6:	2c f4       	brge	.+10     	; 0x23b2 <TASK_passwordChange+0x334>
		__ticks = 1;
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	9e 83       	std	Y+6, r25	; 0x06
    23ae:	8d 83       	std	Y+5, r24	; 0x05
    23b0:	3f c0       	rjmp	.+126    	; 0x2430 <TASK_passwordChange+0x3b2>
	else if (__tmp > 65535)
    23b2:	6f 81       	ldd	r22, Y+7	; 0x07
    23b4:	78 85       	ldd	r23, Y+8	; 0x08
    23b6:	89 85       	ldd	r24, Y+9	; 0x09
    23b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	3f ef       	ldi	r19, 0xFF	; 255
    23be:	4f e7       	ldi	r20, 0x7F	; 127
    23c0:	57 e4       	ldi	r21, 0x47	; 71
    23c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23c6:	18 16       	cp	r1, r24
    23c8:	4c f5       	brge	.+82     	; 0x241c <TASK_passwordChange+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    23cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e2       	ldi	r20, 0x20	; 32
    23d8:	51 e4       	ldi	r21, 0x41	; 65
    23da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	bc 01       	movw	r22, r24
    23e4:	cd 01       	movw	r24, r26
    23e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	9e 83       	std	Y+6, r25	; 0x06
    23f0:	8d 83       	std	Y+5, r24	; 0x05
    23f2:	0f c0       	rjmp	.+30     	; 0x2412 <TASK_passwordChange+0x394>
    23f4:	88 ec       	ldi	r24, 0xC8	; 200
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	9c 83       	std	Y+4, r25	; 0x04
    23fa:	8b 83       	std	Y+3, r24	; 0x03
    23fc:	8b 81       	ldd	r24, Y+3	; 0x03
    23fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <TASK_passwordChange+0x382>
    2404:	9c 83       	std	Y+4, r25	; 0x04
    2406:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2408:	8d 81       	ldd	r24, Y+5	; 0x05
    240a:	9e 81       	ldd	r25, Y+6	; 0x06
    240c:	01 97       	sbiw	r24, 0x01	; 1
    240e:	9e 83       	std	Y+6, r25	; 0x06
    2410:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2412:	8d 81       	ldd	r24, Y+5	; 0x05
    2414:	9e 81       	ldd	r25, Y+6	; 0x06
    2416:	00 97       	sbiw	r24, 0x00	; 0
    2418:	69 f7       	brne	.-38     	; 0x23f4 <TASK_passwordChange+0x376>
    241a:	14 c0       	rjmp	.+40     	; 0x2444 <TASK_passwordChange+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    241c:	6f 81       	ldd	r22, Y+7	; 0x07
    241e:	78 85       	ldd	r23, Y+8	; 0x08
    2420:	89 85       	ldd	r24, Y+9	; 0x09
    2422:	9a 85       	ldd	r25, Y+10	; 0x0a
    2424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	9e 83       	std	Y+6, r25	; 0x06
    242e:	8d 83       	std	Y+5, r24	; 0x05
    2430:	8d 81       	ldd	r24, Y+5	; 0x05
    2432:	9e 81       	ldd	r25, Y+6	; 0x06
    2434:	9a 83       	std	Y+2, r25	; 0x02
    2436:	89 83       	std	Y+1, r24	; 0x01
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	9a 81       	ldd	r25, Y+2	; 0x02
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	f1 f7       	brne	.-4      	; 0x243c <TASK_passwordChange+0x3be>
    2440:	9a 83       	std	Y+2, r25	; 0x02
    2442:	89 83       	std	Y+1, r24	; 0x01

				_delay_ms(500); /* Press time */
				i++;
    2444:	80 91 7a 01 	lds	r24, 0x017A
    2448:	8f 5f       	subi	r24, 0xFF	; 255
    244a:	80 93 7a 01 	sts	0x017A, r24
			LCD_clearScreen();
			LCD_displayString("Current Password:");
			LCD_moveCursor(1, 0);

			i = 0;
			while (i<5)
    244e:	80 91 7a 01 	lds	r24, 0x017A
    2452:	85 30       	cpi	r24, 0x05	; 5
    2454:	08 f4       	brcc	.+2      	; 0x2458 <TASK_passwordChange+0x3da>
    2456:	69 cf       	rjmp	.-302    	; 0x232a <TASK_passwordChange+0x2ac>

				_delay_ms(500); /* Press time */
				i++;
			}

			j++;
    2458:	80 91 79 01 	lds	r24, 0x0179
    245c:	8f 5f       	subi	r24, 0xFF	; 255
    245e:	80 93 79 01 	sts	0x0179, r24

		} while ((j < 2) && (flag == 0));
    2462:	80 91 79 01 	lds	r24, 0x0179
    2466:	82 30       	cpi	r24, 0x02	; 2
    2468:	28 f4       	brcc	.+10     	; 0x2474 <TASK_passwordChange+0x3f6>
    246a:	80 91 53 01 	lds	r24, 0x0153
    246e:	88 23       	and	r24, r24
    2470:	09 f4       	brne	.+2      	; 0x2474 <TASK_passwordChange+0x3f6>
    2472:	d3 ce       	rjmp	.-602    	; 0x221a <TASK_passwordChange+0x19c>

		/* If the user enters 3 consecutive wrong passwords, the CONTROL_ECU should raises an alarm! */
		if (flag == 0)
    2474:	80 91 53 01 	lds	r24, 0x0153
    2478:	88 23       	and	r24, r24
    247a:	19 f4       	brne	.+6      	; 0x2482 <TASK_passwordChange+0x404>
		{
			TASK_alert();
    247c:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <TASK_alert>
    2480:	09 c0       	rjmp	.+18     	; 0x2494 <TASK_passwordChange+0x416>
		}
		else
		{
			while (UART_recieveByte() != CONTROL_ECU_IS_READY);
    2482:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <UART_recieveByte>
    2486:	8a 35       	cpi	r24, 0x5A	; 90
    2488:	e1 f7       	brne	.-8      	; 0x2482 <TASK_passwordChange+0x404>
			UART_sendByte(CORRECT);
    248a:	80 ef       	ldi	r24, 0xF0	; 240
    248c:	0e 94 64 19 	call	0x32c8	; 0x32c8 <UART_sendByte>

			TASK_newPasswordEnter();
    2490:	0e 94 53 12 	call	0x24a6	; 0x24a6 <TASK_newPasswordEnter>
		}
	}
}
    2494:	aa 96       	adiw	r28, 0x2a	; 42
    2496:	0f b6       	in	r0, 0x3f	; 63
    2498:	f8 94       	cli
    249a:	de bf       	out	0x3e, r29	; 62
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	cd bf       	out	0x3d, r28	; 61
    24a0:	cf 91       	pop	r28
    24a2:	df 91       	pop	r29
    24a4:	08 95       	ret

000024a6 <TASK_newPasswordEnter>:

void TASK_newPasswordEnter(void)
{
    24a6:	df 93       	push	r29
    24a8:	cf 93       	push	r28
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
    24ae:	e8 97       	sbiw	r28, 0x38	; 56
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
	while (1)
	{
		flag = 1;
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	80 93 53 01 	sts	0x0153, r24
		LCD_clearScreen();
    24c0:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_clearScreen>
		LCD_displayString("Enter new pass:");
    24c4:	84 eb       	ldi	r24, 0xB4	; 180
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_displayString>
		LCD_moveCursor(1, 0);
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	60 e0       	ldi	r22, 0x00	; 0
    24d0:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <LCD_moveCursor>

		i = 0;
    24d4:	10 92 7a 01 	sts	0x017A, r1
    24d8:	92 c0       	rjmp	.+292    	; 0x25fe <TASK_newPasswordEnter+0x158>
		while (i < 5)
		{
			 /* Get the pressed key number */
			keyPressed = KEYPAD_getPressedKey();
    24da:	0e 94 0a 09 	call	0x1214	; 0x1214 <KEYPAD_getPressedKey>
    24de:	80 93 82 01 	sts	0x0182, r24

			if ((keyPressed >= '0') && (keyPressed <= '9'))
    24e2:	80 91 82 01 	lds	r24, 0x0182
    24e6:	80 33       	cpi	r24, 0x30	; 48
    24e8:	08 f4       	brcc	.+2      	; 0x24ec <TASK_newPasswordEnter+0x46>
    24ea:	89 c0       	rjmp	.+274    	; 0x25fe <TASK_newPasswordEnter+0x158>
    24ec:	80 91 82 01 	lds	r24, 0x0182
    24f0:	8a 33       	cpi	r24, 0x3A	; 58
    24f2:	08 f0       	brcs	.+2      	; 0x24f6 <TASK_newPasswordEnter+0x50>
    24f4:	84 c0       	rjmp	.+264    	; 0x25fe <TASK_newPasswordEnter+0x158>
			{
				HMI_ECU_Password[i] = keyPressed;
    24f6:	80 91 7a 01 	lds	r24, 0x017A
    24fa:	88 2f       	mov	r24, r24
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	20 91 82 01 	lds	r18, 0x0182
    2502:	fc 01       	movw	r30, r24
    2504:	e4 58       	subi	r30, 0x84	; 132
    2506:	fe 4f       	sbci	r31, 0xFE	; 254
    2508:	20 83       	st	Z, r18

				LCD_displayCharacter('*');
    250a:	8a e2       	ldi	r24, 0x2A	; 42
    250c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_displayCharacter>
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	aa ef       	ldi	r26, 0xFA	; 250
    2516:	b3 e4       	ldi	r27, 0x43	; 67
    2518:	8d ab       	std	Y+53, r24	; 0x35
    251a:	9e ab       	std	Y+54, r25	; 0x36
    251c:	af ab       	std	Y+55, r26	; 0x37
    251e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2520:	6d a9       	ldd	r22, Y+53	; 0x35
    2522:	7e a9       	ldd	r23, Y+54	; 0x36
    2524:	8f a9       	ldd	r24, Y+55	; 0x37
    2526:	98 ad       	ldd	r25, Y+56	; 0x38
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	4a ef       	ldi	r20, 0xFA	; 250
    252e:	54 e4       	ldi	r21, 0x44	; 68
    2530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	89 ab       	std	Y+49, r24	; 0x31
    253a:	9a ab       	std	Y+50, r25	; 0x32
    253c:	ab ab       	std	Y+51, r26	; 0x33
    253e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2540:	69 a9       	ldd	r22, Y+49	; 0x31
    2542:	7a a9       	ldd	r23, Y+50	; 0x32
    2544:	8b a9       	ldd	r24, Y+51	; 0x33
    2546:	9c a9       	ldd	r25, Y+52	; 0x34
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	40 e8       	ldi	r20, 0x80	; 128
    254e:	5f e3       	ldi	r21, 0x3F	; 63
    2550:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2554:	88 23       	and	r24, r24
    2556:	2c f4       	brge	.+10     	; 0x2562 <TASK_newPasswordEnter+0xbc>
		__ticks = 1;
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	98 ab       	std	Y+48, r25	; 0x30
    255e:	8f a7       	std	Y+47, r24	; 0x2f
    2560:	3f c0       	rjmp	.+126    	; 0x25e0 <TASK_newPasswordEnter+0x13a>
	else if (__tmp > 65535)
    2562:	69 a9       	ldd	r22, Y+49	; 0x31
    2564:	7a a9       	ldd	r23, Y+50	; 0x32
    2566:	8b a9       	ldd	r24, Y+51	; 0x33
    2568:	9c a9       	ldd	r25, Y+52	; 0x34
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	3f ef       	ldi	r19, 0xFF	; 255
    256e:	4f e7       	ldi	r20, 0x7F	; 127
    2570:	57 e4       	ldi	r21, 0x47	; 71
    2572:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2576:	18 16       	cp	r1, r24
    2578:	4c f5       	brge	.+82     	; 0x25cc <TASK_newPasswordEnter+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    257a:	6d a9       	ldd	r22, Y+53	; 0x35
    257c:	7e a9       	ldd	r23, Y+54	; 0x36
    257e:	8f a9       	ldd	r24, Y+55	; 0x37
    2580:	98 ad       	ldd	r25, Y+56	; 0x38
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	40 e2       	ldi	r20, 0x20	; 32
    2588:	51 e4       	ldi	r21, 0x41	; 65
    258a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	bc 01       	movw	r22, r24
    2594:	cd 01       	movw	r24, r26
    2596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	98 ab       	std	Y+48, r25	; 0x30
    25a0:	8f a7       	std	Y+47, r24	; 0x2f
    25a2:	0f c0       	rjmp	.+30     	; 0x25c2 <TASK_newPasswordEnter+0x11c>
    25a4:	88 ec       	ldi	r24, 0xC8	; 200
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	9e a7       	std	Y+46, r25	; 0x2e
    25aa:	8d a7       	std	Y+45, r24	; 0x2d
    25ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    25ae:	9e a5       	ldd	r25, Y+46	; 0x2e
    25b0:	01 97       	sbiw	r24, 0x01	; 1
    25b2:	f1 f7       	brne	.-4      	; 0x25b0 <TASK_newPasswordEnter+0x10a>
    25b4:	9e a7       	std	Y+46, r25	; 0x2e
    25b6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    25ba:	98 a9       	ldd	r25, Y+48	; 0x30
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	98 ab       	std	Y+48, r25	; 0x30
    25c0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    25c4:	98 a9       	ldd	r25, Y+48	; 0x30
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	69 f7       	brne	.-38     	; 0x25a4 <TASK_newPasswordEnter+0xfe>
    25ca:	14 c0       	rjmp	.+40     	; 0x25f4 <TASK_newPasswordEnter+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25cc:	69 a9       	ldd	r22, Y+49	; 0x31
    25ce:	7a a9       	ldd	r23, Y+50	; 0x32
    25d0:	8b a9       	ldd	r24, Y+51	; 0x33
    25d2:	9c a9       	ldd	r25, Y+52	; 0x34
    25d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	98 ab       	std	Y+48, r25	; 0x30
    25de:	8f a7       	std	Y+47, r24	; 0x2f
    25e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    25e2:	98 a9       	ldd	r25, Y+48	; 0x30
    25e4:	9c a7       	std	Y+44, r25	; 0x2c
    25e6:	8b a7       	std	Y+43, r24	; 0x2b
    25e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    25ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <TASK_newPasswordEnter+0x146>
    25f0:	9c a7       	std	Y+44, r25	; 0x2c
    25f2:	8b a7       	std	Y+43, r24	; 0x2b

				_delay_ms(500); /* Press time */
				i++;
    25f4:	80 91 7a 01 	lds	r24, 0x017A
    25f8:	8f 5f       	subi	r24, 0xFF	; 255
    25fa:	80 93 7a 01 	sts	0x017A, r24
		LCD_clearScreen();
		LCD_displayString("Enter new pass:");
		LCD_moveCursor(1, 0);

		i = 0;
		while (i < 5)
    25fe:	80 91 7a 01 	lds	r24, 0x017A
    2602:	85 30       	cpi	r24, 0x05	; 5
    2604:	08 f4       	brcc	.+2      	; 0x2608 <TASK_newPasswordEnter+0x162>
    2606:	69 cf       	rjmp	.-302    	; 0x24da <TASK_newPasswordEnter+0x34>
				_delay_ms(500); /* Press time */
				i++;
			}
		}

		LCD_clearScreen();
    2608:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_clearScreen>
		LCD_displayString("Re-enter the pass:");
    260c:	84 ec       	ldi	r24, 0xC4	; 196
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_displayString>
		LCD_moveCursor(1, 0);
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	60 e0       	ldi	r22, 0x00	; 0
    2618:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <LCD_moveCursor>

		i = 0;
    261c:	10 92 7a 01 	sts	0x017A, r1
    2620:	96 c0       	rjmp	.+300    	; 0x274e <TASK_newPasswordEnter+0x2a8>
		while (i < 5)
		{
			/* Get the pressed key number */
			keyPressed = KEYPAD_getPressedKey();
    2622:	0e 94 0a 09 	call	0x1214	; 0x1214 <KEYPAD_getPressedKey>
    2626:	80 93 82 01 	sts	0x0182, r24

			if ((keyPressed >= '0') && (keyPressed <= '9'))
    262a:	80 91 82 01 	lds	r24, 0x0182
    262e:	80 33       	cpi	r24, 0x30	; 48
    2630:	08 f4       	brcc	.+2      	; 0x2634 <TASK_newPasswordEnter+0x18e>
    2632:	8d c0       	rjmp	.+282    	; 0x274e <TASK_newPasswordEnter+0x2a8>
    2634:	80 91 82 01 	lds	r24, 0x0182
    2638:	8a 33       	cpi	r24, 0x3A	; 58
    263a:	08 f0       	brcs	.+2      	; 0x263e <TASK_newPasswordEnter+0x198>
    263c:	88 c0       	rjmp	.+272    	; 0x274e <TASK_newPasswordEnter+0x2a8>
			{
				if (HMI_ECU_Password[i] != (keyPressed))
    263e:	80 91 7a 01 	lds	r24, 0x017A
    2642:	88 2f       	mov	r24, r24
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	fc 01       	movw	r30, r24
    2648:	e4 58       	subi	r30, 0x84	; 132
    264a:	fe 4f       	sbci	r31, 0xFE	; 254
    264c:	90 81       	ld	r25, Z
    264e:	80 91 82 01 	lds	r24, 0x0182
    2652:	98 17       	cp	r25, r24
    2654:	11 f0       	breq	.+4      	; 0x265a <TASK_newPasswordEnter+0x1b4>
					flag = 0;
    2656:	10 92 53 01 	sts	0x0153, r1

				LCD_displayCharacter('*');
    265a:	8a e2       	ldi	r24, 0x2A	; 42
    265c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_displayCharacter>
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	aa ef       	ldi	r26, 0xFA	; 250
    2666:	b3 e4       	ldi	r27, 0x43	; 67
    2668:	8f a3       	std	Y+39, r24	; 0x27
    266a:	98 a7       	std	Y+40, r25	; 0x28
    266c:	a9 a7       	std	Y+41, r26	; 0x29
    266e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2670:	6f a1       	ldd	r22, Y+39	; 0x27
    2672:	78 a5       	ldd	r23, Y+40	; 0x28
    2674:	89 a5       	ldd	r24, Y+41	; 0x29
    2676:	9a a5       	ldd	r25, Y+42	; 0x2a
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	4a ef       	ldi	r20, 0xFA	; 250
    267e:	54 e4       	ldi	r21, 0x44	; 68
    2680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	8b a3       	std	Y+35, r24	; 0x23
    268a:	9c a3       	std	Y+36, r25	; 0x24
    268c:	ad a3       	std	Y+37, r26	; 0x25
    268e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2690:	6b a1       	ldd	r22, Y+35	; 0x23
    2692:	7c a1       	ldd	r23, Y+36	; 0x24
    2694:	8d a1       	ldd	r24, Y+37	; 0x25
    2696:	9e a1       	ldd	r25, Y+38	; 0x26
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	40 e8       	ldi	r20, 0x80	; 128
    269e:	5f e3       	ldi	r21, 0x3F	; 63
    26a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26a4:	88 23       	and	r24, r24
    26a6:	2c f4       	brge	.+10     	; 0x26b2 <TASK_newPasswordEnter+0x20c>
		__ticks = 1;
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	9a a3       	std	Y+34, r25	; 0x22
    26ae:	89 a3       	std	Y+33, r24	; 0x21
    26b0:	3f c0       	rjmp	.+126    	; 0x2730 <TASK_newPasswordEnter+0x28a>
	else if (__tmp > 65535)
    26b2:	6b a1       	ldd	r22, Y+35	; 0x23
    26b4:	7c a1       	ldd	r23, Y+36	; 0x24
    26b6:	8d a1       	ldd	r24, Y+37	; 0x25
    26b8:	9e a1       	ldd	r25, Y+38	; 0x26
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	3f ef       	ldi	r19, 0xFF	; 255
    26be:	4f e7       	ldi	r20, 0x7F	; 127
    26c0:	57 e4       	ldi	r21, 0x47	; 71
    26c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26c6:	18 16       	cp	r1, r24
    26c8:	4c f5       	brge	.+82     	; 0x271c <TASK_newPasswordEnter+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ca:	6f a1       	ldd	r22, Y+39	; 0x27
    26cc:	78 a5       	ldd	r23, Y+40	; 0x28
    26ce:	89 a5       	ldd	r24, Y+41	; 0x29
    26d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	40 e2       	ldi	r20, 0x20	; 32
    26d8:	51 e4       	ldi	r21, 0x41	; 65
    26da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	bc 01       	movw	r22, r24
    26e4:	cd 01       	movw	r24, r26
    26e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	9a a3       	std	Y+34, r25	; 0x22
    26f0:	89 a3       	std	Y+33, r24	; 0x21
    26f2:	0f c0       	rjmp	.+30     	; 0x2712 <TASK_newPasswordEnter+0x26c>
    26f4:	88 ec       	ldi	r24, 0xC8	; 200
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	98 a3       	std	Y+32, r25	; 0x20
    26fa:	8f 8f       	std	Y+31, r24	; 0x1f
    26fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26fe:	98 a1       	ldd	r25, Y+32	; 0x20
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	f1 f7       	brne	.-4      	; 0x2700 <TASK_newPasswordEnter+0x25a>
    2704:	98 a3       	std	Y+32, r25	; 0x20
    2706:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2708:	89 a1       	ldd	r24, Y+33	; 0x21
    270a:	9a a1       	ldd	r25, Y+34	; 0x22
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	9a a3       	std	Y+34, r25	; 0x22
    2710:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2712:	89 a1       	ldd	r24, Y+33	; 0x21
    2714:	9a a1       	ldd	r25, Y+34	; 0x22
    2716:	00 97       	sbiw	r24, 0x00	; 0
    2718:	69 f7       	brne	.-38     	; 0x26f4 <TASK_newPasswordEnter+0x24e>
    271a:	14 c0       	rjmp	.+40     	; 0x2744 <TASK_newPasswordEnter+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    271c:	6b a1       	ldd	r22, Y+35	; 0x23
    271e:	7c a1       	ldd	r23, Y+36	; 0x24
    2720:	8d a1       	ldd	r24, Y+37	; 0x25
    2722:	9e a1       	ldd	r25, Y+38	; 0x26
    2724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	9a a3       	std	Y+34, r25	; 0x22
    272e:	89 a3       	std	Y+33, r24	; 0x21
    2730:	89 a1       	ldd	r24, Y+33	; 0x21
    2732:	9a a1       	ldd	r25, Y+34	; 0x22
    2734:	9e 8f       	std	Y+30, r25	; 0x1e
    2736:	8d 8f       	std	Y+29, r24	; 0x1d
    2738:	8d 8d       	ldd	r24, Y+29	; 0x1d
    273a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	f1 f7       	brne	.-4      	; 0x273c <TASK_newPasswordEnter+0x296>
    2740:	9e 8f       	std	Y+30, r25	; 0x1e
    2742:	8d 8f       	std	Y+29, r24	; 0x1d

				_delay_ms(500); /* Press time */
				i++;
    2744:	80 91 7a 01 	lds	r24, 0x017A
    2748:	8f 5f       	subi	r24, 0xFF	; 255
    274a:	80 93 7a 01 	sts	0x017A, r24
		LCD_clearScreen();
		LCD_displayString("Re-enter the pass:");
		LCD_moveCursor(1, 0);

		i = 0;
		while (i < 5)
    274e:	80 91 7a 01 	lds	r24, 0x017A
    2752:	85 30       	cpi	r24, 0x05	; 5
    2754:	08 f4       	brcc	.+2      	; 0x2758 <TASK_newPasswordEnter+0x2b2>
    2756:	65 cf       	rjmp	.-310    	; 0x2622 <TASK_newPasswordEnter+0x17c>
				_delay_ms(500); /* Press time */
				i++;
			}
		}

		if (flag == 1)
    2758:	80 91 53 01 	lds	r24, 0x0153
    275c:	81 30       	cpi	r24, 0x01	; 1
    275e:	09 f0       	breq	.+2      	; 0x2762 <TASK_newPasswordEnter+0x2bc>
    2760:	87 c0       	rjmp	.+270    	; 0x2870 <TASK_newPasswordEnter+0x3ca>
		{
			/*Adding the last string character # for UART receiving and sending*/
			HMI_ECU_Password[5]= '#';
    2762:	83 e2       	ldi	r24, 0x23	; 35
    2764:	80 93 81 01 	sts	0x0181, r24

			while(UART_recieveByte() != CONTROL_ECU_IS_READY);
    2768:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <UART_recieveByte>
    276c:	8a 35       	cpi	r24, 0x5A	; 90
    276e:	e1 f7       	brne	.-8      	; 0x2768 <TASK_newPasswordEnter+0x2c2>
			UART_sendString(HMI_ECU_Password);
    2770:	8c e7       	ldi	r24, 0x7C	; 124
    2772:	91 e0       	ldi	r25, 0x01	; 1
    2774:	0e 94 8a 19 	call	0x3314	; 0x3314 <UART_sendString>

			IsRecorded = 1;
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	80 93 7b 01 	sts	0x017B, r24

			LCD_clearScreen();
    277e:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_clearScreen>
			LCD_displayString("Password is Recorded!");
    2782:	87 ed       	ldi	r24, 0xD7	; 215
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_displayString>
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	aa e7       	ldi	r26, 0x7A	; 122
    2790:	b4 e4       	ldi	r27, 0x44	; 68
    2792:	89 8f       	std	Y+25, r24	; 0x19
    2794:	9a 8f       	std	Y+26, r25	; 0x1a
    2796:	ab 8f       	std	Y+27, r26	; 0x1b
    2798:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    279a:	69 8d       	ldd	r22, Y+25	; 0x19
    279c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    279e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	4a ef       	ldi	r20, 0xFA	; 250
    27a8:	54 e4       	ldi	r21, 0x44	; 68
    27aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	8d 8b       	std	Y+21, r24	; 0x15
    27b4:	9e 8b       	std	Y+22, r25	; 0x16
    27b6:	af 8b       	std	Y+23, r26	; 0x17
    27b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27ba:	6d 89       	ldd	r22, Y+21	; 0x15
    27bc:	7e 89       	ldd	r23, Y+22	; 0x16
    27be:	8f 89       	ldd	r24, Y+23	; 0x17
    27c0:	98 8d       	ldd	r25, Y+24	; 0x18
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	40 e8       	ldi	r20, 0x80	; 128
    27c8:	5f e3       	ldi	r21, 0x3F	; 63
    27ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ce:	88 23       	and	r24, r24
    27d0:	2c f4       	brge	.+10     	; 0x27dc <TASK_newPasswordEnter+0x336>
		__ticks = 1;
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	9c 8b       	std	Y+20, r25	; 0x14
    27d8:	8b 8b       	std	Y+19, r24	; 0x13
    27da:	3f c0       	rjmp	.+126    	; 0x285a <TASK_newPasswordEnter+0x3b4>
	else if (__tmp > 65535)
    27dc:	6d 89       	ldd	r22, Y+21	; 0x15
    27de:	7e 89       	ldd	r23, Y+22	; 0x16
    27e0:	8f 89       	ldd	r24, Y+23	; 0x17
    27e2:	98 8d       	ldd	r25, Y+24	; 0x18
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	3f ef       	ldi	r19, 0xFF	; 255
    27e8:	4f e7       	ldi	r20, 0x7F	; 127
    27ea:	57 e4       	ldi	r21, 0x47	; 71
    27ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27f0:	18 16       	cp	r1, r24
    27f2:	4c f5       	brge	.+82     	; 0x2846 <TASK_newPasswordEnter+0x3a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f4:	69 8d       	ldd	r22, Y+25	; 0x19
    27f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e2       	ldi	r20, 0x20	; 32
    2802:	51 e4       	ldi	r21, 0x41	; 65
    2804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	bc 01       	movw	r22, r24
    280e:	cd 01       	movw	r24, r26
    2810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	9c 8b       	std	Y+20, r25	; 0x14
    281a:	8b 8b       	std	Y+19, r24	; 0x13
    281c:	0f c0       	rjmp	.+30     	; 0x283c <TASK_newPasswordEnter+0x396>
    281e:	88 ec       	ldi	r24, 0xC8	; 200
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	9a 8b       	std	Y+18, r25	; 0x12
    2824:	89 8b       	std	Y+17, r24	; 0x11
    2826:	89 89       	ldd	r24, Y+17	; 0x11
    2828:	9a 89       	ldd	r25, Y+18	; 0x12
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	f1 f7       	brne	.-4      	; 0x282a <TASK_newPasswordEnter+0x384>
    282e:	9a 8b       	std	Y+18, r25	; 0x12
    2830:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2832:	8b 89       	ldd	r24, Y+19	; 0x13
    2834:	9c 89       	ldd	r25, Y+20	; 0x14
    2836:	01 97       	sbiw	r24, 0x01	; 1
    2838:	9c 8b       	std	Y+20, r25	; 0x14
    283a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283c:	8b 89       	ldd	r24, Y+19	; 0x13
    283e:	9c 89       	ldd	r25, Y+20	; 0x14
    2840:	00 97       	sbiw	r24, 0x00	; 0
    2842:	69 f7       	brne	.-38     	; 0x281e <TASK_newPasswordEnter+0x378>
    2844:	8e c0       	rjmp	.+284    	; 0x2962 <TASK_newPasswordEnter+0x4bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2846:	6d 89       	ldd	r22, Y+21	; 0x15
    2848:	7e 89       	ldd	r23, Y+22	; 0x16
    284a:	8f 89       	ldd	r24, Y+23	; 0x17
    284c:	98 8d       	ldd	r25, Y+24	; 0x18
    284e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2852:	dc 01       	movw	r26, r24
    2854:	cb 01       	movw	r24, r22
    2856:	9c 8b       	std	Y+20, r25	; 0x14
    2858:	8b 8b       	std	Y+19, r24	; 0x13
    285a:	8b 89       	ldd	r24, Y+19	; 0x13
    285c:	9c 89       	ldd	r25, Y+20	; 0x14
    285e:	98 8b       	std	Y+16, r25	; 0x10
    2860:	8f 87       	std	Y+15, r24	; 0x0f
    2862:	8f 85       	ldd	r24, Y+15	; 0x0f
    2864:	98 89       	ldd	r25, Y+16	; 0x10
    2866:	01 97       	sbiw	r24, 0x01	; 1
    2868:	f1 f7       	brne	.-4      	; 0x2866 <TASK_newPasswordEnter+0x3c0>
    286a:	98 8b       	std	Y+16, r25	; 0x10
    286c:	8f 87       	std	Y+15, r24	; 0x0f
    286e:	79 c0       	rjmp	.+242    	; 0x2962 <TASK_newPasswordEnter+0x4bc>
			_delay_ms(1000);
			break;
		}
		else
		{
			LCD_clearScreen();
    2870:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_clearScreen>
			LCD_displayString("Not matched!");
    2874:	8d ee       	ldi	r24, 0xED	; 237
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_displayString>
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	aa e7       	ldi	r26, 0x7A	; 122
    2882:	b4 e4       	ldi	r27, 0x44	; 68
    2884:	8b 87       	std	Y+11, r24	; 0x0b
    2886:	9c 87       	std	Y+12, r25	; 0x0c
    2888:	ad 87       	std	Y+13, r26	; 0x0d
    288a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    288c:	6b 85       	ldd	r22, Y+11	; 0x0b
    288e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2890:	8d 85       	ldd	r24, Y+13	; 0x0d
    2892:	9e 85       	ldd	r25, Y+14	; 0x0e
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	4a ef       	ldi	r20, 0xFA	; 250
    289a:	54 e4       	ldi	r21, 0x44	; 68
    289c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	8f 83       	std	Y+7, r24	; 0x07
    28a6:	98 87       	std	Y+8, r25	; 0x08
    28a8:	a9 87       	std	Y+9, r26	; 0x09
    28aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28ac:	6f 81       	ldd	r22, Y+7	; 0x07
    28ae:	78 85       	ldd	r23, Y+8	; 0x08
    28b0:	89 85       	ldd	r24, Y+9	; 0x09
    28b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	40 e8       	ldi	r20, 0x80	; 128
    28ba:	5f e3       	ldi	r21, 0x3F	; 63
    28bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28c0:	88 23       	and	r24, r24
    28c2:	2c f4       	brge	.+10     	; 0x28ce <TASK_newPasswordEnter+0x428>
		__ticks = 1;
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	9e 83       	std	Y+6, r25	; 0x06
    28ca:	8d 83       	std	Y+5, r24	; 0x05
    28cc:	3f c0       	rjmp	.+126    	; 0x294c <TASK_newPasswordEnter+0x4a6>
	else if (__tmp > 65535)
    28ce:	6f 81       	ldd	r22, Y+7	; 0x07
    28d0:	78 85       	ldd	r23, Y+8	; 0x08
    28d2:	89 85       	ldd	r24, Y+9	; 0x09
    28d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	3f ef       	ldi	r19, 0xFF	; 255
    28da:	4f e7       	ldi	r20, 0x7F	; 127
    28dc:	57 e4       	ldi	r21, 0x47	; 71
    28de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28e2:	18 16       	cp	r1, r24
    28e4:	4c f5       	brge	.+82     	; 0x2938 <TASK_newPasswordEnter+0x492>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	40 e2       	ldi	r20, 0x20	; 32
    28f4:	51 e4       	ldi	r21, 0x41	; 65
    28f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	bc 01       	movw	r22, r24
    2900:	cd 01       	movw	r24, r26
    2902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	9e 83       	std	Y+6, r25	; 0x06
    290c:	8d 83       	std	Y+5, r24	; 0x05
    290e:	0f c0       	rjmp	.+30     	; 0x292e <TASK_newPasswordEnter+0x488>
    2910:	88 ec       	ldi	r24, 0xC8	; 200
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	9c 83       	std	Y+4, r25	; 0x04
    2916:	8b 83       	std	Y+3, r24	; 0x03
    2918:	8b 81       	ldd	r24, Y+3	; 0x03
    291a:	9c 81       	ldd	r25, Y+4	; 0x04
    291c:	01 97       	sbiw	r24, 0x01	; 1
    291e:	f1 f7       	brne	.-4      	; 0x291c <TASK_newPasswordEnter+0x476>
    2920:	9c 83       	std	Y+4, r25	; 0x04
    2922:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2924:	8d 81       	ldd	r24, Y+5	; 0x05
    2926:	9e 81       	ldd	r25, Y+6	; 0x06
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	9e 83       	std	Y+6, r25	; 0x06
    292c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292e:	8d 81       	ldd	r24, Y+5	; 0x05
    2930:	9e 81       	ldd	r25, Y+6	; 0x06
    2932:	00 97       	sbiw	r24, 0x00	; 0
    2934:	69 f7       	brne	.-38     	; 0x2910 <TASK_newPasswordEnter+0x46a>
    2936:	c1 cd       	rjmp	.-1150   	; 0x24ba <TASK_newPasswordEnter+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2938:	6f 81       	ldd	r22, Y+7	; 0x07
    293a:	78 85       	ldd	r23, Y+8	; 0x08
    293c:	89 85       	ldd	r24, Y+9	; 0x09
    293e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2940:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	9e 83       	std	Y+6, r25	; 0x06
    294a:	8d 83       	std	Y+5, r24	; 0x05
    294c:	8d 81       	ldd	r24, Y+5	; 0x05
    294e:	9e 81       	ldd	r25, Y+6	; 0x06
    2950:	9a 83       	std	Y+2, r25	; 0x02
    2952:	89 83       	std	Y+1, r24	; 0x01
    2954:	89 81       	ldd	r24, Y+1	; 0x01
    2956:	9a 81       	ldd	r25, Y+2	; 0x02
    2958:	01 97       	sbiw	r24, 0x01	; 1
    295a:	f1 f7       	brne	.-4      	; 0x2958 <TASK_newPasswordEnter+0x4b2>
    295c:	9a 83       	std	Y+2, r25	; 0x02
    295e:	89 83       	std	Y+1, r24	; 0x01
    2960:	ac cd       	rjmp	.-1192   	; 0x24ba <TASK_newPasswordEnter+0x14>
			_delay_ms(1000);
		}
	}
}
    2962:	e8 96       	adiw	r28, 0x38	; 56
    2964:	0f b6       	in	r0, 0x3f	; 63
    2966:	f8 94       	cli
    2968:	de bf       	out	0x3e, r29	; 62
    296a:	0f be       	out	0x3f, r0	; 63
    296c:	cd bf       	out	0x3d, r28	; 61
    296e:	cf 91       	pop	r28
    2970:	df 91       	pop	r29
    2972:	08 95       	ret

00002974 <TASK_passwordCheck>:

void TASK_passwordCheck(void)
{
    2974:	df 93       	push	r29
    2976:	cf 93       	push	r28
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
    297c:	aa 97       	sbiw	r28, 0x2a	; 42
    297e:	0f b6       	in	r0, 0x3f	; 63
    2980:	f8 94       	cli
    2982:	de bf       	out	0x3e, r29	; 62
    2984:	0f be       	out	0x3f, r0	; 63
    2986:	cd bf       	out	0x3d, r28	; 61
	flag = 1;
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	80 93 53 01 	sts	0x0153, r24

	LCD_clearScreen();
    298e:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_clearScreen>
	LCD_displayString("Current password:");
    2992:	8a ef       	ldi	r24, 0xFA	; 250
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_displayString>
	LCD_moveCursor(1,0);
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	60 e0       	ldi	r22, 0x00	; 0
    299e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <LCD_moveCursor>

	UART_sendByte(HMI_ECU_IS_READY);
    29a2:	85 ea       	ldi	r24, 0xA5	; 165
    29a4:	0e 94 64 19 	call	0x32c8	; 0x32c8 <UART_sendByte>
	UART_receiveString(HMI_ECU_Password);
    29a8:	8c e7       	ldi	r24, 0x7C	; 124
    29aa:	91 e0       	ldi	r25, 0x01	; 1
    29ac:	0e 94 a6 19 	call	0x334c	; 0x334c <UART_receiveString>
	HMI_ECU_Password[5] = '#';
    29b0:	83 e2       	ldi	r24, 0x23	; 35
    29b2:	80 93 81 01 	sts	0x0181, r24

	i = 0;
    29b6:	10 92 7a 01 	sts	0x017A, r1
    29ba:	8c c0       	rjmp	.+280    	; 0x2ad4 <TASK_passwordCheck+0x160>
	while (i < 5)
	{
		/* Get the pressed key number */
		keyPressed = KEYPAD_getPressedKey();
    29bc:	0e 94 0a 09 	call	0x1214	; 0x1214 <KEYPAD_getPressedKey>
    29c0:	80 93 82 01 	sts	0x0182, r24
		if (HMI_ECU_Password[i] != keyPressed)
    29c4:	80 91 7a 01 	lds	r24, 0x017A
    29c8:	88 2f       	mov	r24, r24
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	fc 01       	movw	r30, r24
    29ce:	e4 58       	subi	r30, 0x84	; 132
    29d0:	fe 4f       	sbci	r31, 0xFE	; 254
    29d2:	90 81       	ld	r25, Z
    29d4:	80 91 82 01 	lds	r24, 0x0182
    29d8:	98 17       	cp	r25, r24
    29da:	11 f0       	breq	.+4      	; 0x29e0 <TASK_passwordCheck+0x6c>
			flag = 0;
    29dc:	10 92 53 01 	sts	0x0153, r1

		LCD_displayCharacter('*');
    29e0:	8a e2       	ldi	r24, 0x2A	; 42
    29e2:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_displayCharacter>
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	aa ef       	ldi	r26, 0xFA	; 250
    29ec:	b3 e4       	ldi	r27, 0x43	; 67
    29ee:	8f a3       	std	Y+39, r24	; 0x27
    29f0:	98 a7       	std	Y+40, r25	; 0x28
    29f2:	a9 a7       	std	Y+41, r26	; 0x29
    29f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f6:	6f a1       	ldd	r22, Y+39	; 0x27
    29f8:	78 a5       	ldd	r23, Y+40	; 0x28
    29fa:	89 a5       	ldd	r24, Y+41	; 0x29
    29fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	4a ef       	ldi	r20, 0xFA	; 250
    2a04:	54 e4       	ldi	r21, 0x44	; 68
    2a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	8b a3       	std	Y+35, r24	; 0x23
    2a10:	9c a3       	std	Y+36, r25	; 0x24
    2a12:	ad a3       	std	Y+37, r26	; 0x25
    2a14:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a16:	6b a1       	ldd	r22, Y+35	; 0x23
    2a18:	7c a1       	ldd	r23, Y+36	; 0x24
    2a1a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a1c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	40 e8       	ldi	r20, 0x80	; 128
    2a24:	5f e3       	ldi	r21, 0x3F	; 63
    2a26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a2a:	88 23       	and	r24, r24
    2a2c:	2c f4       	brge	.+10     	; 0x2a38 <TASK_passwordCheck+0xc4>
		__ticks = 1;
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	9a a3       	std	Y+34, r25	; 0x22
    2a34:	89 a3       	std	Y+33, r24	; 0x21
    2a36:	3f c0       	rjmp	.+126    	; 0x2ab6 <TASK_passwordCheck+0x142>
	else if (__tmp > 65535)
    2a38:	6b a1       	ldd	r22, Y+35	; 0x23
    2a3a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a3c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a3e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	3f ef       	ldi	r19, 0xFF	; 255
    2a44:	4f e7       	ldi	r20, 0x7F	; 127
    2a46:	57 e4       	ldi	r21, 0x47	; 71
    2a48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a4c:	18 16       	cp	r1, r24
    2a4e:	4c f5       	brge	.+82     	; 0x2aa2 <TASK_passwordCheck+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a50:	6f a1       	ldd	r22, Y+39	; 0x27
    2a52:	78 a5       	ldd	r23, Y+40	; 0x28
    2a54:	89 a5       	ldd	r24, Y+41	; 0x29
    2a56:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e2       	ldi	r20, 0x20	; 32
    2a5e:	51 e4       	ldi	r21, 0x41	; 65
    2a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	bc 01       	movw	r22, r24
    2a6a:	cd 01       	movw	r24, r26
    2a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	9a a3       	std	Y+34, r25	; 0x22
    2a76:	89 a3       	std	Y+33, r24	; 0x21
    2a78:	0f c0       	rjmp	.+30     	; 0x2a98 <TASK_passwordCheck+0x124>
    2a7a:	88 ec       	ldi	r24, 0xC8	; 200
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	98 a3       	std	Y+32, r25	; 0x20
    2a80:	8f 8f       	std	Y+31, r24	; 0x1f
    2a82:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a84:	98 a1       	ldd	r25, Y+32	; 0x20
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <TASK_passwordCheck+0x112>
    2a8a:	98 a3       	std	Y+32, r25	; 0x20
    2a8c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a8e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a90:	9a a1       	ldd	r25, Y+34	; 0x22
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	9a a3       	std	Y+34, r25	; 0x22
    2a96:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a98:	89 a1       	ldd	r24, Y+33	; 0x21
    2a9a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a9c:	00 97       	sbiw	r24, 0x00	; 0
    2a9e:	69 f7       	brne	.-38     	; 0x2a7a <TASK_passwordCheck+0x106>
    2aa0:	14 c0       	rjmp	.+40     	; 0x2aca <TASK_passwordCheck+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa2:	6b a1       	ldd	r22, Y+35	; 0x23
    2aa4:	7c a1       	ldd	r23, Y+36	; 0x24
    2aa6:	8d a1       	ldd	r24, Y+37	; 0x25
    2aa8:	9e a1       	ldd	r25, Y+38	; 0x26
    2aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	9a a3       	std	Y+34, r25	; 0x22
    2ab4:	89 a3       	std	Y+33, r24	; 0x21
    2ab6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ab8:	9a a1       	ldd	r25, Y+34	; 0x22
    2aba:	9e 8f       	std	Y+30, r25	; 0x1e
    2abc:	8d 8f       	std	Y+29, r24	; 0x1d
    2abe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ac0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	f1 f7       	brne	.-4      	; 0x2ac2 <TASK_passwordCheck+0x14e>
    2ac6:	9e 8f       	std	Y+30, r25	; 0x1e
    2ac8:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(500); /* Press time */
		i++;
    2aca:	80 91 7a 01 	lds	r24, 0x017A
    2ace:	8f 5f       	subi	r24, 0xFF	; 255
    2ad0:	80 93 7a 01 	sts	0x017A, r24
	UART_sendByte(HMI_ECU_IS_READY);
	UART_receiveString(HMI_ECU_Password);
	HMI_ECU_Password[5] = '#';

	i = 0;
	while (i < 5)
    2ad4:	80 91 7a 01 	lds	r24, 0x017A
    2ad8:	85 30       	cpi	r24, 0x05	; 5
    2ada:	08 f4       	brcc	.+2      	; 0x2ade <TASK_passwordCheck+0x16a>
    2adc:	6f cf       	rjmp	.-290    	; 0x29bc <TASK_passwordCheck+0x48>

		_delay_ms(500); /* Press time */
		i++;
	}

	if (flag == 1)
    2ade:	80 91 53 01 	lds	r24, 0x0153
    2ae2:	81 30       	cpi	r24, 0x01	; 1
    2ae4:	19 f4       	brne	.+6      	; 0x2aec <TASK_passwordCheck+0x178>
	{
		TASK_doorOpen();
    2ae6:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <TASK_doorOpen>
    2aea:	3b c1       	rjmp	.+630    	; 0x2d62 <TASK_passwordCheck+0x3ee>
	}
	else if (flag == 0)
    2aec:	80 91 53 01 	lds	r24, 0x0153
    2af0:	88 23       	and	r24, r24
    2af2:	09 f0       	breq	.+2      	; 0x2af6 <TASK_passwordCheck+0x182>
    2af4:	36 c1       	rjmp	.+620    	; 0x2d62 <TASK_passwordCheck+0x3ee>
	{
		j = 0;
    2af6:	10 92 79 01 	sts	0x0179, r1
		do {
			flag = 1;
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	80 93 53 01 	sts	0x0153, r24

			LCD_clearScreen();
    2b00:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_clearScreen>
			LCD_displayString("Wrong Password");
    2b04:	83 e9       	ldi	r24, 0x93	; 147
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_displayString>
    2b0c:	80 e0       	ldi	r24, 0x00	; 0
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	aa e7       	ldi	r26, 0x7A	; 122
    2b12:	b4 e4       	ldi	r27, 0x44	; 68
    2b14:	89 8f       	std	Y+25, r24	; 0x19
    2b16:	9a 8f       	std	Y+26, r25	; 0x1a
    2b18:	ab 8f       	std	Y+27, r26	; 0x1b
    2b1a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b1c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	4a ef       	ldi	r20, 0xFA	; 250
    2b2a:	54 e4       	ldi	r21, 0x44	; 68
    2b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	8d 8b       	std	Y+21, r24	; 0x15
    2b36:	9e 8b       	std	Y+22, r25	; 0x16
    2b38:	af 8b       	std	Y+23, r26	; 0x17
    2b3a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b3c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b3e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b40:	8f 89       	ldd	r24, Y+23	; 0x17
    2b42:	98 8d       	ldd	r25, Y+24	; 0x18
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e8       	ldi	r20, 0x80	; 128
    2b4a:	5f e3       	ldi	r21, 0x3F	; 63
    2b4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b50:	88 23       	and	r24, r24
    2b52:	2c f4       	brge	.+10     	; 0x2b5e <TASK_passwordCheck+0x1ea>
		__ticks = 1;
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	9c 8b       	std	Y+20, r25	; 0x14
    2b5a:	8b 8b       	std	Y+19, r24	; 0x13
    2b5c:	3f c0       	rjmp	.+126    	; 0x2bdc <TASK_passwordCheck+0x268>
	else if (__tmp > 65535)
    2b5e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b60:	7e 89       	ldd	r23, Y+22	; 0x16
    2b62:	8f 89       	ldd	r24, Y+23	; 0x17
    2b64:	98 8d       	ldd	r25, Y+24	; 0x18
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	3f ef       	ldi	r19, 0xFF	; 255
    2b6a:	4f e7       	ldi	r20, 0x7F	; 127
    2b6c:	57 e4       	ldi	r21, 0x47	; 71
    2b6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b72:	18 16       	cp	r1, r24
    2b74:	4c f5       	brge	.+82     	; 0x2bc8 <TASK_passwordCheck+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b76:	69 8d       	ldd	r22, Y+25	; 0x19
    2b78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e2       	ldi	r20, 0x20	; 32
    2b84:	51 e4       	ldi	r21, 0x41	; 65
    2b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	bc 01       	movw	r22, r24
    2b90:	cd 01       	movw	r24, r26
    2b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	9c 8b       	std	Y+20, r25	; 0x14
    2b9c:	8b 8b       	std	Y+19, r24	; 0x13
    2b9e:	0f c0       	rjmp	.+30     	; 0x2bbe <TASK_passwordCheck+0x24a>
    2ba0:	88 ec       	ldi	r24, 0xC8	; 200
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	9a 8b       	std	Y+18, r25	; 0x12
    2ba6:	89 8b       	std	Y+17, r24	; 0x11
    2ba8:	89 89       	ldd	r24, Y+17	; 0x11
    2baa:	9a 89       	ldd	r25, Y+18	; 0x12
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	f1 f7       	brne	.-4      	; 0x2bac <TASK_passwordCheck+0x238>
    2bb0:	9a 8b       	std	Y+18, r25	; 0x12
    2bb2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bb6:	9c 89       	ldd	r25, Y+20	; 0x14
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	9c 8b       	std	Y+20, r25	; 0x14
    2bbc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bbe:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc0:	9c 89       	ldd	r25, Y+20	; 0x14
    2bc2:	00 97       	sbiw	r24, 0x00	; 0
    2bc4:	69 f7       	brne	.-38     	; 0x2ba0 <TASK_passwordCheck+0x22c>
    2bc6:	14 c0       	rjmp	.+40     	; 0x2bf0 <TASK_passwordCheck+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc8:	6d 89       	ldd	r22, Y+21	; 0x15
    2bca:	7e 89       	ldd	r23, Y+22	; 0x16
    2bcc:	8f 89       	ldd	r24, Y+23	; 0x17
    2bce:	98 8d       	ldd	r25, Y+24	; 0x18
    2bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	9c 8b       	std	Y+20, r25	; 0x14
    2bda:	8b 8b       	std	Y+19, r24	; 0x13
    2bdc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bde:	9c 89       	ldd	r25, Y+20	; 0x14
    2be0:	98 8b       	std	Y+16, r25	; 0x10
    2be2:	8f 87       	std	Y+15, r24	; 0x0f
    2be4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2be6:	98 89       	ldd	r25, Y+16	; 0x10
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	f1 f7       	brne	.-4      	; 0x2be8 <TASK_passwordCheck+0x274>
    2bec:	98 8b       	std	Y+16, r25	; 0x10
    2bee:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(1000);

			LCD_clearScreen();
    2bf0:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_clearScreen>
			LCD_displayString("Current Password:");
    2bf4:	82 ea       	ldi	r24, 0xA2	; 162
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_displayString>

			LCD_moveCursor(1,0);
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	60 e0       	ldi	r22, 0x00	; 0
    2c00:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <LCD_moveCursor>

			i = 0;
    2c04:	10 92 7a 01 	sts	0x017A, r1
    2c08:	8c c0       	rjmp	.+280    	; 0x2d22 <TASK_passwordCheck+0x3ae>
			while (i < 5)
			{
				/* Get the pressed key number */
				keyPressed = KEYPAD_getPressedKey();
    2c0a:	0e 94 0a 09 	call	0x1214	; 0x1214 <KEYPAD_getPressedKey>
    2c0e:	80 93 82 01 	sts	0x0182, r24
				if (HMI_ECU_Password[i] != keyPressed)
    2c12:	80 91 7a 01 	lds	r24, 0x017A
    2c16:	88 2f       	mov	r24, r24
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	fc 01       	movw	r30, r24
    2c1c:	e4 58       	subi	r30, 0x84	; 132
    2c1e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c20:	90 81       	ld	r25, Z
    2c22:	80 91 82 01 	lds	r24, 0x0182
    2c26:	98 17       	cp	r25, r24
    2c28:	11 f0       	breq	.+4      	; 0x2c2e <TASK_passwordCheck+0x2ba>
					flag = 0;
    2c2a:	10 92 53 01 	sts	0x0153, r1

				LCD_displayCharacter('*');
    2c2e:	8a e2       	ldi	r24, 0x2A	; 42
    2c30:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_displayCharacter>
    2c34:	80 e0       	ldi	r24, 0x00	; 0
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	aa ef       	ldi	r26, 0xFA	; 250
    2c3a:	b3 e4       	ldi	r27, 0x43	; 67
    2c3c:	8b 87       	std	Y+11, r24	; 0x0b
    2c3e:	9c 87       	std	Y+12, r25	; 0x0c
    2c40:	ad 87       	std	Y+13, r26	; 0x0d
    2c42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	4a ef       	ldi	r20, 0xFA	; 250
    2c52:	54 e4       	ldi	r21, 0x44	; 68
    2c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	8f 83       	std	Y+7, r24	; 0x07
    2c5e:	98 87       	std	Y+8, r25	; 0x08
    2c60:	a9 87       	std	Y+9, r26	; 0x09
    2c62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c64:	6f 81       	ldd	r22, Y+7	; 0x07
    2c66:	78 85       	ldd	r23, Y+8	; 0x08
    2c68:	89 85       	ldd	r24, Y+9	; 0x09
    2c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	40 e8       	ldi	r20, 0x80	; 128
    2c72:	5f e3       	ldi	r21, 0x3F	; 63
    2c74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c78:	88 23       	and	r24, r24
    2c7a:	2c f4       	brge	.+10     	; 0x2c86 <TASK_passwordCheck+0x312>
		__ticks = 1;
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	9e 83       	std	Y+6, r25	; 0x06
    2c82:	8d 83       	std	Y+5, r24	; 0x05
    2c84:	3f c0       	rjmp	.+126    	; 0x2d04 <TASK_passwordCheck+0x390>
	else if (__tmp > 65535)
    2c86:	6f 81       	ldd	r22, Y+7	; 0x07
    2c88:	78 85       	ldd	r23, Y+8	; 0x08
    2c8a:	89 85       	ldd	r24, Y+9	; 0x09
    2c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	3f ef       	ldi	r19, 0xFF	; 255
    2c92:	4f e7       	ldi	r20, 0x7F	; 127
    2c94:	57 e4       	ldi	r21, 0x47	; 71
    2c96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c9a:	18 16       	cp	r1, r24
    2c9c:	4c f5       	brge	.+82     	; 0x2cf0 <TASK_passwordCheck+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ca0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	40 e2       	ldi	r20, 0x20	; 32
    2cac:	51 e4       	ldi	r21, 0x41	; 65
    2cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	bc 01       	movw	r22, r24
    2cb8:	cd 01       	movw	r24, r26
    2cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	9e 83       	std	Y+6, r25	; 0x06
    2cc4:	8d 83       	std	Y+5, r24	; 0x05
    2cc6:	0f c0       	rjmp	.+30     	; 0x2ce6 <TASK_passwordCheck+0x372>
    2cc8:	88 ec       	ldi	r24, 0xC8	; 200
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	9c 83       	std	Y+4, r25	; 0x04
    2cce:	8b 83       	std	Y+3, r24	; 0x03
    2cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	f1 f7       	brne	.-4      	; 0x2cd4 <TASK_passwordCheck+0x360>
    2cd8:	9c 83       	std	Y+4, r25	; 0x04
    2cda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cde:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce0:	01 97       	sbiw	r24, 0x01	; 1
    2ce2:	9e 83       	std	Y+6, r25	; 0x06
    2ce4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cea:	00 97       	sbiw	r24, 0x00	; 0
    2cec:	69 f7       	brne	.-38     	; 0x2cc8 <TASK_passwordCheck+0x354>
    2cee:	14 c0       	rjmp	.+40     	; 0x2d18 <TASK_passwordCheck+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf2:	78 85       	ldd	r23, Y+8	; 0x08
    2cf4:	89 85       	ldd	r24, Y+9	; 0x09
    2cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	9e 83       	std	Y+6, r25	; 0x06
    2d02:	8d 83       	std	Y+5, r24	; 0x05
    2d04:	8d 81       	ldd	r24, Y+5	; 0x05
    2d06:	9e 81       	ldd	r25, Y+6	; 0x06
    2d08:	9a 83       	std	Y+2, r25	; 0x02
    2d0a:	89 83       	std	Y+1, r24	; 0x01
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d10:	01 97       	sbiw	r24, 0x01	; 1
    2d12:	f1 f7       	brne	.-4      	; 0x2d10 <TASK_passwordCheck+0x39c>
    2d14:	9a 83       	std	Y+2, r25	; 0x02
    2d16:	89 83       	std	Y+1, r24	; 0x01

				_delay_ms(500); /* Press time */
				i++;
    2d18:	80 91 7a 01 	lds	r24, 0x017A
    2d1c:	8f 5f       	subi	r24, 0xFF	; 255
    2d1e:	80 93 7a 01 	sts	0x017A, r24
			LCD_displayString("Current Password:");

			LCD_moveCursor(1,0);

			i = 0;
			while (i < 5)
    2d22:	80 91 7a 01 	lds	r24, 0x017A
    2d26:	85 30       	cpi	r24, 0x05	; 5
    2d28:	08 f4       	brcc	.+2      	; 0x2d2c <TASK_passwordCheck+0x3b8>
    2d2a:	6f cf       	rjmp	.-290    	; 0x2c0a <TASK_passwordCheck+0x296>
				LCD_displayCharacter('*');

				_delay_ms(500); /* Press time */
				i++;
			}
			j++;
    2d2c:	80 91 79 01 	lds	r24, 0x0179
    2d30:	8f 5f       	subi	r24, 0xFF	; 255
    2d32:	80 93 79 01 	sts	0x0179, r24
		}while ((j < 2) && (flag == 0));
    2d36:	80 91 79 01 	lds	r24, 0x0179
    2d3a:	82 30       	cpi	r24, 0x02	; 2
    2d3c:	28 f4       	brcc	.+10     	; 0x2d48 <TASK_passwordCheck+0x3d4>
    2d3e:	80 91 53 01 	lds	r24, 0x0153
    2d42:	88 23       	and	r24, r24
    2d44:	09 f4       	brne	.+2      	; 0x2d48 <TASK_passwordCheck+0x3d4>
    2d46:	d9 ce       	rjmp	.-590    	; 0x2afa <TASK_passwordCheck+0x186>

		if (flag==0)
    2d48:	80 91 53 01 	lds	r24, 0x0153
    2d4c:	88 23       	and	r24, r24
    2d4e:	19 f4       	brne	.+6      	; 0x2d56 <TASK_passwordCheck+0x3e2>
			TASK_alert();
    2d50:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <TASK_alert>
    2d54:	06 c0       	rjmp	.+12     	; 0x2d62 <TASK_passwordCheck+0x3ee>
		else
		{
			TASK_doorOpen();
    2d56:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <TASK_doorOpen>
			TASK_doorStop();
    2d5a:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <TASK_doorStop>
			TASK_doorClose();
    2d5e:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <TASK_doorClose>
		}
	}
}
    2d62:	aa 96       	adiw	r28, 0x2a	; 42
    2d64:	0f b6       	in	r0, 0x3f	; 63
    2d66:	f8 94       	cli
    2d68:	de bf       	out	0x3e, r29	; 62
    2d6a:	0f be       	out	0x3f, r0	; 63
    2d6c:	cd bf       	out	0x3d, r28	; 61
    2d6e:	cf 91       	pop	r28
    2d70:	df 91       	pop	r29
    2d72:	08 95       	ret

00002d74 <TASK_doorOpen>:

void TASK_doorOpen(void)
{
    2d74:	df 93       	push	r29
    2d76:	cf 93       	push	r28
    2d78:	cd b7       	in	r28, 0x3d	; 61
    2d7a:	de b7       	in	r29, 0x3e	; 62
    2d7c:	60 97       	sbiw	r28, 0x10	; 16
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	f8 94       	cli
    2d82:	de bf       	out	0x3e, r29	; 62
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	cd bf       	out	0x3d, r28	; 61
	while (UART_recieveByte() != CONTROL_ECU_IS_READY);
    2d88:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <UART_recieveByte>
    2d8c:	8a 35       	cpi	r24, 0x5A	; 90
    2d8e:	e1 f7       	brne	.-8      	; 0x2d88 <TASK_doorOpen+0x14>
	UART_sendByte(CORRECT);
    2d90:	80 ef       	ldi	r24, 0xF0	; 240
    2d92:	0e 94 64 19 	call	0x32c8	; 0x32c8 <UART_sendByte>

	LCD_clearScreen();
    2d96:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_clearScreen>
	LCD_displayString ("Opening Door");
    2d9a:	8c e0       	ldi	r24, 0x0C	; 12
    2d9c:	91 e0       	ldi	r25, 0x01	; 1
    2d9e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_displayString>

	TIMER0_setCallBack(TASK_TickTok);
    2da2:	80 ec       	ldi	r24, 0xC0	; 192
    2da4:	97 e1       	ldi	r25, 0x17	; 23
    2da6:	0e 94 b2 18 	call	0x3164	; 0x3164 <TIMER0_setCallBack>
			0,
			0,
			TIMER0_F_CPU_1024,
			TIMER_NORMAL_MODE,
			0
	};
    2daa:	ce 01       	movw	r24, r28
    2dac:	01 96       	adiw	r24, 0x01	; 1
    2dae:	9d 87       	std	Y+13, r25	; 0x0d
    2db0:	8c 87       	std	Y+12, r24	; 0x0c
    2db2:	eb e5       	ldi	r30, 0x5B	; 91
    2db4:	f1 e0       	ldi	r31, 0x01	; 1
    2db6:	ff 87       	std	Y+15, r31	; 0x0f
    2db8:	ee 87       	std	Y+14, r30	; 0x0e
    2dba:	fb e0       	ldi	r31, 0x0B	; 11
    2dbc:	f8 8b       	std	Y+16, r31	; 0x10
    2dbe:	ee 85       	ldd	r30, Y+14	; 0x0e
    2dc0:	ff 85       	ldd	r31, Y+15	; 0x0f
    2dc2:	00 80       	ld	r0, Z
    2dc4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2dc6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2dc8:	01 96       	adiw	r24, 0x01	; 1
    2dca:	9f 87       	std	Y+15, r25	; 0x0f
    2dcc:	8e 87       	std	Y+14, r24	; 0x0e
    2dce:	ec 85       	ldd	r30, Y+12	; 0x0c
    2dd0:	fd 85       	ldd	r31, Y+13	; 0x0d
    2dd2:	00 82       	st	Z, r0
    2dd4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2dd6:	9d 85       	ldd	r25, Y+13	; 0x0d
    2dd8:	01 96       	adiw	r24, 0x01	; 1
    2dda:	9d 87       	std	Y+13, r25	; 0x0d
    2ddc:	8c 87       	std	Y+12, r24	; 0x0c
    2dde:	98 89       	ldd	r25, Y+16	; 0x10
    2de0:	91 50       	subi	r25, 0x01	; 1
    2de2:	98 8b       	std	Y+16, r25	; 0x10
    2de4:	e8 89       	ldd	r30, Y+16	; 0x10
    2de6:	ee 23       	and	r30, r30
    2de8:	51 f7       	brne	.-44     	; 0x2dbe <TASK_doorOpen+0x4a>

	TIMER0_init(&timer0_config);
    2dea:	ce 01       	movw	r24, r28
    2dec:	01 96       	adiw	r24, 0x01	; 1
    2dee:	0e 94 17 18 	call	0x302e	; 0x302e <TIMER0_init>

	/* 15 seconds*/
	while (g_seconds <= 15 || (UART_recieveByte() != CONTROL_ECU_IS_READY));
    2df2:	80 91 73 01 	lds	r24, 0x0173
    2df6:	90 91 74 01 	lds	r25, 0x0174
    2dfa:	80 31       	cpi	r24, 0x10	; 16
    2dfc:	91 05       	cpc	r25, r1
    2dfe:	c8 f3       	brcs	.-14     	; 0x2df2 <TASK_doorOpen+0x7e>
    2e00:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <UART_recieveByte>
    2e04:	8a 35       	cpi	r24, 0x5A	; 90
    2e06:	a9 f7       	brne	.-22     	; 0x2df2 <TASK_doorOpen+0x7e>
}
    2e08:	60 96       	adiw	r28, 0x10	; 16
    2e0a:	0f b6       	in	r0, 0x3f	; 63
    2e0c:	f8 94       	cli
    2e0e:	de bf       	out	0x3e, r29	; 62
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	cd bf       	out	0x3d, r28	; 61
    2e14:	cf 91       	pop	r28
    2e16:	df 91       	pop	r29
    2e18:	08 95       	ret

00002e1a <TASK_doorStop>:

void TASK_doorStop(void)
{
    2e1a:	df 93       	push	r29
    2e1c:	cf 93       	push	r28
    2e1e:	cd b7       	in	r28, 0x3d	; 61
    2e20:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    2e22:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_clearScreen>
	LCD_displayString ("Welcome");
    2e26:	89 e1       	ldi	r24, 0x19	; 25
    2e28:	91 e0       	ldi	r25, 0x01	; 1
    2e2a:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_displayString>

	g_seconds = g_ticks = 0;
    2e2e:	10 92 78 01 	sts	0x0178, r1
    2e32:	10 92 77 01 	sts	0x0177, r1
    2e36:	80 91 77 01 	lds	r24, 0x0177
    2e3a:	90 91 78 01 	lds	r25, 0x0178
    2e3e:	90 93 74 01 	sts	0x0174, r25
    2e42:	80 93 73 01 	sts	0x0173, r24

	/* 3 seconds*/
	while (g_seconds <= 3);
    2e46:	80 91 73 01 	lds	r24, 0x0173
    2e4a:	90 91 74 01 	lds	r25, 0x0174
    2e4e:	84 30       	cpi	r24, 0x04	; 4
    2e50:	91 05       	cpc	r25, r1
    2e52:	c8 f3       	brcs	.-14     	; 0x2e46 <TASK_doorStop+0x2c>
}
    2e54:	cf 91       	pop	r28
    2e56:	df 91       	pop	r29
    2e58:	08 95       	ret

00002e5a <TASK_doorClose>:

void TASK_doorClose(void)
{
    2e5a:	df 93       	push	r29
    2e5c:	cf 93       	push	r28
    2e5e:	cd b7       	in	r28, 0x3d	; 61
    2e60:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    2e62:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_clearScreen>
	LCD_displayString ("Closing Door");
    2e66:	81 e2       	ldi	r24, 0x21	; 33
    2e68:	91 e0       	ldi	r25, 0x01	; 1
    2e6a:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_displayString>

	g_seconds = g_ticks = 0;
    2e6e:	10 92 78 01 	sts	0x0178, r1
    2e72:	10 92 77 01 	sts	0x0177, r1
    2e76:	80 91 77 01 	lds	r24, 0x0177
    2e7a:	90 91 78 01 	lds	r25, 0x0178
    2e7e:	90 93 74 01 	sts	0x0174, r25
    2e82:	80 93 73 01 	sts	0x0173, r24

	/* 15 seconds*/
	while (g_seconds <= 15);
    2e86:	80 91 73 01 	lds	r24, 0x0173
    2e8a:	90 91 74 01 	lds	r25, 0x0174
    2e8e:	80 31       	cpi	r24, 0x10	; 16
    2e90:	91 05       	cpc	r25, r1
    2e92:	c8 f3       	brcs	.-14     	; 0x2e86 <TASK_doorClose+0x2c>

	TIMER0_deinit();
    2e94:	0e 94 c4 18 	call	0x3188	; 0x3188 <TIMER0_deinit>
	g_seconds = g_ticks = 0;
    2e98:	10 92 78 01 	sts	0x0178, r1
    2e9c:	10 92 77 01 	sts	0x0177, r1
    2ea0:	80 91 77 01 	lds	r24, 0x0177
    2ea4:	90 91 78 01 	lds	r25, 0x0178
    2ea8:	90 93 74 01 	sts	0x0174, r25
    2eac:	80 93 73 01 	sts	0x0173, r24
}
    2eb0:	cf 91       	pop	r28
    2eb2:	df 91       	pop	r29
    2eb4:	08 95       	ret

00002eb6 <TASK_alert>:

void TASK_alert (void)
{
    2eb6:	df 93       	push	r29
    2eb8:	cf 93       	push	r28
    2eba:	cd b7       	in	r28, 0x3d	; 61
    2ebc:	de b7       	in	r29, 0x3e	; 62
    2ebe:	60 97       	sbiw	r28, 0x10	; 16
    2ec0:	0f b6       	in	r0, 0x3f	; 63
    2ec2:	f8 94       	cli
    2ec4:	de bf       	out	0x3e, r29	; 62
    2ec6:	0f be       	out	0x3f, r0	; 63
    2ec8:	cd bf       	out	0x3d, r28	; 61
	while(UART_recieveByte() != CONTROL_ECU_IS_READY);
    2eca:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <UART_recieveByte>
    2ece:	8a 35       	cpi	r24, 0x5A	; 90
    2ed0:	e1 f7       	brne	.-8      	; 0x2eca <TASK_alert+0x14>
	UART_sendByte(ALERT);
    2ed2:	8b eb       	ldi	r24, 0xBB	; 187
    2ed4:	0e 94 64 19 	call	0x32c8	; 0x32c8 <UART_sendByte>

	LCD_clearScreen();
    2ed8:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_clearScreen>
	LCD_displayString("!!!Thief!!!");
    2edc:	8e e2       	ldi	r24, 0x2E	; 46
    2ede:	91 e0       	ldi	r25, 0x01	; 1
    2ee0:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_displayString>
	LCD_moveCursor(1, 0);
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	60 e0       	ldi	r22, 0x00	; 0
    2ee8:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <LCD_moveCursor>
	LCD_displayString("Calling Police!!");
    2eec:	8a e3       	ldi	r24, 0x3A	; 58
    2eee:	91 e0       	ldi	r25, 0x01	; 1
    2ef0:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <LCD_displayString>

	TIMER0_setCallBack(TASK_TickTok);
    2ef4:	80 ec       	ldi	r24, 0xC0	; 192
    2ef6:	97 e1       	ldi	r25, 0x17	; 23
    2ef8:	0e 94 b2 18 	call	0x3164	; 0x3164 <TIMER0_setCallBack>
				0,
				0,
				TIMER0_F_CPU_1024,
				TIMER_NORMAL_MODE,
				0
		};
    2efc:	ce 01       	movw	r24, r28
    2efe:	01 96       	adiw	r24, 0x01	; 1
    2f00:	9d 87       	std	Y+13, r25	; 0x0d
    2f02:	8c 87       	std	Y+12, r24	; 0x0c
    2f04:	e6 e6       	ldi	r30, 0x66	; 102
    2f06:	f1 e0       	ldi	r31, 0x01	; 1
    2f08:	ff 87       	std	Y+15, r31	; 0x0f
    2f0a:	ee 87       	std	Y+14, r30	; 0x0e
    2f0c:	fb e0       	ldi	r31, 0x0B	; 11
    2f0e:	f8 8b       	std	Y+16, r31	; 0x10
    2f10:	ee 85       	ldd	r30, Y+14	; 0x0e
    2f12:	ff 85       	ldd	r31, Y+15	; 0x0f
    2f14:	00 80       	ld	r0, Z
    2f16:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f18:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f1a:	01 96       	adiw	r24, 0x01	; 1
    2f1c:	9f 87       	std	Y+15, r25	; 0x0f
    2f1e:	8e 87       	std	Y+14, r24	; 0x0e
    2f20:	ec 85       	ldd	r30, Y+12	; 0x0c
    2f22:	fd 85       	ldd	r31, Y+13	; 0x0d
    2f24:	00 82       	st	Z, r0
    2f26:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f28:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f2a:	01 96       	adiw	r24, 0x01	; 1
    2f2c:	9d 87       	std	Y+13, r25	; 0x0d
    2f2e:	8c 87       	std	Y+12, r24	; 0x0c
    2f30:	98 89       	ldd	r25, Y+16	; 0x10
    2f32:	91 50       	subi	r25, 0x01	; 1
    2f34:	98 8b       	std	Y+16, r25	; 0x10
    2f36:	e8 89       	ldd	r30, Y+16	; 0x10
    2f38:	ee 23       	and	r30, r30
    2f3a:	51 f7       	brne	.-44     	; 0x2f10 <TASK_alert+0x5a>

	TIMER0_init(&timer0_config);
    2f3c:	ce 01       	movw	r24, r28
    2f3e:	01 96       	adiw	r24, 0x01	; 1
    2f40:	0e 94 17 18 	call	0x302e	; 0x302e <TIMER0_init>

	/* 60 seconds*/
	while (g_seconds <= 60);
    2f44:	80 91 73 01 	lds	r24, 0x0173
    2f48:	90 91 74 01 	lds	r25, 0x0174
    2f4c:	8d 33       	cpi	r24, 0x3D	; 61
    2f4e:	91 05       	cpc	r25, r1
    2f50:	c8 f3       	brcs	.-14     	; 0x2f44 <TASK_alert+0x8e>

	TIMER0_deinit();
    2f52:	0e 94 c4 18 	call	0x3188	; 0x3188 <TIMER0_deinit>
	g_seconds = g_ticks = 0;
    2f56:	10 92 78 01 	sts	0x0178, r1
    2f5a:	10 92 77 01 	sts	0x0177, r1
    2f5e:	80 91 77 01 	lds	r24, 0x0177
    2f62:	90 91 78 01 	lds	r25, 0x0178
    2f66:	90 93 74 01 	sts	0x0174, r25
    2f6a:	80 93 73 01 	sts	0x0173, r24
}
    2f6e:	60 96       	adiw	r28, 0x10	; 16
    2f70:	0f b6       	in	r0, 0x3f	; 63
    2f72:	f8 94       	cli
    2f74:	de bf       	out	0x3e, r29	; 62
    2f76:	0f be       	out	0x3f, r0	; 63
    2f78:	cd bf       	out	0x3d, r28	; 61
    2f7a:	cf 91       	pop	r28
    2f7c:	df 91       	pop	r29
    2f7e:	08 95       	ret

00002f80 <TASK_TickTok>:

void TASK_TickTok(void)
{
    2f80:	df 93       	push	r29
    2f82:	cf 93       	push	r28
    2f84:	cd b7       	in	r28, 0x3d	; 61
    2f86:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    2f88:	80 91 77 01 	lds	r24, 0x0177
    2f8c:	90 91 78 01 	lds	r25, 0x0178
    2f90:	01 96       	adiw	r24, 0x01	; 1
    2f92:	90 93 78 01 	sts	0x0178, r25
    2f96:	80 93 77 01 	sts	0x0177, r24
	if (g_ticks == 31)
    2f9a:	80 91 77 01 	lds	r24, 0x0177
    2f9e:	90 91 78 01 	lds	r25, 0x0178
    2fa2:	8f 31       	cpi	r24, 0x1F	; 31
    2fa4:	91 05       	cpc	r25, r1
    2fa6:	69 f4       	brne	.+26     	; 0x2fc2 <TASK_TickTok+0x42>
	{
		g_ticks = 0;
    2fa8:	10 92 78 01 	sts	0x0178, r1
    2fac:	10 92 77 01 	sts	0x0177, r1
		g_seconds++;
    2fb0:	80 91 73 01 	lds	r24, 0x0173
    2fb4:	90 91 74 01 	lds	r25, 0x0174
    2fb8:	01 96       	adiw	r24, 0x01	; 1
    2fba:	90 93 74 01 	sts	0x0174, r25
    2fbe:	80 93 73 01 	sts	0x0173, r24
	}
}
    2fc2:	cf 91       	pop	r28
    2fc4:	df 91       	pop	r29
    2fc6:	08 95       	ret

00002fc8 <__vector_9>:
volatile uint16 g_ticks = 0;
/*========================================================================================================
 ||                            			Interrupt Service Routines               	 	    	         ||
 ========================================================================================================*/
ISR(TIMER0_OVF_vect)
{
    2fc8:	1f 92       	push	r1
    2fca:	0f 92       	push	r0
    2fcc:	0f b6       	in	r0, 0x3f	; 63
    2fce:	0f 92       	push	r0
    2fd0:	11 24       	eor	r1, r1
    2fd2:	2f 93       	push	r18
    2fd4:	3f 93       	push	r19
    2fd6:	4f 93       	push	r20
    2fd8:	5f 93       	push	r21
    2fda:	6f 93       	push	r22
    2fdc:	7f 93       	push	r23
    2fde:	8f 93       	push	r24
    2fe0:	9f 93       	push	r25
    2fe2:	af 93       	push	r26
    2fe4:	bf 93       	push	r27
    2fe6:	ef 93       	push	r30
    2fe8:	ff 93       	push	r31
    2fea:	df 93       	push	r29
    2fec:	cf 93       	push	r28
    2fee:	cd b7       	in	r28, 0x3d	; 61
    2ff0:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr_timer0)
    2ff2:	80 91 75 01 	lds	r24, 0x0175
    2ff6:	90 91 76 01 	lds	r25, 0x0176
    2ffa:	00 97       	sbiw	r24, 0x00	; 0
    2ffc:	29 f0       	breq	.+10     	; 0x3008 <__vector_9+0x40>
		(*g_callBackPtr_timer0)();
    2ffe:	e0 91 75 01 	lds	r30, 0x0175
    3002:	f0 91 76 01 	lds	r31, 0x0176
    3006:	09 95       	icall
}
    3008:	cf 91       	pop	r28
    300a:	df 91       	pop	r29
    300c:	ff 91       	pop	r31
    300e:	ef 91       	pop	r30
    3010:	bf 91       	pop	r27
    3012:	af 91       	pop	r26
    3014:	9f 91       	pop	r25
    3016:	8f 91       	pop	r24
    3018:	7f 91       	pop	r23
    301a:	6f 91       	pop	r22
    301c:	5f 91       	pop	r21
    301e:	4f 91       	pop	r20
    3020:	3f 91       	pop	r19
    3022:	2f 91       	pop	r18
    3024:	0f 90       	pop	r0
    3026:	0f be       	out	0x3f, r0	; 63
    3028:	0f 90       	pop	r0
    302a:	1f 90       	pop	r1
    302c:	18 95       	reti

0000302e <TIMER0_init>:
 * Description : Initialize the timer by the passed configurations								  		  *
 * Arguments:																							  *
 * 		Config_Ptr <Timer_ConfigType*> The timer's configurations								  		  *
 **********************************************************************************************************/
void TIMER0_init(Timer0_ConfigType * Config_Ptr)
{
    302e:	df 93       	push	r29
    3030:	cf 93       	push	r28
    3032:	00 d0       	rcall	.+0      	; 0x3034 <TIMER0_init+0x6>
    3034:	cd b7       	in	r28, 0x3d	; 61
    3036:	de b7       	in	r29, 0x3e	; 62
    3038:	9a 83       	std	Y+2, r25	; 0x02
    303a:	89 83       	std	Y+1, r24	; 0x01
	/* Initialize the counter */
	TCNT0 = Config_Ptr->initial_value;
    303c:	22 e5       	ldi	r18, 0x52	; 82
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	e9 81       	ldd	r30, Y+1	; 0x01
    3042:	fa 81       	ldd	r31, Y+2	; 0x02
    3044:	80 81       	ld	r24, Z
    3046:	91 81       	ldd	r25, Z+1	; 0x01
    3048:	a2 81       	ldd	r26, Z+2	; 0x02
    304a:	b3 81       	ldd	r27, Z+3	; 0x03
    304c:	f9 01       	movw	r30, r18
    304e:	80 83       	st	Z, r24

	/* Initialize the compare match value */
	OCR0 = Config_Ptr->compare_value;
    3050:	2c e5       	ldi	r18, 0x5C	; 92
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	e9 81       	ldd	r30, Y+1	; 0x01
    3056:	fa 81       	ldd	r31, Y+2	; 0x02
    3058:	84 81       	ldd	r24, Z+4	; 0x04
    305a:	95 81       	ldd	r25, Z+5	; 0x05
    305c:	a6 81       	ldd	r26, Z+6	; 0x06
    305e:	b7 81       	ldd	r27, Z+7	; 0x07
    3060:	f9 01       	movw	r30, r18
    3062:	80 83       	st	Z, r24

	/* Reset the timer settings */
	TCCR0 = 0;
    3064:	e3 e5       	ldi	r30, 0x53	; 83
    3066:	f0 e0       	ldi	r31, 0x00	; 0
    3068:	10 82       	st	Z, r1

	if ((Config_Ptr->timer_mode == NORMAL_MODE) || (Config_Ptr->timer_mode == OVERFLOW_MODE))
    306a:	e9 81       	ldd	r30, Y+1	; 0x01
    306c:	fa 81       	ldd	r31, Y+2	; 0x02
    306e:	81 85       	ldd	r24, Z+9	; 0x09
    3070:	88 23       	and	r24, r24
    3072:	29 f0       	breq	.+10     	; 0x307e <TIMER0_init+0x50>
    3074:	e9 81       	ldd	r30, Y+1	; 0x01
    3076:	fa 81       	ldd	r31, Y+2	; 0x02
    3078:	81 85       	ldd	r24, Z+9	; 0x09
    307a:	88 23       	and	r24, r24
    307c:	19 f5       	brne	.+70     	; 0x30c4 <TIMER0_init+0x96>
	{
		/* Disable the PWM Mode */
		SET_BIT(TCCR0, FOC0);
    307e:	a3 e5       	ldi	r26, 0x53	; 83
    3080:	b0 e0       	ldi	r27, 0x00	; 0
    3082:	e3 e5       	ldi	r30, 0x53	; 83
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	80 81       	ld	r24, Z
    3088:	80 68       	ori	r24, 0x80	; 128
    308a:	8c 93       	st	X, r24

		/* Setup the timer mode */
		CLEAR_BIT(TCCR0, WGM01);
    308c:	a3 e5       	ldi	r26, 0x53	; 83
    308e:	b0 e0       	ldi	r27, 0x00	; 0
    3090:	e3 e5       	ldi	r30, 0x53	; 83
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
    3096:	87 7f       	andi	r24, 0xF7	; 247
    3098:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, WGM00);
    309a:	a3 e5       	ldi	r26, 0x53	; 83
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	e3 e5       	ldi	r30, 0x53	; 83
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	80 81       	ld	r24, Z
    30a4:	8f 7b       	andi	r24, 0xBF	; 191
    30a6:	8c 93       	st	X, r24

		/* Feed the timer clock by setup the prescaler */
		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->timer_clock & 0x07);
    30a8:	a3 e5       	ldi	r26, 0x53	; 83
    30aa:	b0 e0       	ldi	r27, 0x00	; 0
    30ac:	e3 e5       	ldi	r30, 0x53	; 83
    30ae:	f0 e0       	ldi	r31, 0x00	; 0
    30b0:	80 81       	ld	r24, Z
    30b2:	98 2f       	mov	r25, r24
    30b4:	98 7f       	andi	r25, 0xF8	; 248
    30b6:	e9 81       	ldd	r30, Y+1	; 0x01
    30b8:	fa 81       	ldd	r31, Y+2	; 0x02
    30ba:	80 85       	ldd	r24, Z+8	; 0x08
    30bc:	87 70       	andi	r24, 0x07	; 7
    30be:	89 2b       	or	r24, r25
    30c0:	8c 93       	st	X, r24
    30c2:	3d c0       	rjmp	.+122    	; 0x313e <TIMER0_init+0x110>
	}
	else if (Config_Ptr->timer_mode == COMPARE_MODE)
    30c4:	e9 81       	ldd	r30, Y+1	; 0x01
    30c6:	fa 81       	ldd	r31, Y+2	; 0x02
    30c8:	81 85       	ldd	r24, Z+9	; 0x09
    30ca:	81 30       	cpi	r24, 0x01	; 1
    30cc:	c1 f5       	brne	.+112    	; 0x313e <TIMER0_init+0x110>
	{
		/* Disable the PWM Mode */
		SET_BIT(TCCR0, FOC0);
    30ce:	a3 e5       	ldi	r26, 0x53	; 83
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	e3 e5       	ldi	r30, 0x53	; 83
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	80 81       	ld	r24, Z
    30d8:	80 68       	ori	r24, 0x80	; 128
    30da:	8c 93       	st	X, r24

		/* Setup the timer mode */
		SET_BIT(TCCR0, WGM01);
    30dc:	a3 e5       	ldi	r26, 0x53	; 83
    30de:	b0 e0       	ldi	r27, 0x00	; 0
    30e0:	e3 e5       	ldi	r30, 0x53	; 83
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	80 81       	ld	r24, Z
    30e6:	88 60       	ori	r24, 0x08	; 8
    30e8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, WGM00);
    30ea:	a3 e5       	ldi	r26, 0x53	; 83
    30ec:	b0 e0       	ldi	r27, 0x00	; 0
    30ee:	e3 e5       	ldi	r30, 0x53	; 83
    30f0:	f0 e0       	ldi	r31, 0x00	; 0
    30f2:	80 81       	ld	r24, Z
    30f4:	8f 7b       	andi	r24, 0xBF	; 191
    30f6:	8c 93       	st	X, r24

		/* Setup the compare output mode */
		TCCR0 = (TCCR0 & 0xCF) | ((Config_Ptr->com_mode & 0x03) << 4);
    30f8:	a3 e5       	ldi	r26, 0x53	; 83
    30fa:	b0 e0       	ldi	r27, 0x00	; 0
    30fc:	e3 e5       	ldi	r30, 0x53	; 83
    30fe:	f0 e0       	ldi	r31, 0x00	; 0
    3100:	80 81       	ld	r24, Z
    3102:	28 2f       	mov	r18, r24
    3104:	2f 7c       	andi	r18, 0xCF	; 207
    3106:	e9 81       	ldd	r30, Y+1	; 0x01
    3108:	fa 81       	ldd	r31, Y+2	; 0x02
    310a:	82 85       	ldd	r24, Z+10	; 0x0a
    310c:	88 2f       	mov	r24, r24
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	83 70       	andi	r24, 0x03	; 3
    3112:	90 70       	andi	r25, 0x00	; 0
    3114:	82 95       	swap	r24
    3116:	92 95       	swap	r25
    3118:	90 7f       	andi	r25, 0xF0	; 240
    311a:	98 27       	eor	r25, r24
    311c:	80 7f       	andi	r24, 0xF0	; 240
    311e:	98 27       	eor	r25, r24
    3120:	82 2b       	or	r24, r18
    3122:	8c 93       	st	X, r24

		/* Feed the timer clock by setup the prescaler */
		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->timer_clock & 0x07);
    3124:	a3 e5       	ldi	r26, 0x53	; 83
    3126:	b0 e0       	ldi	r27, 0x00	; 0
    3128:	e3 e5       	ldi	r30, 0x53	; 83
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	80 81       	ld	r24, Z
    312e:	98 2f       	mov	r25, r24
    3130:	98 7f       	andi	r25, 0xF8	; 248
    3132:	e9 81       	ldd	r30, Y+1	; 0x01
    3134:	fa 81       	ldd	r31, Y+2	; 0x02
    3136:	80 85       	ldd	r24, Z+8	; 0x08
    3138:	87 70       	andi	r24, 0x07	; 7
    313a:	89 2b       	or	r24, r25
    313c:	8c 93       	st	X, r24
	}

	SET_BIT(SREG, SREG_I);
    313e:	af e5       	ldi	r26, 0x5F	; 95
    3140:	b0 e0       	ldi	r27, 0x00	; 0
    3142:	ef e5       	ldi	r30, 0x5F	; 95
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	80 81       	ld	r24, Z
    3148:	80 68       	ori	r24, 0x80	; 128
    314a:	8c 93       	st	X, r24
	SET_BIT(TIMSK, TOIE0);
    314c:	a9 e5       	ldi	r26, 0x59	; 89
    314e:	b0 e0       	ldi	r27, 0x00	; 0
    3150:	e9 e5       	ldi	r30, 0x59	; 89
    3152:	f0 e0       	ldi	r31, 0x00	; 0
    3154:	80 81       	ld	r24, Z
    3156:	81 60       	ori	r24, 0x01	; 1
    3158:	8c 93       	st	X, r24
}
    315a:	0f 90       	pop	r0
    315c:	0f 90       	pop	r0
    315e:	cf 91       	pop	r28
    3160:	df 91       	pop	r29
    3162:	08 95       	ret

00003164 <TIMER0_setCallBack>:
 * Description : Function to set the Call Back function address.										  *
 * Arguments:																							  *
 * 		a_ptr <void*> The function address which will be called back									  *
 **********************************************************************************************************/
void TIMER0_setCallBack(void(*a_ptr)(void))
{
    3164:	df 93       	push	r29
    3166:	cf 93       	push	r28
    3168:	00 d0       	rcall	.+0      	; 0x316a <TIMER0_setCallBack+0x6>
    316a:	cd b7       	in	r28, 0x3d	; 61
    316c:	de b7       	in	r29, 0x3e	; 62
    316e:	9a 83       	std	Y+2, r25	; 0x02
    3170:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr_timer0 = (volatile void*)a_ptr;
    3172:	89 81       	ldd	r24, Y+1	; 0x01
    3174:	9a 81       	ldd	r25, Y+2	; 0x02
    3176:	90 93 76 01 	sts	0x0176, r25
    317a:	80 93 75 01 	sts	0x0175, r24
}
    317e:	0f 90       	pop	r0
    3180:	0f 90       	pop	r0
    3182:	cf 91       	pop	r28
    3184:	df 91       	pop	r29
    3186:	08 95       	ret

00003188 <TIMER0_deinit>:
 * Description : De-initialize the timer														  		  *
 * Arguments:																							  *
 * 		NONE								 		  													  *
 **********************************************************************************************************/
void TIMER0_deinit()
{
    3188:	df 93       	push	r29
    318a:	cf 93       	push	r28
    318c:	cd b7       	in	r28, 0x3d	; 61
    318e:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = OCR0 = TCCR0 = 0;
    3190:	22 e5       	ldi	r18, 0x52	; 82
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	ac e5       	ldi	r26, 0x5C	; 92
    3196:	b0 e0       	ldi	r27, 0x00	; 0
    3198:	e3 e5       	ldi	r30, 0x53	; 83
    319a:	f0 e0       	ldi	r31, 0x00	; 0
    319c:	10 82       	st	Z, r1
    319e:	80 81       	ld	r24, Z
    31a0:	8c 93       	st	X, r24
    31a2:	8c 91       	ld	r24, X
    31a4:	f9 01       	movw	r30, r18
    31a6:	80 83       	st	Z, r24
}
    31a8:	cf 91       	pop	r28
    31aa:	df 91       	pop	r29
    31ac:	08 95       	ret

000031ae <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_config *Config_Ptr)
{
    31ae:	df 93       	push	r29
    31b0:	cf 93       	push	r28
    31b2:	00 d0       	rcall	.+0      	; 0x31b4 <UART_init+0x6>
    31b4:	00 d0       	rcall	.+0      	; 0x31b6 <UART_init+0x8>
    31b6:	cd b7       	in	r28, 0x3d	; 61
    31b8:	de b7       	in	r29, 0x3e	; 62
    31ba:	9c 83       	std	Y+4, r25	; 0x04
    31bc:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    31be:	1a 82       	std	Y+2, r1	; 0x02
    31c0:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    31c2:	eb e2       	ldi	r30, 0x2B	; 43
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	82 e0       	ldi	r24, 0x02	; 2
    31c8:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    31ca:	ea e2       	ldi	r30, 0x2A	; 42
    31cc:	f0 e0       	ldi	r31, 0x00	; 0
    31ce:	88 e1       	ldi	r24, 0x18	; 24
    31d0:	80 83       	st	Z, r24
	if(Config_Ptr->number_of_bits_per_frame == NINE_BITS)
    31d2:	eb 81       	ldd	r30, Y+3	; 0x03
    31d4:	fc 81       	ldd	r31, Y+4	; 0x04
    31d6:	84 81       	ldd	r24, Z+4	; 0x04
    31d8:	87 30       	cpi	r24, 0x07	; 7
    31da:	39 f4       	brne	.+14     	; 0x31ea <UART_init+0x3c>
		UCSRB |= (1<<UCSZ2);
    31dc:	aa e2       	ldi	r26, 0x2A	; 42
    31de:	b0 e0       	ldi	r27, 0x00	; 0
    31e0:	ea e2       	ldi	r30, 0x2A	; 42
    31e2:	f0 e0       	ldi	r31, 0x00	; 0
    31e4:	80 81       	ld	r24, Z
    31e6:	84 60       	ori	r24, 0x04	; 4
    31e8:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    31ea:	e0 e4       	ldi	r30, 0x40	; 64
    31ec:	f0 e0       	ldi	r31, 0x00	; 0
    31ee:	80 e8       	ldi	r24, 0x80	; 128
    31f0:	80 83       	st	Z, r24
	/* Set the parity type in UPM1:0 */
	UCSRC |= ((Config_Ptr ->parity_type <<UPM0) & 0x30);
    31f2:	a0 e4       	ldi	r26, 0x40	; 64
    31f4:	b0 e0       	ldi	r27, 0x00	; 0
    31f6:	e0 e4       	ldi	r30, 0x40	; 64
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	80 81       	ld	r24, Z
    31fc:	28 2f       	mov	r18, r24
    31fe:	eb 81       	ldd	r30, Y+3	; 0x03
    3200:	fc 81       	ldd	r31, Y+4	; 0x04
    3202:	85 81       	ldd	r24, Z+5	; 0x05
    3204:	88 2f       	mov	r24, r24
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	82 95       	swap	r24
    320a:	92 95       	swap	r25
    320c:	90 7f       	andi	r25, 0xF0	; 240
    320e:	98 27       	eor	r25, r24
    3210:	80 7f       	andi	r24, 0xF0	; 240
    3212:	98 27       	eor	r25, r24
    3214:	80 73       	andi	r24, 0x30	; 48
    3216:	82 2b       	or	r24, r18
    3218:	8c 93       	st	X, r24
	/* Set the data range in UCSZ1:0 */
	UCSRC |= ((Config_Ptr ->number_of_bits_per_frame << UCSZ0) & 0x06);
    321a:	a0 e4       	ldi	r26, 0x40	; 64
    321c:	b0 e0       	ldi	r27, 0x00	; 0
    321e:	e0 e4       	ldi	r30, 0x40	; 64
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	80 81       	ld	r24, Z
    3224:	28 2f       	mov	r18, r24
    3226:	eb 81       	ldd	r30, Y+3	; 0x03
    3228:	fc 81       	ldd	r31, Y+4	; 0x04
    322a:	84 81       	ldd	r24, Z+4	; 0x04
    322c:	88 2f       	mov	r24, r24
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	88 0f       	add	r24, r24
    3232:	99 1f       	adc	r25, r25
    3234:	86 70       	andi	r24, 0x06	; 6
    3236:	82 2b       	or	r24, r18
    3238:	8c 93       	st	X, r24
	/* Set the numbers of stop bits in USBS */
	UCSRC |= ((Config_Ptr ->number_of_stop_bits << USBS) & 0x08);
    323a:	a0 e4       	ldi	r26, 0x40	; 64
    323c:	b0 e0       	ldi	r27, 0x00	; 0
    323e:	e0 e4       	ldi	r30, 0x40	; 64
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	80 81       	ld	r24, Z
    3244:	28 2f       	mov	r18, r24
    3246:	eb 81       	ldd	r30, Y+3	; 0x03
    3248:	fc 81       	ldd	r31, Y+4	; 0x04
    324a:	86 81       	ldd	r24, Z+6	; 0x06
    324c:	88 2f       	mov	r24, r24
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	88 0f       	add	r24, r24
    3252:	99 1f       	adc	r25, r25
    3254:	88 0f       	add	r24, r24
    3256:	99 1f       	adc	r25, r25
    3258:	88 0f       	add	r24, r24
    325a:	99 1f       	adc	r25, r25
    325c:	88 70       	andi	r24, 0x08	; 8
    325e:	82 2b       	or	r24, r18
    3260:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    3262:	eb 81       	ldd	r30, Y+3	; 0x03
    3264:	fc 81       	ldd	r31, Y+4	; 0x04
    3266:	80 81       	ld	r24, Z
    3268:	91 81       	ldd	r25, Z+1	; 0x01
    326a:	a2 81       	ldd	r26, Z+2	; 0x02
    326c:	b3 81       	ldd	r27, Z+3	; 0x03
    326e:	88 0f       	add	r24, r24
    3270:	99 1f       	adc	r25, r25
    3272:	aa 1f       	adc	r26, r26
    3274:	bb 1f       	adc	r27, r27
    3276:	88 0f       	add	r24, r24
    3278:	99 1f       	adc	r25, r25
    327a:	aa 1f       	adc	r26, r26
    327c:	bb 1f       	adc	r27, r27
    327e:	88 0f       	add	r24, r24
    3280:	99 1f       	adc	r25, r25
    3282:	aa 1f       	adc	r26, r26
    3284:	bb 1f       	adc	r27, r27
    3286:	9c 01       	movw	r18, r24
    3288:	ad 01       	movw	r20, r26
    328a:	80 e0       	ldi	r24, 0x00	; 0
    328c:	92 e1       	ldi	r25, 0x12	; 18
    328e:	aa e7       	ldi	r26, 0x7A	; 122
    3290:	b0 e0       	ldi	r27, 0x00	; 0
    3292:	bc 01       	movw	r22, r24
    3294:	cd 01       	movw	r24, r26
    3296:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodsi4>
    329a:	da 01       	movw	r26, r20
    329c:	c9 01       	movw	r24, r18
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	9a 83       	std	Y+2, r25	; 0x02
    32a2:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    32a4:	e0 e4       	ldi	r30, 0x40	; 64
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	89 81       	ldd	r24, Y+1	; 0x01
    32aa:	9a 81       	ldd	r25, Y+2	; 0x02
    32ac:	89 2f       	mov	r24, r25
    32ae:	99 27       	eor	r25, r25
    32b0:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    32b2:	e9 e2       	ldi	r30, 0x29	; 41
    32b4:	f0 e0       	ldi	r31, 0x00	; 0
    32b6:	89 81       	ldd	r24, Y+1	; 0x01
    32b8:	80 83       	st	Z, r24
}
    32ba:	0f 90       	pop	r0
    32bc:	0f 90       	pop	r0
    32be:	0f 90       	pop	r0
    32c0:	0f 90       	pop	r0
    32c2:	cf 91       	pop	r28
    32c4:	df 91       	pop	r29
    32c6:	08 95       	ret

000032c8 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    32c8:	df 93       	push	r29
    32ca:	cf 93       	push	r28
    32cc:	0f 92       	push	r0
    32ce:	cd b7       	in	r28, 0x3d	; 61
    32d0:	de b7       	in	r29, 0x3e	; 62
    32d2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    32d4:	eb e2       	ldi	r30, 0x2B	; 43
    32d6:	f0 e0       	ldi	r31, 0x00	; 0
    32d8:	80 81       	ld	r24, Z
    32da:	88 2f       	mov	r24, r24
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	80 72       	andi	r24, 0x20	; 32
    32e0:	90 70       	andi	r25, 0x00	; 0
    32e2:	00 97       	sbiw	r24, 0x00	; 0
    32e4:	b9 f3       	breq	.-18     	; 0x32d4 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    32e6:	ec e2       	ldi	r30, 0x2C	; 44
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	89 81       	ldd	r24, Y+1	; 0x01
    32ec:	80 83       	st	Z, r24
}
    32ee:	0f 90       	pop	r0
    32f0:	cf 91       	pop	r28
    32f2:	df 91       	pop	r29
    32f4:	08 95       	ret

000032f6 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    32f6:	df 93       	push	r29
    32f8:	cf 93       	push	r28
    32fa:	cd b7       	in	r28, 0x3d	; 61
    32fc:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    32fe:	eb e2       	ldi	r30, 0x2B	; 43
    3300:	f0 e0       	ldi	r31, 0x00	; 0
    3302:	80 81       	ld	r24, Z
    3304:	88 23       	and	r24, r24
    3306:	dc f7       	brge	.-10     	; 0x32fe <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    3308:	ec e2       	ldi	r30, 0x2C	; 44
    330a:	f0 e0       	ldi	r31, 0x00	; 0
    330c:	80 81       	ld	r24, Z
}
    330e:	cf 91       	pop	r28
    3310:	df 91       	pop	r29
    3312:	08 95       	ret

00003314 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3314:	df 93       	push	r29
    3316:	cf 93       	push	r28
    3318:	00 d0       	rcall	.+0      	; 0x331a <UART_sendString+0x6>
    331a:	cd b7       	in	r28, 0x3d	; 61
    331c:	de b7       	in	r29, 0x3e	; 62
    331e:	9a 83       	std	Y+2, r25	; 0x02
    3320:	89 83       	std	Y+1, r24	; 0x01
    3322:	0a c0       	rjmp	.+20     	; 0x3338 <UART_sendString+0x24>
	/* Send the whole string */
	while(*Str != '\0')
	{
		UART_sendByte(*Str);
    3324:	e9 81       	ldd	r30, Y+1	; 0x01
    3326:	fa 81       	ldd	r31, Y+2	; 0x02
    3328:	80 81       	ld	r24, Z
    332a:	0e 94 64 19 	call	0x32c8	; 0x32c8 <UART_sendByte>
		Str++;
    332e:	89 81       	ldd	r24, Y+1	; 0x01
    3330:	9a 81       	ldd	r25, Y+2	; 0x02
    3332:	01 96       	adiw	r24, 0x01	; 1
    3334:	9a 83       	std	Y+2, r25	; 0x02
    3336:	89 83       	std	Y+1, r24	; 0x01
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
	/* Send the whole string */
	while(*Str != '\0')
    3338:	e9 81       	ldd	r30, Y+1	; 0x01
    333a:	fa 81       	ldd	r31, Y+2	; 0x02
    333c:	80 81       	ld	r24, Z
    333e:	88 23       	and	r24, r24
    3340:	89 f7       	brne	.-30     	; 0x3324 <UART_sendString+0x10>
	{
		UART_sendByte(*Str);
		Str++;
	}
}
    3342:	0f 90       	pop	r0
    3344:	0f 90       	pop	r0
    3346:	cf 91       	pop	r28
    3348:	df 91       	pop	r29
    334a:	08 95       	ret

0000334c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    334c:	0f 93       	push	r16
    334e:	1f 93       	push	r17
    3350:	df 93       	push	r29
    3352:	cf 93       	push	r28
    3354:	00 d0       	rcall	.+0      	; 0x3356 <UART_receiveString+0xa>
    3356:	0f 92       	push	r0
    3358:	cd b7       	in	r28, 0x3d	; 61
    335a:	de b7       	in	r29, 0x3e	; 62
    335c:	9b 83       	std	Y+3, r25	; 0x03
    335e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3360:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3362:	89 81       	ldd	r24, Y+1	; 0x01
    3364:	28 2f       	mov	r18, r24
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	8a 81       	ldd	r24, Y+2	; 0x02
    336a:	9b 81       	ldd	r25, Y+3	; 0x03
    336c:	8c 01       	movw	r16, r24
    336e:	02 0f       	add	r16, r18
    3370:	13 1f       	adc	r17, r19
    3372:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <UART_recieveByte>
    3376:	f8 01       	movw	r30, r16
    3378:	80 83       	st	Z, r24
    337a:	0f c0       	rjmp	.+30     	; 0x339a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    337c:	89 81       	ldd	r24, Y+1	; 0x01
    337e:	8f 5f       	subi	r24, 0xFF	; 255
    3380:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3382:	89 81       	ldd	r24, Y+1	; 0x01
    3384:	28 2f       	mov	r18, r24
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	8a 81       	ldd	r24, Y+2	; 0x02
    338a:	9b 81       	ldd	r25, Y+3	; 0x03
    338c:	8c 01       	movw	r16, r24
    338e:	02 0f       	add	r16, r18
    3390:	13 1f       	adc	r17, r19
    3392:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <UART_recieveByte>
    3396:	f8 01       	movw	r30, r16
    3398:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    339a:	89 81       	ldd	r24, Y+1	; 0x01
    339c:	28 2f       	mov	r18, r24
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	8a 81       	ldd	r24, Y+2	; 0x02
    33a2:	9b 81       	ldd	r25, Y+3	; 0x03
    33a4:	fc 01       	movw	r30, r24
    33a6:	e2 0f       	add	r30, r18
    33a8:	f3 1f       	adc	r31, r19
    33aa:	80 81       	ld	r24, Z
    33ac:	83 32       	cpi	r24, 0x23	; 35
    33ae:	31 f7       	brne	.-52     	; 0x337c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    33b0:	89 81       	ldd	r24, Y+1	; 0x01
    33b2:	28 2f       	mov	r18, r24
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	8a 81       	ldd	r24, Y+2	; 0x02
    33b8:	9b 81       	ldd	r25, Y+3	; 0x03
    33ba:	fc 01       	movw	r30, r24
    33bc:	e2 0f       	add	r30, r18
    33be:	f3 1f       	adc	r31, r19
    33c0:	10 82       	st	Z, r1
}
    33c2:	0f 90       	pop	r0
    33c4:	0f 90       	pop	r0
    33c6:	0f 90       	pop	r0
    33c8:	cf 91       	pop	r28
    33ca:	df 91       	pop	r29
    33cc:	1f 91       	pop	r17
    33ce:	0f 91       	pop	r16
    33d0:	08 95       	ret

000033d2 <__udivmodsi4>:
    33d2:	a1 e2       	ldi	r26, 0x21	; 33
    33d4:	1a 2e       	mov	r1, r26
    33d6:	aa 1b       	sub	r26, r26
    33d8:	bb 1b       	sub	r27, r27
    33da:	fd 01       	movw	r30, r26
    33dc:	0d c0       	rjmp	.+26     	; 0x33f8 <__udivmodsi4_ep>

000033de <__udivmodsi4_loop>:
    33de:	aa 1f       	adc	r26, r26
    33e0:	bb 1f       	adc	r27, r27
    33e2:	ee 1f       	adc	r30, r30
    33e4:	ff 1f       	adc	r31, r31
    33e6:	a2 17       	cp	r26, r18
    33e8:	b3 07       	cpc	r27, r19
    33ea:	e4 07       	cpc	r30, r20
    33ec:	f5 07       	cpc	r31, r21
    33ee:	20 f0       	brcs	.+8      	; 0x33f8 <__udivmodsi4_ep>
    33f0:	a2 1b       	sub	r26, r18
    33f2:	b3 0b       	sbc	r27, r19
    33f4:	e4 0b       	sbc	r30, r20
    33f6:	f5 0b       	sbc	r31, r21

000033f8 <__udivmodsi4_ep>:
    33f8:	66 1f       	adc	r22, r22
    33fa:	77 1f       	adc	r23, r23
    33fc:	88 1f       	adc	r24, r24
    33fe:	99 1f       	adc	r25, r25
    3400:	1a 94       	dec	r1
    3402:	69 f7       	brne	.-38     	; 0x33de <__udivmodsi4_loop>
    3404:	60 95       	com	r22
    3406:	70 95       	com	r23
    3408:	80 95       	com	r24
    340a:	90 95       	com	r25
    340c:	9b 01       	movw	r18, r22
    340e:	ac 01       	movw	r20, r24
    3410:	bd 01       	movw	r22, r26
    3412:	cf 01       	movw	r24, r30
    3414:	08 95       	ret

00003416 <__prologue_saves__>:
    3416:	2f 92       	push	r2
    3418:	3f 92       	push	r3
    341a:	4f 92       	push	r4
    341c:	5f 92       	push	r5
    341e:	6f 92       	push	r6
    3420:	7f 92       	push	r7
    3422:	8f 92       	push	r8
    3424:	9f 92       	push	r9
    3426:	af 92       	push	r10
    3428:	bf 92       	push	r11
    342a:	cf 92       	push	r12
    342c:	df 92       	push	r13
    342e:	ef 92       	push	r14
    3430:	ff 92       	push	r15
    3432:	0f 93       	push	r16
    3434:	1f 93       	push	r17
    3436:	cf 93       	push	r28
    3438:	df 93       	push	r29
    343a:	cd b7       	in	r28, 0x3d	; 61
    343c:	de b7       	in	r29, 0x3e	; 62
    343e:	ca 1b       	sub	r28, r26
    3440:	db 0b       	sbc	r29, r27
    3442:	0f b6       	in	r0, 0x3f	; 63
    3444:	f8 94       	cli
    3446:	de bf       	out	0x3e, r29	; 62
    3448:	0f be       	out	0x3f, r0	; 63
    344a:	cd bf       	out	0x3d, r28	; 61
    344c:	09 94       	ijmp

0000344e <__epilogue_restores__>:
    344e:	2a 88       	ldd	r2, Y+18	; 0x12
    3450:	39 88       	ldd	r3, Y+17	; 0x11
    3452:	48 88       	ldd	r4, Y+16	; 0x10
    3454:	5f 84       	ldd	r5, Y+15	; 0x0f
    3456:	6e 84       	ldd	r6, Y+14	; 0x0e
    3458:	7d 84       	ldd	r7, Y+13	; 0x0d
    345a:	8c 84       	ldd	r8, Y+12	; 0x0c
    345c:	9b 84       	ldd	r9, Y+11	; 0x0b
    345e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3460:	b9 84       	ldd	r11, Y+9	; 0x09
    3462:	c8 84       	ldd	r12, Y+8	; 0x08
    3464:	df 80       	ldd	r13, Y+7	; 0x07
    3466:	ee 80       	ldd	r14, Y+6	; 0x06
    3468:	fd 80       	ldd	r15, Y+5	; 0x05
    346a:	0c 81       	ldd	r16, Y+4	; 0x04
    346c:	1b 81       	ldd	r17, Y+3	; 0x03
    346e:	aa 81       	ldd	r26, Y+2	; 0x02
    3470:	b9 81       	ldd	r27, Y+1	; 0x01
    3472:	ce 0f       	add	r28, r30
    3474:	d1 1d       	adc	r29, r1
    3476:	0f b6       	in	r0, 0x3f	; 63
    3478:	f8 94       	cli
    347a:	de bf       	out	0x3e, r29	; 62
    347c:	0f be       	out	0x3f, r0	; 63
    347e:	cd bf       	out	0x3d, r28	; 61
    3480:	ed 01       	movw	r28, r26
    3482:	08 95       	ret

00003484 <itoa>:
    3484:	fb 01       	movw	r30, r22
    3486:	9f 01       	movw	r18, r30
    3488:	e8 94       	clt
    348a:	42 30       	cpi	r20, 0x02	; 2
    348c:	c4 f0       	brlt	.+48     	; 0x34be <itoa+0x3a>
    348e:	45 32       	cpi	r20, 0x25	; 37
    3490:	b4 f4       	brge	.+44     	; 0x34be <itoa+0x3a>
    3492:	4a 30       	cpi	r20, 0x0A	; 10
    3494:	29 f4       	brne	.+10     	; 0x34a0 <itoa+0x1c>
    3496:	97 fb       	bst	r25, 7
    3498:	1e f4       	brtc	.+6      	; 0x34a0 <itoa+0x1c>
    349a:	90 95       	com	r25
    349c:	81 95       	neg	r24
    349e:	9f 4f       	sbci	r25, 0xFF	; 255
    34a0:	64 2f       	mov	r22, r20
    34a2:	77 27       	eor	r23, r23
    34a4:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <__udivmodhi4>
    34a8:	80 5d       	subi	r24, 0xD0	; 208
    34aa:	8a 33       	cpi	r24, 0x3A	; 58
    34ac:	0c f0       	brlt	.+2      	; 0x34b0 <itoa+0x2c>
    34ae:	89 5d       	subi	r24, 0xD9	; 217
    34b0:	81 93       	st	Z+, r24
    34b2:	cb 01       	movw	r24, r22
    34b4:	00 97       	sbiw	r24, 0x00	; 0
    34b6:	a1 f7       	brne	.-24     	; 0x34a0 <itoa+0x1c>
    34b8:	16 f4       	brtc	.+4      	; 0x34be <itoa+0x3a>
    34ba:	5d e2       	ldi	r21, 0x2D	; 45
    34bc:	51 93       	st	Z+, r21
    34be:	10 82       	st	Z, r1
    34c0:	c9 01       	movw	r24, r18
    34c2:	0c 94 63 1a 	jmp	0x34c6	; 0x34c6 <strrev>

000034c6 <strrev>:
    34c6:	dc 01       	movw	r26, r24
    34c8:	fc 01       	movw	r30, r24
    34ca:	67 2f       	mov	r22, r23
    34cc:	71 91       	ld	r23, Z+
    34ce:	77 23       	and	r23, r23
    34d0:	e1 f7       	brne	.-8      	; 0x34ca <strrev+0x4>
    34d2:	32 97       	sbiw	r30, 0x02	; 2
    34d4:	04 c0       	rjmp	.+8      	; 0x34de <strrev+0x18>
    34d6:	7c 91       	ld	r23, X
    34d8:	6d 93       	st	X+, r22
    34da:	70 83       	st	Z, r23
    34dc:	62 91       	ld	r22, -Z
    34de:	ae 17       	cp	r26, r30
    34e0:	bf 07       	cpc	r27, r31
    34e2:	c8 f3       	brcs	.-14     	; 0x34d6 <strrev+0x10>
    34e4:	08 95       	ret

000034e6 <__udivmodhi4>:
    34e6:	aa 1b       	sub	r26, r26
    34e8:	bb 1b       	sub	r27, r27
    34ea:	51 e1       	ldi	r21, 0x11	; 17
    34ec:	07 c0       	rjmp	.+14     	; 0x34fc <__udivmodhi4_ep>

000034ee <__udivmodhi4_loop>:
    34ee:	aa 1f       	adc	r26, r26
    34f0:	bb 1f       	adc	r27, r27
    34f2:	a6 17       	cp	r26, r22
    34f4:	b7 07       	cpc	r27, r23
    34f6:	10 f0       	brcs	.+4      	; 0x34fc <__udivmodhi4_ep>
    34f8:	a6 1b       	sub	r26, r22
    34fa:	b7 0b       	sbc	r27, r23

000034fc <__udivmodhi4_ep>:
    34fc:	88 1f       	adc	r24, r24
    34fe:	99 1f       	adc	r25, r25
    3500:	5a 95       	dec	r21
    3502:	a9 f7       	brne	.-22     	; 0x34ee <__udivmodhi4_loop>
    3504:	80 95       	com	r24
    3506:	90 95       	com	r25
    3508:	bc 01       	movw	r22, r24
    350a:	cd 01       	movw	r24, r26
    350c:	08 95       	ret

0000350e <_exit>:
    350e:	f8 94       	cli

00003510 <__stop_program>:
    3510:	ff cf       	rjmp	.-2      	; 0x3510 <__stop_program>
