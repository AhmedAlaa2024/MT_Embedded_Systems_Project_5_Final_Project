 /******************************************************************************
 *
 * Module: UART
 *
 * File Name: uart.c
 *
 * Description: Source file for the AVR UART driver
 *
 * Author: Ahmed Alaa
 *
 *******************************************************************************/
#include "../inc/common_macros.h"
#include "../inc/uart.h"
#include <avr/io.h>
#include "../../HAL/inc/lcd.h"
#include <avr/interrupt.h>

uint8 messages[FIFO_SIZE] = {'\0'};

uint8 end = 0;

ISR(USART_RXC_vect)
{
	//PORTD |= (1<<PD6);
	messages[end] = UDR;
	LCD_displayCharacter(messages[end]);
	if (end == FIFO_SIZE)
		end = 0;
	else
		end++;
}
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
/*
 * Description :
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_config *Config_Ptr)
{
	uint16 ubrr_value = 0;

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);

	/************************** UCSRB Description **************************
	 * RXCIE = 0 Disable USART RX Complete Interrupt Enable
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN) | (1<<RXCIE);
	if(Config_Ptr->number_of_bits_per_frame == NINE_BITS)
		UCSRB |= (1<<UCSZ2);
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
	/* Set the parity type in UPM1:0 */
	UCSRC |= ((Config_Ptr ->parity_type <<UPM0) & 0x30);
	/* Set the data range in UCSZ1:0 */
	UCSRC |= ((Config_Ptr ->number_of_bits_per_frame << UCSZ0) & 0x06);
	/* Set the numbers of stop bits in USBS */
	UCSRC |= ((Config_Ptr ->number_of_stop_bits << USBS) & 0x08);

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
	UBRRL = ubrr_value;
}

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE));

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
}

/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
	uint8 message;

	if(messages[0] == '\0')
	{
		return '\0'; // Nothing to read;
	}
	else
	{
		// Read the ready byte
		message = messages[0];

		// Shift all the bytes
		for(int i = 0; i < end; i++)
			messages[i] = messages[i+1];

		// Reserve the unused bytes
		messages[end] = '\0';
		end--;
	}

	return message;
}

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
	/* Send the whole string */
	while(*Str != '\0')
	{
		UART_sendByte(*Str);
		Str++;
	}
	UART_sendByte('#');
}

/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
bool UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	uint8 byte;
	/* Receive the first byte */
	byte = UART_recieveByte();

	if(byte == '\0')
		return false;
	else
		Str[i] = byte;

	/*
	 * Receive the whole string until the '#'
	 * Receive until '\0] which means the end of data
	 */
	while(Str[i] != '#' && Str[i] != '\0')
	{
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
	return true;
}
